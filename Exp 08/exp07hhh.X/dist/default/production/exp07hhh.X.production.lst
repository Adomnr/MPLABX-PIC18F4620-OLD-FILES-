

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Jul 10 03:32:37 2021

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           	psect	smallconst
    55  000600                     __psmallconst:
    56                           	opt stack 0
    57  000600  00                 	db	0
    58  000601                     _dpowers:
    59                           	opt stack 0
    60  000601  0001               	dw	1
    61  000603  0000               	dw	0
    62  000605  000A               	dw	10
    63  000607  0000               	dw	0
    64  000609  0064               	dw	100
    65  00060B  0000               	dw	0
    66  00060D  03E8               	dw	1000
    67  00060F  0000               	dw	0
    68  000611  2710               	dw	10000
    69  000613  0000               	dw	0
    70  000615  86A0               	dw	34464
    71  000617  0001               	dw	1
    72  000619  4240               	dw	16960
    73  00061B  000F               	dw	15
    74  00061D  9680               	dw	38528
    75  00061F  0098               	dw	152
    76  000621  E100               	dw	57600
    77  000623  05F5               	dw	1525
    78  000625  CA00               	dw	51712
    79  000627  3B9A               	dw	15258
    80  000629                     __end_of_dpowers:
    81                           	opt stack 0
    82  000629                     __npowers_:
    83                           	opt stack 0
    84  000629  00                 	db	0
    85  00062A  80                 	db	128
    86  00062B  3F                 	db	63
    87  00062C  CD                 	db	205
    88  00062D  CC                 	db	204
    89  00062E  3D                 	db	61
    90  00062F  D7                 	db	215
    91  000630  23                 	db	35
    92  000631  3C                 	db	60
    93  000632  12                 	db	18
    94  000633  83                 	db	131
    95  000634  3A                 	db	58
    96  000635  B7                 	db	183
    97  000636  D1                 	db	209
    98  000637  38                 	db	56
    99  000638  C6                 	db	198
   100  000639  27                 	db	39
   101  00063A  37                 	db	55
   102  00063B  38                 	db	56
   103  00063C  86                 	db	134
   104  00063D  35                 	db	53
   105  00063E  C0                 	db	192
   106  00063F  D6                 	db	214
   107  000640  33                 	db	51
   108  000641  CC                 	db	204
   109  000642  2B                 	db	43
   110  000643  32                 	db	50
   111  000644  70                 	db	112
   112  000645  89                 	db	137
   113  000646  30                 	db	48
   114  000647  E7                 	db	231
   115  000648  DB                 	db	219
   116  000649  2E                 	db	46
   117  00064A  E5                 	db	229
   118  00064B  3C                 	db	60
   119  00064C  1E                 	db	30
   120  00064D  42                 	db	66
   121  00064E  A2                 	db	162
   122  00064F  0D                 	db	13
   123  000650                     __end_of__npowers_:
   124                           	opt stack 0
   125  000650                     __powers_:
   126                           	opt stack 0
   127  000650  00                 	db	0
   128  000651  80                 	db	128
   129  000652  3F                 	db	63
   130  000653  00                 	db	0
   131  000654  20                 	db	32
   132  000655  41                 	db	65
   133  000656  00                 	db	0
   134  000657  C8                 	db	200
   135  000658  42                 	db	66
   136  000659  00                 	db	0
   137  00065A  7A                 	db	122
   138  00065B  44                 	db	68
   139  00065C  40                 	db	64
   140  00065D  1C                 	db	28
   141  00065E  46                 	db	70
   142  00065F  50                 	db	80
   143  000660  C3                 	db	195
   144  000661  47                 	db	71
   145  000662  24                 	db	36
   146  000663  74                 	db	116
   147  000664  49                 	db	73
   148  000665  97                 	db	151
   149  000666  18                 	db	24
   150  000667  4B                 	db	75
   151  000668  BC                 	db	188
   152  000669  BE                 	db	190
   153  00066A  4C                 	db	76
   154  00066B  6B                 	db	107
   155  00066C  6E                 	db	110
   156  00066D  4E                 	db	78
   157  00066E  03                 	db	3
   158  00066F  15                 	db	21
   159  000670  50                 	db	80
   160  000671  79                 	db	121
   161  000672  AD                 	db	173
   162  000673  60                 	db	96
   163  000674  F3                 	db	243
   164  000675  49                 	db	73
   165  000676  71                 	db	113
   166  000677                     __end_of__powers_:
   167                           	opt stack 0
   168  0000                     _ADCON0	set	4034
   169  0000                     _ADCON0bits	set	4034
   170  0000                     _ADCON1	set	4033
   171  0000                     _ADCON2	set	4032
   172  0000                     _ADRESH	set	4036
   173  0000                     _ADRESL	set	4035
   174  0000                     _INTCONbits	set	4082
   175  0000                     _LATBbits	set	3978
   176  0000                     _OSCCON	set	4051
   177  0000                     _PIE1bits	set	3997
   178  0000                     _PIR1bits	set	3998
   179  0000                     _PORTB	set	3969
   180  0000                     _TRISB	set	3987
   181  0000                     _TRISBbits	set	3987
   182  000677                     STR_2:
   183  000677  4C                 	db	76	;'L'
   184  000678  43                 	db	67	;'C'
   185  000679  44                 	db	68	;'D'
   186  00067A  20                 	db	32
   187  00067B  64                 	db	100	;'d'
   188  00067C  69                 	db	105	;'i'
   189  00067D  73                 	db	115	;'s'
   190  00067E  70                 	db	112	;'p'
   191  00067F  6C                 	db	108	;'l'
   192  000680  61                 	db	97	;'a'
   193  000681  79                 	db	121	;'y'
   194  000682  00                 	db	0
   195  000683                     STR_3:
   196  000683  56                 	db	86	;'V'
   197  000684  6F                 	db	111	;'o'
   198  000685  6C                 	db	108	;'l'
   199  000686  74                 	db	116	;'t'
   200  000687  61                 	db	97	;'a'
   201  000688  67                 	db	103	;'g'
   202  000689  65                 	db	101	;'e'
   203  00068A  3D                 	db	61	;'='
   204  00068B  20                 	db	32
   205  00068C  00                 	db	0
   206  00068D                     STR_4:
   207  00068D  25                 	db	37
   208  00068E  2E                 	db	46
   209  00068F  33                 	db	51	;'3'
   210  000690  67                 	db	103	;'g'
   211  000691  00                 	db	0
   212  000692                     STR_1:
   213  000692  41                 	db	65	;'A'
   214  000693  44                 	db	68	;'D'
   215  000694  43                 	db	67	;'C'
   216  000695  00                 	db	0
   217  0000                     
   218                           ; #config settings
   219  000696  00                 	db	0	; dummy byte at the end
   220  0000                     
   221                           	psect	cinit
   222  002B20                     __pcinit:
   223                           	opt stack 0
   224  002B20                     start_initialization:
   225                           	opt stack 0
   226  002B20                     __initialization:
   227                           	opt stack 0
   228                           
   229                           ; Clear objects allocated to BANK0 (20 bytes)
   230  002B20  EE00  F07A         	lfsr	0,__pbssBANK0
   231  002B24  0E14               	movlw	20
   232  002B26                     clear_0:
   233  002B26  6AEE               	clrf	postinc0,c
   234  002B28  06E8               	decf	wreg,f,c
   235  002B2A  E1FD               	bnz	clear_0
   236                           
   237                           ; Clear objects allocated to COMRAM (5 bytes)
   238  002B2C  6A5E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   239  002B2E  6A5D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   240  002B30  6A5C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   241  002B32  6A5B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   242  002B34  6A5A               	clrf	__pbssCOMRAM& (0+255),c
   243  002B36                     end_of_initialization:
   244                           	opt stack 0
   245  002B36                     __end_of__initialization:
   246                           	opt stack 0
   247  002B36  0E00               	movlw	low (__Lmediumconst shr (0+16))
   248  002B38  6EF8               	movwf	tblptru,c
   249  002B3A  0100               	movlb	0
   250  002B3C  EFF4  F00E         	goto	_main	;jump to C main() function
   251                           tblptru	equ	0xFF8
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssCOMRAM
   256  00005A                     __pbssCOMRAM:
   257                           	opt stack 0
   258  00005A                     _voltage:
   259                           	opt stack 0
   260  00005A                     	ds	3
   261  00005D                     _ADCResult:
   262                           	opt stack 0
   263  00005D                     	ds	2
   264                           tblptru	equ	0xFF8
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	bssBANK0
   269  00007A                     __pbssBANK0:
   270                           	opt stack 0
   271  00007A                     _Buffer:
   272                           	opt stack 0
   273  00007A                     	ds	20
   274                           tblptru	equ	0xFF8
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           
   278                           	psect	cstackBANK0
   279  000060                     __pcstackBANK0:
   280                           	opt stack 0
   281  000060                     _sprintf$1398:
   282                           	opt stack 0
   283                           
   284                           ; 3 bytes @ 0x0
   285  000060                     	ds	3
   286  000063                     sprintf@ap:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x3
   290  000063                     	ds	2
   291  000065                     sprintf@temp:
   292                           	opt stack 0
   293                           
   294                           ; 3 bytes @ 0x5
   295  000065                     	ds	3
   296  000068                     sprintf@flag:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x8
   300  000068                     	ds	2
   301  00006A                     sprintf@tmpval:
   302                           	opt stack 0
   303                           
   304                           ; 4 bytes @ 0xA
   305  00006A                     	ds	4
   306  00006E                     sprintf@val:
   307                           	opt stack 0
   308                           
   309                           ; 4 bytes @ 0xE
   310  00006E                     	ds	4
   311  000072                     sprintf@exp:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x12
   315  000072                     	ds	2
   316  000074                     sprintf@prec:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x14
   320  000074                     	ds	2
   321  000076                     sprintf@fval:
   322                           	opt stack 0
   323                           
   324                           ; 3 bytes @ 0x16
   325  000076                     	ds	3
   326  000079                     sprintf@c:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0x19
   330  000079                     	ds	1
   331                           tblptru	equ	0xFF8
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           
   335                           	psect	cstackCOMRAM
   336  000001                     __pcstackCOMRAM:
   337                           	opt stack 0
   338  000001                     ??_isdigit:
   339  000001                     ??_Delay10KTCYx:
   340  000001                     ?_ReadADC:
   341                           	opt stack 0
   342  000001                     ?___awmod:
   343                           	opt stack 0
   344  000001                     ?___ftpack:
   345                           	opt stack 0
   346  000001                     ?__tdiv_to_l_:
   347                           	opt stack 0
   348  000001                     ?__div_to_l_:
   349                           	opt stack 0
   350  000001                     ?___fttol:
   351                           	opt stack 0
   352  000001                     ?___lldiv:
   353                           	opt stack 0
   354  000001                     ?___llmod:
   355                           	opt stack 0
   356  000001                     OpenADC@config2:
   357                           	opt stack 0
   358  000001                     Delay10TCYx@unit:
   359                           	opt stack 0
   360  000001                     Delay1KTCYx@unit:
   361                           	opt stack 0
   362  000001                     ___awmod@dividend:
   363                           	opt stack 0
   364  000001                     __div_to_l_@f1:
   365                           	opt stack 0
   366  000001                     ___ftpack@arg:
   367                           	opt stack 0
   368  000001                     __tdiv_to_l_@f1:
   369                           	opt stack 0
   370  000001                     ___fttol@f1:
   371                           	opt stack 0
   372  000001                     ___lldiv@dividend:
   373                           	opt stack 0
   374  000001                     ___llmod@dividend:
   375                           	opt stack 0
   376                           
   377                           ; 4 bytes @ 0x0
   378  000001                     	ds	1
   379  000002                     ??_SetDDRamAddr:
   380  000002                     OpenADC@portconfig:
   381                           	opt stack 0
   382  000002                     WriteCmdXLCD@cmd:
   383                           	opt stack 0
   384  000002                     WriteDataXLCD@data:
   385                           	opt stack 0
   386  000002                     Delay10KTCYx@unit:
   387                           	opt stack 0
   388  000002                     _isdigit$1164:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0x1
   392  000002                     	ds	1
   393  000003                     ??_ReadADC:
   394  000003                     ??_OpenADC:
   395  000003                     isdigit@c:
   396                           	opt stack 0
   397  000003                     putrsXLCD@buffer:
   398                           	opt stack 0
   399  000003                     putsXLCD@buffer:
   400                           	opt stack 0
   401  000003                     ___awmod@divisor:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x2
   405  000003                     	ds	1
   406  000004                     ___ftpack@exp:
   407                           	opt stack 0
   408  000004                     __div_to_l_@f2:
   409                           	opt stack 0
   410  000004                     __tdiv_to_l_@f2:
   411                           	opt stack 0
   412                           
   413                           ; 3 bytes @ 0x3
   414  000004                     	ds	1
   415  000005                     ??___fttol:
   416  000005                     OpenADC@config:
   417                           	opt stack 0
   418  000005                     SetDDRamAddr@DDaddr:
   419                           	opt stack 0
   420  000005                     ___awmod@counter:
   421                           	opt stack 0
   422  000005                     ___ftpack@sign:
   423                           	opt stack 0
   424  000005                     ___lldiv@divisor:
   425                           	opt stack 0
   426  000005                     ___llmod@divisor:
   427                           	opt stack 0
   428                           
   429                           ; 4 bytes @ 0x4
   430  000005                     	ds	1
   431  000006                     ??___ftpack:
   432  000006                     OpenXLCD@lcdtype:
   433                           	opt stack 0
   434  000006                     ___awmod@sign:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x5
   438  000006                     	ds	1
   439  000007                     ??__tdiv_to_l_:
   440  000007                     ?___awdiv:
   441                           	opt stack 0
   442  000007                     ___awdiv@dividend:
   443                           	opt stack 0
   444  000007                     __div_to_l_@quot:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x6
   448  000007                     	ds	2
   449  000009                     ?___lwtoft:
   450                           	opt stack 0
   451  000009                     ___llmod@counter:
   452                           	opt stack 0
   453  000009                     ___awdiv@divisor:
   454                           	opt stack 0
   455  000009                     ___lwtoft@c:
   456                           	opt stack 0
   457  000009                     ___lldiv@quotient:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x8
   461  000009                     	ds	1
   462  00000A                     ___fttol@sign1:
   463                           	opt stack 0
   464  00000A                     __tdiv_to_l_@quot:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x9
   468  00000A                     	ds	1
   469  00000B                     ___awdiv@counter:
   470                           	opt stack 0
   471  00000B                     __div_to_l_@cntr:
   472                           	opt stack 0
   473  00000B                     ___fttol@lval:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0xA
   477  00000B                     	ds	1
   478  00000C                     ___awdiv@sign:
   479                           	opt stack 0
   480  00000C                     __div_to_l_@exp1:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0xB
   484  00000C                     	ds	1
   485  00000D                     ___lldiv@counter:
   486                           	opt stack 0
   487  00000D                     ___awdiv@quotient:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0xC
   491  00000D                     	ds	1
   492  00000E                     __tdiv_to_l_@cntr:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0xD
   496  00000E                     	ds	1
   497  00000F                     ?___wmul:
   498                           	opt stack 0
   499  00000F                     __tdiv_to_l_@exp1:
   500                           	opt stack 0
   501  00000F                     ___fttol@exp1:
   502                           	opt stack 0
   503  00000F                     ___wmul@multiplier:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0xE
   507  00000F                     	ds	1
   508  000010                     ?___lltoft:
   509                           	opt stack 0
   510  000010                     ___lltoft@c:
   511                           	opt stack 0
   512                           
   513                           ; 4 bytes @ 0xF
   514  000010                     	ds	1
   515  000011                     ___wmul@multiplicand:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x10
   519  000011                     	ds	2
   520  000013                     ___wmul@product:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x12
   524  000013                     	ds	1
   525  000014                     ??___lltoft:
   526                           
   527                           ; 0 bytes @ 0x13
   528  000014                     	ds	4
   529  000018                     ___lltoft@exp:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x17
   533  000018                     	ds	1
   534  000019                     ?___ftneg:
   535                           	opt stack 0
   536  000019                     ___ftneg@f1:
   537                           	opt stack 0
   538                           
   539                           ; 3 bytes @ 0x18
   540  000019                     	ds	3
   541  00001C                     ?___ftmul:
   542                           	opt stack 0
   543  00001C                     ___ftmul@f1:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0x1B
   547  00001C                     	ds	3
   548  00001F                     ___ftmul@f2:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x1E
   552  00001F                     	ds	3
   553  000022                     ??___ftmul:
   554                           
   555                           ; 0 bytes @ 0x21
   556  000022                     	ds	3
   557  000025                     ___ftmul@exp:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x24
   561  000025                     	ds	1
   562  000026                     ___ftmul@f3_as_product:
   563                           	opt stack 0
   564                           
   565                           ; 3 bytes @ 0x25
   566  000026                     	ds	3
   567  000029                     ___ftmul@cntr:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x28
   571  000029                     	ds	1
   572  00002A                     ___ftmul@sign:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x29
   576  00002A                     	ds	1
   577  00002B                     ?_fround:
   578                           	opt stack 0
   579  00002B                     ?_scale:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x2A
   583  00002B                     	ds	3
   584  00002E                     _fround$1396:
   585                           	opt stack 0
   586  00002E                     _scale$1397:
   587                           	opt stack 0
   588                           
   589                           ; 3 bytes @ 0x2D
   590  00002E                     	ds	3
   591  000031                     scale@scl:
   592                           	opt stack 0
   593  000031                     _fround$1395:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x30
   597  000031                     	ds	1
   598  000032                     ?___ftdiv:
   599                           	opt stack 0
   600  000032                     ___ftdiv@f1:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x31
   604  000032                     	ds	2
   605  000034                     fround@prec:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x33
   609  000034                     	ds	1
   610  000035                     ?___ftadd:
   611                           	opt stack 0
   612  000035                     ___ftadd@f1:
   613                           	opt stack 0
   614  000035                     ___ftdiv@f2:
   615                           	opt stack 0
   616                           
   617                           ; 3 bytes @ 0x34
   618  000035                     	ds	3
   619  000038                     ??___ftdiv:
   620  000038                     ___ftadd@f2:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x37
   624  000038                     	ds	3
   625  00003B                     ??___ftadd:
   626  00003B                     ___ftdiv@cntr:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x3A
   630  00003B                     	ds	1
   631  00003C                     ___ftdiv@f3:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x3B
   635  00003C                     	ds	2
   636  00003E                     ___ftadd@sign:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x3D
   640  00003E                     	ds	1
   641  00003F                     ___ftadd@exp2:
   642                           	opt stack 0
   643  00003F                     ___ftdiv@exp:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x3E
   647  00003F                     	ds	1
   648  000040                     ___ftadd@exp1:
   649                           	opt stack 0
   650  000040                     ___ftdiv@sign:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0x3F
   654  000040                     	ds	1
   655  000041                     ?___ftsub:
   656                           	opt stack 0
   657  000041                     ___ftge@ff1:
   658                           	opt stack 0
   659  000041                     ___ftsub@f1:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x40
   663  000041                     	ds	3
   664  000044                     ___ftge@ff2:
   665                           	opt stack 0
   666  000044                     ___ftsub@f2:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x43
   670  000044                     	ds	3
   671  000047                     ??___ftge:
   672                           
   673                           ; 0 bytes @ 0x46
   674  000047                     	ds	3
   675  00004A                     ?_sprintf:
   676                           	opt stack 0
   677  00004A                     sprintf@sp:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x49
   681  00004A                     	ds	2
   682  00004C                     sprintf@f:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x4B
   686  00004C                     	ds	5
   687  000051                     ??_sprintf:
   688                           
   689                           ; 0 bytes @ 0x50
   690  000051                     	ds	6
   691  000057                     ??_main:
   692                           
   693                           ; 0 bytes @ 0x56
   694  000057                     	ds	1
   695  000058                     main@x:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x57
   699  000058                     	ds	2
   700                           tblptru	equ	0xFF8
   701                           postinc0	equ	0xFEE
   702                           wreg	equ	0xFE8
   703                           
   704 ;;
   705 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   706 ;;
   707 ;; *************** function _main *****************
   708 ;; Defined at:
   709 ;;		line 22 in file "exp07hhh.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  x               2   87[COMRAM] int 
   714 ;; Return value:  Size  Location     Type
   715 ;;		None               void
   716 ;; Registers used:
   717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   723 ;;      Params:         0       0       0       0       0       0       0
   724 ;;      Locals:         2       0       0       0       0       0       0
   725 ;;      Temps:          1       0       0       0       0       0       0
   726 ;;      Totals:         3       0       0       0       0       0       0
   727 ;;Total ram usage:        3 bytes
   728 ;; Hardware stack levels required when called:    5
   729 ;; This function calls:
   730 ;;		_BusyADC
   731 ;;		_ConvertADC
   732 ;;		_ReadADC
   733 ;;		_SetDDRamAddr
   734 ;;		_WriteCmdXLCD
   735 ;;		___ftdiv
   736 ;;		___ftmul
   737 ;;		___lwtoft
   738 ;;		_init_ADC1
   739 ;;		_init_XLCD
   740 ;;		_putrsXLCD
   741 ;;		_putsXLCD
   742 ;;		_sprintf
   743 ;; This function is called by:
   744 ;;		Startup code after reset
   745 ;; This function uses a non-reentrant model
   746 ;;
   747                           
   748                           	psect	text0
   749  001DE8                     __ptext0:
   750                           	opt stack 0
   751  001DE8                     _main:
   752                           	opt stack 26
   753                           
   754                           ;exp07hhh.c: 24: OSCCON=0x76;
   755                           
   756                           ;incstack = 0
   757  001DE8  0E76               	movlw	118
   758  001DEA  6ED3               	movwf	4051,c	;volatile
   759                           
   760                           ;exp07hhh.c: 25: init_XLCD();
   761  001DEC  ECA0  F015         	call	_init_XLCD	;wreg free
   762                           
   763                           ;exp07hhh.c: 26: init_ADC1();
   764  001DF0  ECCE  F015         	call	_init_ADC1	;wreg free
   765                           
   766                           ;exp07hhh.c: 27: putrsXLCD("ADC");
   767  001DF4  0E92               	movlw	low STR_1
   768  001DF6  6E03               	movwf	putrsXLCD@buffer,c
   769  001DF8  0E06               	movlw	high STR_1
   770  001DFA  6E04               	movwf	putrsXLCD@buffer+1,c
   771  001DFC  EC11  F015         	call	_putrsXLCD	;wreg free
   772                           
   773                           ;exp07hhh.c: 28: SetDDRamAddr(0x40);
   774  001E00  0E40               	movlw	64
   775  001E02  EC67  F014         	call	_SetDDRamAddr
   776                           
   777                           ;exp07hhh.c: 29: putrsXLCD("LCD display");
   778  001E06  0E77               	movlw	low STR_2
   779  001E08  6E03               	movwf	putrsXLCD@buffer,c
   780  001E0A  0E06               	movlw	high STR_2
   781  001E0C  6E04               	movwf	putrsXLCD@buffer+1,c
   782  001E0E  EC11  F015         	call	_putrsXLCD	;wreg free
   783                           
   784                           ;exp07hhh.c: 30: for (int x=0; x<=20;x++) _delay((unsigned long)((50)*(8000000/4000.0)))
      +                          ;
   785  001E12  0E00               	movlw	0
   786  001E14  6E59               	movwf	main@x+1,c
   787  001E16  0E00               	movlw	0
   788  001E18  6E58               	movwf	main@x,c
   789  001E1A                     l3427:
   790  001E1A  BE59               	btfsc	main@x+1,7,c
   791  001E1C  D008               	goto	l3431
   792  001E1E  5059               	movf	main@x+1,w,c
   793  001E20  E111               	bnz	l3435
   794  001E22  0E15               	movlw	21
   795  001E24  5C58               	subwf	main@x,w,c
   796  001E26  B0D8               	btfsc	status,0,c
   797  001E28  D00D               	goto	l3435
   798  001E2A  D001               	goto	l3431
   799  001E2C  D00B               	goto	l3435
   800  001E2E                     l3431:
   801  001E2E  0E82               	movlw	130
   802  001E30  6E57               	movwf	??_main& (0+255),c
   803  001E32  0EDE               	movlw	222
   804  001E34                     u3517:
   805  001E34  2EE8               	decfsz	wreg,f,c
   806  001E36  D7FE               	goto	u3517
   807  001E38  2E57               	decfsz	??_main& (0+255),f,c
   808  001E3A  D7FC               	goto	u3517
   809  001E3C  4A58               	infsnz	main@x,f,c
   810  001E3E  2A59               	incf	main@x+1,f,c
   811  001E40  D7EC               	goto	l3427
   812  001E42  D000               	goto	l3435
   813  001E44                     l3435:
   814                           
   815                           ;exp07hhh.c: 31: WriteCmdXLCD(0x01);
   816  001E44  0E01               	movlw	1
   817  001E46  ECD3  F014         	call	_WriteCmdXLCD
   818  001E4A  D000               	goto	l3437
   819  001E4C                     l3437:
   820                           
   821                           ;exp07hhh.c: 33: {
   822                           ;exp07hhh.c: 34: ADCResult =0;
   823  001E4C  0E00               	movlw	0
   824  001E4E  6E5E               	movwf	_ADCResult+1,c
   825  001E50  0E00               	movlw	0
   826  001E52  6E5D               	movwf	_ADCResult,c
   827                           
   828                           ;exp07hhh.c: 36: ConvertADC();
   829  001E54  ECED  F015         	call	_ConvertADC	;wreg free
   830                           
   831                           ;exp07hhh.c: 37: while(BusyADC());
   832  001E58  D000               	goto	l3441
   833  001E5A                     l3441:
   834  001E5A  ECDE  F015         	call	_BusyADC	;wreg free
   835  001E5E  0900               	iorlw	0
   836  001E60  A4D8               	btfss	status,2,c
   837  001E62  D7FB               	goto	l3441
   838                           
   839                           ;exp07hhh.c: 38: ADCResult =ReadADC();
   840  001E64  ECD6  F015         	call	_ReadADC	;wreg free
   841  001E68  C001  F05D         	movff	?_ReadADC,_ADCResult
   842  001E6C  C002  F05E         	movff	?_ReadADC+1,_ADCResult+1
   843                           
   844                           ;exp07hhh.c: 39: voltage=ADCResult*(5.0)/1024;
   845  001E70  0E00               	movlw	0
   846  001E72  6E1F               	movwf	___ftmul@f2,c
   847  001E74  0EA0               	movlw	160
   848  001E76  6E20               	movwf	___ftmul@f2+1,c
   849  001E78  0E40               	movlw	64
   850  001E7A  6E21               	movwf	___ftmul@f2+2,c
   851  001E7C  C05D  F009         	movff	_ADCResult,___lwtoft@c
   852  001E80  C05E  F00A         	movff	_ADCResult+1,___lwtoft@c+1
   853  001E84  EC5A  F015         	call	___lwtoft	;wreg free
   854  001E88  C009  F01C         	movff	?___lwtoft,___ftmul@f1
   855  001E8C  C00A  F01D         	movff	?___lwtoft+1,___ftmul@f1+1
   856  001E90  C00B  F01E         	movff	?___lwtoft+2,___ftmul@f1+2
   857  001E94  EC95  F010         	call	___ftmul	;wreg free
   858  001E98  C01C  F032         	movff	?___ftmul,___ftdiv@f1
   859  001E9C  C01D  F033         	movff	?___ftmul+1,___ftdiv@f1+1
   860  001EA0  C01E  F034         	movff	?___ftmul+2,___ftdiv@f1+2
   861  001EA4  0E00               	movlw	0
   862  001EA6  6E35               	movwf	___ftdiv@f2,c
   863  001EA8  0E80               	movlw	128
   864  001EAA  6E36               	movwf	___ftdiv@f2+1,c
   865  001EAC  0E44               	movlw	68
   866  001EAE  6E37               	movwf	___ftdiv@f2+2,c
   867  001EB0  EC84  F011         	call	___ftdiv	;wreg free
   868  001EB4  C032  F05A         	movff	?___ftdiv,_voltage
   869  001EB8  C033  F05B         	movff	?___ftdiv+1,_voltage+1
   870  001EBC  C034  F05C         	movff	?___ftdiv+2,_voltage+2
   871                           
   872                           ;exp07hhh.c: 41: putrsXLCD("Voltage= ");
   873  001EC0  0E83               	movlw	low STR_3
   874  001EC2  6E03               	movwf	putrsXLCD@buffer,c
   875  001EC4  0E06               	movlw	high STR_3
   876  001EC6  6E04               	movwf	putrsXLCD@buffer+1,c
   877  001EC8  EC11  F015         	call	_putrsXLCD	;wreg free
   878                           
   879                           ;exp07hhh.c: 42: sprintf(Buffer, "%.3g", voltage );
   880  001ECC  0E7A               	movlw	low _Buffer
   881  001ECE  6E4A               	movwf	sprintf@sp,c
   882  001ED0  0E00               	movlw	high _Buffer
   883  001ED2  6E4B               	movwf	sprintf@sp+1,c
   884  001ED4  0E8D               	movlw	low STR_4
   885  001ED6  6E4C               	movwf	sprintf@f,c
   886  001ED8  0E06               	movlw	high STR_4
   887  001EDA  6E4D               	movwf	sprintf@f+1,c
   888  001EDC  C05A  F04E         	movff	_voltage,?_sprintf+4
   889  001EE0  C05B  F04F         	movff	_voltage+1,?_sprintf+5
   890  001EE4  C05C  F050         	movff	_voltage+2,?_sprintf+6
   891  001EE8  EC4C  F003         	call	_sprintf	;wreg free
   892                           
   893                           ;exp07hhh.c: 43: putsXLCD(Buffer);
   894  001EEC  0E7A               	movlw	low _Buffer
   895  001EEE  6E03               	movwf	putsXLCD@buffer,c
   896  001EF0  0E00               	movlw	high _Buffer
   897  001EF2  6E04               	movwf	putsXLCD@buffer+1,c
   898  001EF4  EC2D  F015         	call	_putsXLCD	;wreg free
   899                           
   900                           ;exp07hhh.c: 44: putrsXLCD(" ");
   901  001EF8  0E8B               	movlw	low (STR_3+8)
   902  001EFA  6E03               	movwf	putrsXLCD@buffer,c
   903  001EFC  0E06               	movlw	high (STR_3+8)
   904  001EFE  6E04               	movwf	putrsXLCD@buffer+1,c
   905  001F00  EC11  F015         	call	_putrsXLCD	;wreg free
   906                           
   907                           ;exp07hhh.c: 45: WriteCmdXLCD(0x02);
   908  001F04  0E02               	movlw	2
   909  001F06  ECD3  F014         	call	_WriteCmdXLCD
   910  001F0A  D7A0               	goto	l3437
   911  001F0C  EF00  F000         	goto	start
   912  001F10                     __end_of_main:
   913                           	opt stack 0
   914                           tblptru	equ	0xFF8
   915                           postinc0	equ	0xFEE
   916                           wreg	equ	0xFE8
   917                           status	equ	0xFD8
   918                           
   919 ;; *************** function _sprintf *****************
   920 ;; Defined at:
   921 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;  sp              2   73[COMRAM] PTR unsigned char 
   924 ;;		 -> Buffer(20), 
   925 ;;  f               2   75[COMRAM] PTR const unsigned char 
   926 ;;		 -> STR_4(5), 
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  temp            3    5[BANK0 ] PTR const unsigned char 
   929 ;;  val             4   14[BANK0 ] unsigned long 
   930 ;;  tmpval          4   10[BANK0 ] struct .
   931 ;;  fval            3   22[BANK0 ] struct .
   932 ;;  cp              3    0        PTR const unsigned char 
   933 ;;  prec            2   20[BANK0 ] int 
   934 ;;  exp             2   18[BANK0 ] int 
   935 ;;  flag            2    8[BANK0 ] unsigned short 
   936 ;;  ap              2    3[BANK0 ] PTR void [1]
   937 ;;		 -> ?_sprintf(2), 
   938 ;;  len             2    0        unsigned int 
   939 ;;  width           2    0        int 
   940 ;;  c               1   25[BANK0 ] char 
   941 ;;  d               1    0        unsigned char 
   942 ;; Return value:  Size  Location     Type
   943 ;;                  2   73[COMRAM] int 
   944 ;; Registers used:
   945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   951 ;;      Params:         7       0       0       0       0       0       0
   952 ;;      Locals:         0      26       0       0       0       0       0
   953 ;;      Temps:          6       0       0       0       0       0       0
   954 ;;      Totals:        13      26       0       0       0       0       0
   955 ;;Total ram usage:       39 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    3
   958 ;; This function calls:
   959 ;;		___awdiv
   960 ;;		___awmod
   961 ;;		___ftadd
   962 ;;		___ftdiv
   963 ;;		___ftge
   964 ;;		___ftmul
   965 ;;		___ftneg
   966 ;;		___ftsub
   967 ;;		___fttol
   968 ;;		___lldiv
   969 ;;		___llmod
   970 ;;		___lltoft
   971 ;;		___wmul
   972 ;;		__div_to_l_
   973 ;;		__tdiv_to_l_
   974 ;;		_fround
   975 ;;		_isdigit
   976 ;;		_scale
   977 ;; This function is called by:
   978 ;;		_main
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text1
   983  000698                     __ptext1:
   984                           	opt stack 0
   985  000698                     _sprintf:
   986                           	opt stack 27
   987                           
   988                           ;doprnt.c: 494: va_list ap;
   989                           ;doprnt.c: 499: signed char c;
   990                           ;doprnt.c: 501: int width;
   991                           ;doprnt.c: 504: int prec;
   992                           ;doprnt.c: 508: unsigned short flag;
   993                           ;doprnt.c: 515: char d;
   994                           ;doprnt.c: 516: double fval;
   995                           ;doprnt.c: 517: int exp;
   996                           ;doprnt.c: 523: union {
   997                           ;doprnt.c: 524: unsigned long vd;
   998                           ;doprnt.c: 525: double integ;
   999                           ;doprnt.c: 526: } tmpval;
  1000                           ;doprnt.c: 528: unsigned long val;
  1001                           ;doprnt.c: 529: unsigned len;
  1002                           ;doprnt.c: 530: const char * cp;
  1003                           ;doprnt.c: 533: *ap = __va_start();
  1004                           
  1005                           ;incstack = 0
  1006  000698  0E4E               	movlw	low (?_sprintf+4)
  1007  00069A  0100               	movlb	0	; () banked
  1008  00069C  6F63               	movwf	sprintf@ap& (0+255),b
  1009  00069E  0E00               	movlw	high (?_sprintf+4)
  1010  0006A0  0100               	movlb	0	; () banked
  1011  0006A2  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1012                           
  1013                           ;doprnt.c: 536: while(c = *f++) {
  1014  0006A4  EFE8  F00A         	goto	l3393
  1015  0006A8                     l3055:
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;doprnt.c: 538: if(c != '%')
  1019  0006A8  0E25               	movlw	37
  1020  0006AA  0100               	movlb	0	; () banked
  1021  0006AC  1979               	xorwf	sprintf@c& (0+255),w,b
  1022  0006AE  B4D8               	btfsc	status,2,c
  1023  0006B0  D007               	goto	l3061
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;doprnt.c: 540: {
  1027                           ;doprnt.c: 541: ((*sp++ = (c)));
  1028  0006B2  C04A  FFD9         	movff	sprintf@sp,fsr2l
  1029  0006B6  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  1030  0006BA  C079  FFDF         	movff	sprintf@c,indf2
  1031  0006BE  D3BD               	goto	l3231
  1032  0006C0                     l3061:
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;doprnt.c: 543: }
  1036                           ;doprnt.c: 548: flag = 0;
  1037  0006C0  0E00               	movlw	0
  1038  0006C2  0100               	movlb	0	; () banked
  1039  0006C4  6F69               	movwf	(sprintf@flag+1)& (0+255),b
  1040  0006C6  0E00               	movlw	0
  1041  0006C8  6F68               	movwf	sprintf@flag& (0+255),b
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;doprnt.c: 611: if(*f == '.') {
  1045  0006CA  C04C  FFF6         	movff	sprintf@f,tblptrl
  1046  0006CE  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  1047  0006D2                     	if	0	;tblptru may be non-zero
  1048  0006D2                     	endif
  1049  0006D2                     	if	0	;tblptru may be non-zero
  1050  0006D2                     	endif
  1051  0006D2  0008               	tblrd		*
  1052  0006D4  50F5               	movf	tablat,w,c
  1053  0006D6  0A2E               	xorlw	46
  1054  0006D8  A4D8               	btfss	status,2,c
  1055  0006DA  D034               	goto	l3075
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;doprnt.c: 612: flag |= 0x4000;
  1059  0006DC  0100               	movlb	0	; () banked
  1060  0006DE  8D69               	bsf	(sprintf@flag+1)& (0+255),6,b
  1061                           
  1062                           ;doprnt.c: 613: f++;
  1063  0006E0  4A4C               	infsnz	sprintf@f,f,c
  1064  0006E2  2A4D               	incf	sprintf@f+1,f,c
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;doprnt.c: 620: {
  1068                           ;doprnt.c: 621: prec = 0;
  1069  0006E4  0E00               	movlw	0
  1070  0006E6  0100               	movlb	0	; () banked
  1071  0006E8  6F75               	movwf	(sprintf@prec+1)& (0+255),b
  1072  0006EA  0E00               	movlw	0
  1073  0006EC  6F74               	movwf	sprintf@prec& (0+255),b
  1074                           
  1075                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1076  0006EE  D01E               	goto	l3073
  1077  0006F0                     l3069:
  1078                           
  1079                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1080  0006F0  C074  F00F         	movff	sprintf@prec,___wmul@multiplier
  1081  0006F4  C075  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1082  0006F8  0E00               	movlw	0
  1083  0006FA  6E12               	movwf	___wmul@multiplicand+1,c
  1084  0006FC  0E0A               	movlw	10
  1085  0006FE  6E11               	movwf	___wmul@multiplicand,c
  1086  000700  EC46  F015         	call	___wmul	;wreg free
  1087  000704  C04C  FFF6         	movff	sprintf@f,tblptrl
  1088  000708  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  1089  00070C                     	if	0	;tblptru may be non-zero
  1090  00070C                     	endif
  1091  00070C                     	if	0	;tblptru may be non-zero
  1092  00070C                     	endif
  1093  00070C  0008               	tblrd		*
  1094  00070E  50F5               	movf	tablat,w,c
  1095  000710  260F               	addwf	?___wmul,f,c
  1096  000712  0E00               	movlw	0
  1097  000714  2210               	addwfc	?___wmul+1,f,c
  1098  000716  0ED0               	movlw	208
  1099  000718  240F               	addwf	?___wmul,w,c
  1100  00071A  0100               	movlb	0	; () banked
  1101  00071C  6F74               	movwf	sprintf@prec& (0+255),b
  1102  00071E  0EFF               	movlw	255
  1103  000720  2010               	addwfc	?___wmul+1,w,c
  1104  000722  0100               	movlb	0	; () banked
  1105  000724  6F75               	movwf	(sprintf@prec+1)& (0+255),b
  1106                           
  1107                           ; BSR set to: 0
  1108  000726  4A4C               	infsnz	sprintf@f,f,c
  1109  000728  2A4D               	incf	sprintf@f+1,f,c
  1110  00072A  D000               	goto	l3073
  1111  00072C                     l3073:
  1112                           
  1113                           ; BSR set to: 0
  1114  00072C  C04C  FFF6         	movff	sprintf@f,tblptrl
  1115  000730  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  1116  000734                     	if	0	;tblptru may be non-zero
  1117  000734                     	endif
  1118  000734                     	if	0	;tblptru may be non-zero
  1119  000734                     	endif
  1120  000734  0008               	tblrd		*
  1121  000736  50F5               	movf	tablat,w,c
  1122  000738  EC7F  F015         	call	_isdigit
  1123  00073C  A0D8               	btfss	status,0,c
  1124  00073E  D012               	goto	l3083
  1125  000740  D7D7               	goto	l3069
  1126                           
  1127                           ;doprnt.c: 624: }
  1128                           ;doprnt.c: 625: } else {
  1129  000742  D010               	goto	l3083
  1130  000744                     l3075:
  1131                           
  1132                           ;doprnt.c: 626: prec = 0;
  1133  000744  0E00               	movlw	0
  1134  000746  0100               	movlb	0	; () banked
  1135  000748  6F75               	movwf	(sprintf@prec+1)& (0+255),b
  1136  00074A  0E00               	movlw	0
  1137  00074C  6F74               	movwf	sprintf@prec& (0+255),b
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;doprnt.c: 628: flag |= 0x1000;
  1141  00074E  0100               	movlb	0	; () banked
  1142  000750  8969               	bsf	(sprintf@flag+1)& (0+255),4,b
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;doprnt.c: 630: }
  1146                           ;doprnt.c: 635: switch(c = *f++) {
  1147  000752  D008               	goto	l3083
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;doprnt.c: 638: goto alldone;
  1151                           
  1152                           ;doprnt.c: 637: case 0:
  1153  000754  EFF8  F00A         	goto	l3395
  1154  000758                     l3079:
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;doprnt.c: 683: flag |= 0x200;
  1158  000758  0100               	movlb	0	; () banked
  1159  00075A  8369               	bsf	(sprintf@flag+1)& (0+255),1,b
  1160                           
  1161                           ;doprnt.c: 684: break;
  1162  00075C  D017               	goto	l3085
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;doprnt.c: 813: continue;
  1166                           
  1167                           ;doprnt.c: 802: default:
  1168  00075E  EFE8  F00A         	goto	l3393
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;doprnt.c: 822: }
  1172  000762  D014               	goto	l3085
  1173  000764                     l3083:
  1174  000764  C04C  FFF6         	movff	sprintf@f,tblptrl
  1175  000768  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  1176  00076C  4A4C               	infsnz	sprintf@f,f,c
  1177  00076E  2A4D               	incf	sprintf@f+1,f,c
  1178  000770                     	if	0	;tblptru may be non-zero
  1179  000770                     	endif
  1180  000770                     	if	0	;tblptru may be non-zero
  1181  000770                     	endif
  1182  000770  0008               	tblrd		*
  1183  000772  CFF5 F079          	movff	tablat,sprintf@c
  1184  000776  0100               	movlb	0	; () banked
  1185  000778  5179               	movf	sprintf@c& (0+255),w,b
  1186                           
  1187                           ; Switch size 1, requested type "space"
  1188                           ; Number of cases is 2, Range of values is 0 to 103
  1189                           ; switch strategies available:
  1190                           ; Name         Instructions Cycles
  1191                           ; simple_byte            7     4 (average)
  1192                           ;	Chosen strategy is simple_byte
  1193  00077A  0A00               	xorlw	0	; case 0
  1194  00077C  B4D8               	btfsc	status,2,c
  1195  00077E  EFF8  F00A         	goto	l3395
  1196  000782  0A67               	xorlw	103	; case 103
  1197  000784  B4D8               	btfsc	status,2,c
  1198  000786  D7E8               	goto	l3079
  1199  000788  EFE8  F00A         	goto	l3393
  1200  00078C                     l3085:
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;doprnt.c: 825: if(flag & (0x700)) {
  1204  00078C  0E07               	movlw	7
  1205  00078E  0100               	movlb	0	; () banked
  1206  000790  1569               	andwf	(sprintf@flag+1)& (0+255),w,b
  1207  000792  B4D8               	btfsc	status,2,c
  1208  000794  EF97  F00A         	goto	l3373
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;doprnt.c: 827: if(flag & 0x1000)
  1212  000798  0100               	movlb	0	; () banked
  1213  00079A  A969               	btfss	(sprintf@flag+1)& (0+255),4,b
  1214  00079C  D006               	goto	l3091
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;doprnt.c: 829: prec = 6;
  1218  00079E  0E00               	movlw	0
  1219  0007A0  0100               	movlb	0	; () banked
  1220  0007A2  6F75               	movwf	(sprintf@prec+1)& (0+255),b
  1221  0007A4  0E06               	movlw	6
  1222  0007A6  6F74               	movwf	sprintf@prec& (0+255),b
  1223  0007A8  D000               	goto	l3091
  1224  0007AA                     l3091:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1228  0007AA  C063  FFD9         	movff	sprintf@ap,fsr2l
  1229  0007AE  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1230  0007B2  CFDE F076          	movff	postinc2,sprintf@fval
  1231  0007B6  CFDE F077          	movff	postinc2,sprintf@fval+1
  1232  0007BA  CFDD F078          	movff	postdec2,sprintf@fval+2
  1233                           
  1234                           ; BSR set to: 0
  1235  0007BE  0E03               	movlw	3
  1236  0007C0  0100               	movlb	0	; () banked
  1237  0007C2  2763               	addwf	sprintf@ap& (0+255),f,b
  1238  0007C4  0E00               	movlw	0
  1239  0007C6  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;doprnt.c: 831: if(fval < 0.0) {
  1243  0007C8  0100               	movlb	0	; () banked
  1244  0007CA  AF78               	btfss	(sprintf@fval+2)& (0+255),7,b
  1245  0007CC  D012               	goto	l3101
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;doprnt.c: 832: fval = -fval;
  1249  0007CE  C076  F019         	movff	sprintf@fval,___ftneg@f1
  1250  0007D2  C077  F01A         	movff	sprintf@fval+1,___ftneg@f1+1
  1251  0007D6  C078  F01B         	movff	sprintf@fval+2,___ftneg@f1+2
  1252  0007DA  EC6D  F015         	call	___ftneg	;wreg free
  1253  0007DE  C019  F076         	movff	?___ftneg,sprintf@fval
  1254  0007E2  C01A  F077         	movff	?___ftneg+1,sprintf@fval+1
  1255  0007E6  C01B  F078         	movff	?___ftneg+2,sprintf@fval+2
  1256                           
  1257                           ;doprnt.c: 833: flag |= 0x03;
  1258  0007EA  0E03               	movlw	3
  1259  0007EC  0100               	movlb	0	; () banked
  1260  0007EE  1368               	iorwf	sprintf@flag& (0+255),f,b
  1261  0007F0  D000               	goto	l3101
  1262  0007F2                     l3101:
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;doprnt.c: 834: }
  1266                           ;doprnt.c: 835: exp = 0;
  1267  0007F2  0E00               	movlw	0
  1268  0007F4  0100               	movlb	0	; () banked
  1269  0007F6  6F73               	movwf	(sprintf@exp+1)& (0+255),b
  1270  0007F8  0E00               	movlw	0
  1271  0007FA  6F72               	movwf	sprintf@exp& (0+255),b
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;doprnt.c: 836: if( fval!=0) {
  1275  0007FC  0100               	movlb	0	; () banked
  1276  0007FE  5176               	movf	sprintf@fval& (0+255),w,b
  1277  000800  0100               	movlb	0	; () banked
  1278  000802  1177               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1279  000804  0100               	movlb	0	; () banked
  1280  000806  1178               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1281  000808  B4D8               	btfsc	status,2,c
  1282  00080A  D08D               	goto	l3129
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1286  00080C  0E82               	movlw	130
  1287  00080E  6E51               	movwf	??_sprintf& (0+255),c
  1288  000810  0EFF               	movlw	255
  1289  000812  6E52               	movwf	(??_sprintf+1)& (0+255),c
  1290  000814  C076  F053         	movff	sprintf@fval,??_sprintf+2
  1291  000818  C077  F054         	movff	sprintf@fval+1,??_sprintf+3
  1292  00081C  C078  F055         	movff	sprintf@fval+2,??_sprintf+4
  1293  000820  C079  F056         	movff	sprintf@fval+3,??_sprintf+5
  1294  000824  0E10               	movlw	16
  1295  000826  D005               	goto	u2940
  1296  000828                     u2945:
  1297  000828  90D8               	bcf	status,0,c
  1298  00082A  3256               	rrcf	??_sprintf+5,f,c
  1299  00082C  3255               	rrcf	??_sprintf+4,f,c
  1300  00082E  3254               	rrcf	??_sprintf+3,f,c
  1301  000830  3253               	rrcf	??_sprintf+2,f,c
  1302  000832                     u2940:
  1303  000832  2EE8               	decfsz	wreg,f,c
  1304  000834  D7F9               	goto	u2945
  1305  000836  5053               	movf	??_sprintf+2,w,c
  1306  000838  2451               	addwf	??_sprintf,w,c
  1307  00083A  0100               	movlb	0	; () banked
  1308  00083C  6F72               	movwf	sprintf@exp& (0+255),b
  1309  00083E  0E00               	movlw	0
  1310  000840  2052               	addwfc	??_sprintf+1,w,c
  1311  000842  0100               	movlb	0	; () banked
  1312  000844  6F73               	movwf	(sprintf@exp+1)& (0+255),b
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;doprnt.c: 838: exp--;
  1316  000846  0100               	movlb	0	; () banked
  1317  000848  0772               	decf	sprintf@exp& (0+255),f,b
  1318  00084A  A0D8               	btfss	status,0,c
  1319  00084C  0773               	decf	(sprintf@exp+1)& (0+255),f,b
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;doprnt.c: 839: exp *= 3;
  1323  00084E  C072  F00F         	movff	sprintf@exp,___wmul@multiplier
  1324  000852  C073  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1325  000856  0E00               	movlw	0
  1326  000858  6E12               	movwf	___wmul@multiplicand+1,c
  1327  00085A  0E03               	movlw	3
  1328  00085C  6E11               	movwf	___wmul@multiplicand,c
  1329  00085E  EC46  F015         	call	___wmul	;wreg free
  1330  000862  C00F  F072         	movff	?___wmul,sprintf@exp
  1331  000866  C010  F073         	movff	?___wmul+1,sprintf@exp+1
  1332                           
  1333                           ;doprnt.c: 840: exp /= 10;
  1334  00086A  C072  F007         	movff	sprintf@exp,___awdiv@dividend
  1335  00086E  C073  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1336  000872  0E00               	movlw	0
  1337  000874  6E0A               	movwf	___awdiv@divisor+1,c
  1338  000876  0E0A               	movlw	10
  1339  000878  6E09               	movwf	___awdiv@divisor,c
  1340  00087A  ECB3  F012         	call	___awdiv	;wreg free
  1341  00087E  C007  F072         	movff	?___awdiv,sprintf@exp
  1342  000882  C008  F073         	movff	?___awdiv+1,sprintf@exp+1
  1343                           
  1344                           ;doprnt.c: 841: if(exp < 0)
  1345  000886  0100               	movlb	0	; () banked
  1346  000888  AF73               	btfss	(sprintf@exp+1)& (0+255),7,b
  1347  00088A  D005               	goto	l3117
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;doprnt.c: 842: exp--;
  1351  00088C  0100               	movlb	0	; () banked
  1352  00088E  0772               	decf	sprintf@exp& (0+255),f,b
  1353  000890  A0D8               	btfss	status,0,c
  1354  000892  0773               	decf	(sprintf@exp+1)& (0+255),f,b
  1355  000894  D000               	goto	l3117
  1356  000896                     l3117:
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1360  000896  0100               	movlb	0	; () banked
  1361  000898  5172               	movf	sprintf@exp& (0+255),w,b
  1362  00089A  0800               	sublw	0
  1363  00089C  EC00  F00B         	call	_scale
  1364  0008A0  C02B  F06A         	movff	?_scale,sprintf@tmpval
  1365  0008A4  C02C  F06B         	movff	?_scale+1,sprintf@tmpval+1
  1366  0008A8  C02D  F06C         	movff	?_scale+2,sprintf@tmpval+2
  1367                           
  1368                           ;doprnt.c: 847: tmpval.integ *= fval;
  1369  0008AC  C06A  F01C         	movff	sprintf@tmpval,___ftmul@f1
  1370  0008B0  C06B  F01D         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1371  0008B4  C06C  F01E         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1372  0008B8  C076  F01F         	movff	sprintf@fval,___ftmul@f2
  1373  0008BC  C077  F020         	movff	sprintf@fval+1,___ftmul@f2+1
  1374  0008C0  C078  F021         	movff	sprintf@fval+2,___ftmul@f2+2
  1375  0008C4  EC95  F010         	call	___ftmul	;wreg free
  1376  0008C8  C01C  F06A         	movff	?___ftmul,sprintf@tmpval
  1377  0008CC  C01D  F06B         	movff	?___ftmul+1,sprintf@tmpval+1
  1378  0008D0  C01E  F06C         	movff	?___ftmul+2,sprintf@tmpval+2
  1379                           
  1380                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1381  0008D4  C06A  F041         	movff	sprintf@tmpval,___ftge@ff1
  1382  0008D8  C06B  F042         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1383  0008DC  C06C  F043         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1384  0008E0  0E00               	movlw	0
  1385  0008E2  6E44               	movwf	___ftge@ff2,c
  1386  0008E4  0E80               	movlw	128
  1387  0008E6  6E45               	movwf	___ftge@ff2+1,c
  1388  0008E8  0E3F               	movlw	63
  1389  0008EA  6E46               	movwf	___ftge@ff2+2,c
  1390  0008EC  ECFE  F012         	call	___ftge	;wreg free
  1391  0008F0  B0D8               	btfsc	status,0,c
  1392  0008F2  D005               	goto	l3125
  1393                           
  1394                           ;doprnt.c: 849: exp--;
  1395  0008F4  0100               	movlb	0	; () banked
  1396  0008F6  0772               	decf	sprintf@exp& (0+255),f,b
  1397  0008F8  A0D8               	btfss	status,0,c
  1398  0008FA  0773               	decf	(sprintf@exp+1)& (0+255),f,b
  1399  0008FC  D014               	goto	l3129
  1400  0008FE                     l3125:
  1401                           
  1402                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1403  0008FE  C06A  F041         	movff	sprintf@tmpval,___ftge@ff1
  1404  000902  C06B  F042         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1405  000906  C06C  F043         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1406  00090A  0E00               	movlw	0
  1407  00090C  6E44               	movwf	___ftge@ff2,c
  1408  00090E  0E20               	movlw	32
  1409  000910  6E45               	movwf	___ftge@ff2+1,c
  1410  000912  0E41               	movlw	65
  1411  000914  6E46               	movwf	___ftge@ff2+2,c
  1412  000916  ECFE  F012         	call	___ftge	;wreg free
  1413  00091A  A0D8               	btfss	status,0,c
  1414  00091C  D004               	goto	l3129
  1415                           
  1416                           ;doprnt.c: 851: exp++;
  1417  00091E  0100               	movlb	0	; () banked
  1418  000920  4B72               	infsnz	sprintf@exp& (0+255),f,b
  1419  000922  2B73               	incf	(sprintf@exp+1)& (0+255),f,b
  1420                           
  1421                           ; BSR set to: 0
  1422                           
  1423                           ; BSR set to: 0
  1424  000924  D000               	goto	l3129
  1425  000926                     l3129:
  1426                           
  1427                           ;doprnt.c: 852: }
  1428                           ;doprnt.c: 854: if(exp <= 0)
  1429  000926  0100               	movlb	0	; () banked
  1430  000928  BF73               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1431  00092A  D007               	goto	l3131
  1432  00092C  0100               	movlb	0	; () banked
  1433  00092E  5173               	movf	(sprintf@exp+1)& (0+255),w,b
  1434  000930  E108               	bnz	l126
  1435  000932  0100               	movlb	0	; () banked
  1436  000934  0572               	decf	sprintf@exp& (0+255),w,b
  1437  000936  B0D8               	btfsc	status,0,c
  1438  000938  D004               	goto	l126
  1439  00093A                     l3131:
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;doprnt.c: 855: c = 1;
  1443  00093A  0E01               	movlw	1
  1444  00093C  0100               	movlb	0	; () banked
  1445  00093E  6F79               	movwf	sprintf@c& (0+255),b
  1446  000940  D002               	goto	l127
  1447  000942                     l126:
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;doprnt.c: 856: else
  1451                           ;doprnt.c: 857: c = exp;
  1452  000942  C072  F079         	movff	sprintf@exp,sprintf@c
  1453  000946                     l127:
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;doprnt.c: 858: if(
  1457                           ;doprnt.c: 866: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  1458                           ;doprnt.c: 868: ) {
  1459  000946  0100               	movlb	0	; () banked
  1460  000948  A369               	btfss	(sprintf@flag+1)& (0+255),1,b
  1461  00094A  D27A               	goto	l128
  1462                           
  1463                           ; BSR set to: 0
  1464  00094C  0100               	movlb	0	; () banked
  1465  00094E  AF73               	btfss	(sprintf@exp+1)& (0+255),7,b
  1466  000950  D008               	goto	l3135
  1467  000952  0EFC               	movlw	252
  1468  000954  0100               	movlb	0	; () banked
  1469  000956  5D72               	subwf	sprintf@exp& (0+255),w,b
  1470  000958  0EFF               	movlw	255
  1471  00095A  0100               	movlb	0	; () banked
  1472  00095C  5973               	subwfb	(sprintf@exp+1)& (0+255),w,b
  1473  00095E  A0D8               	btfss	status,0,c
  1474  000960  D00E               	goto	l3137
  1475  000962                     l3135:
  1476                           
  1477                           ; BSR set to: 0
  1478  000962  0100               	movlb	0	; () banked
  1479  000964  5174               	movf	sprintf@prec& (0+255),w,b
  1480  000966  0100               	movlb	0	; () banked
  1481  000968  5D72               	subwf	sprintf@exp& (0+255),w,b
  1482  00096A  0100               	movlb	0	; () banked
  1483  00096C  5173               	movf	(sprintf@exp+1)& (0+255),w,b
  1484  00096E  0A80               	xorlw	128
  1485  000970  6E51               	movwf	??_sprintf& (0+255),c
  1486  000972  0100               	movlb	0	; () banked
  1487  000974  5175               	movf	(sprintf@prec+1)& (0+255),w,b
  1488  000976  0A80               	xorlw	128
  1489  000978  5851               	subwfb	??_sprintf& (0+255),w,c
  1490  00097A  A0D8               	btfss	status,0,c
  1491  00097C  D261               	goto	l128
  1492  00097E                     l3137:
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;doprnt.c: 870: if(prec && flag & 0x200)
  1496  00097E  0100               	movlb	0	; () banked
  1497  000980  5174               	movf	sprintf@prec& (0+255),w,b
  1498  000982  0100               	movlb	0	; () banked
  1499  000984  1175               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1500  000986  B4D8               	btfsc	status,2,c
  1501  000988  D008               	goto	l3143
  1502                           
  1503                           ; BSR set to: 0
  1504  00098A  0100               	movlb	0	; () banked
  1505  00098C  A369               	btfss	(sprintf@flag+1)& (0+255),1,b
  1506  00098E  D005               	goto	l3143
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;doprnt.c: 871: prec--;
  1510  000990  0100               	movlb	0	; () banked
  1511  000992  0774               	decf	sprintf@prec& (0+255),f,b
  1512  000994  A0D8               	btfss	status,0,c
  1513  000996  0775               	decf	(sprintf@prec+1)& (0+255),f,b
  1514  000998  D000               	goto	l3143
  1515  00099A                     l3143:
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;doprnt.c: 873: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  1519  00099A  0100               	movlb	0	; () banked
  1520  00099C  5175               	movf	(sprintf@prec+1)& (0+255),w,b
  1521  00099E  E105               	bnz	u3040
  1522  0009A0  0E09               	movlw	9
  1523  0009A2  0100               	movlb	0	; () banked
  1524  0009A4  5D74               	subwf	sprintf@prec& (0+255),w,b
  1525  0009A6  A0D8               	btfss	status,0,c
  1526  0009A8  D004               	goto	l132
  1527  0009AA                     u3040:
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;doprnt.c: 874: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  1531  0009AA  0E08               	movlw	8
  1532  0009AC  0100               	movlb	0	; () banked
  1533  0009AE  6F79               	movwf	sprintf@c& (0+255),b
  1534  0009B0  D003               	goto	l3147
  1535  0009B2                     l132:
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;doprnt.c: 875: else
  1539                           ;doprnt.c: 876: c = prec;
  1540  0009B2  C074  F079         	movff	sprintf@prec,sprintf@c
  1541  0009B6  D000               	goto	l3147
  1542  0009B8                     l3147:
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;doprnt.c: 877: if( fval!=0) {
  1546  0009B8  0100               	movlb	0	; () banked
  1547  0009BA  5176               	movf	sprintf@fval& (0+255),w,b
  1548  0009BC  0100               	movlb	0	; () banked
  1549  0009BE  1177               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1550  0009C0  0100               	movlb	0	; () banked
  1551  0009C2  1178               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1552  0009C4  B4D8               	btfsc	status,2,c
  1553  0009C6  D0E3               	goto	l3167
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;doprnt.c: 878: fval /= scale(exp-c);
  1557  0009C8  C076  F032         	movff	sprintf@fval,___ftdiv@f1
  1558  0009CC  C077  F033         	movff	sprintf@fval+1,___ftdiv@f1+1
  1559  0009D0  C078  F034         	movff	sprintf@fval+2,___ftdiv@f1+2
  1560  0009D4  0100               	movlb	0	; () banked
  1561  0009D6  5179               	movf	sprintf@c& (0+255),w,b
  1562  0009D8  0800               	sublw	0
  1563  0009DA  0100               	movlb	0	; () banked
  1564  0009DC  2572               	addwf	sprintf@exp& (0+255),w,b
  1565  0009DE  EC00  F00B         	call	_scale
  1566  0009E2  C02B  F035         	movff	?_scale,___ftdiv@f2
  1567  0009E6  C02C  F036         	movff	?_scale+1,___ftdiv@f2+1
  1568  0009EA  C02D  F037         	movff	?_scale+2,___ftdiv@f2+2
  1569  0009EE  EC84  F011         	call	___ftdiv	;wreg free
  1570  0009F2  C032  F076         	movff	?___ftdiv,sprintf@fval
  1571  0009F6  C033  F077         	movff	?___ftdiv+1,sprintf@fval+1
  1572  0009FA  C034  F078         	movff	?___ftdiv+2,sprintf@fval+2
  1573                           
  1574                           ;doprnt.c: 893: if(fval - (double)(unsigned long)fval >= 0.5)
  1575  0009FE  C076  F038         	movff	sprintf@fval,___ftadd@f2
  1576  000A02  C077  F039         	movff	sprintf@fval+1,___ftadd@f2+1
  1577  000A06  C078  F03A         	movff	sprintf@fval+2,___ftadd@f2+2
  1578  000A0A  C076  F001         	movff	sprintf@fval,___fttol@f1
  1579  000A0E  C077  F002         	movff	sprintf@fval+1,___fttol@f1+1
  1580  000A12  C078  F003         	movff	sprintf@fval+2,___fttol@f1+2
  1581  000A16  EC11  F011         	call	___fttol	;wreg free
  1582  000A1A  C001  F010         	movff	?___fttol,___lltoft@c
  1583  000A1E  C002  F011         	movff	?___fttol+1,___lltoft@c+1
  1584  000A22  C003  F012         	movff	?___fttol+2,___lltoft@c+2
  1585  000A26  C004  F013         	movff	?___fttol+3,___lltoft@c+3
  1586  000A2A  EC08  F014         	call	___lltoft	;wreg free
  1587  000A2E  C010  F019         	movff	?___lltoft,___ftneg@f1
  1588  000A32  C011  F01A         	movff	?___lltoft+1,___ftneg@f1+1
  1589  000A36  C012  F01B         	movff	?___lltoft+2,___ftneg@f1+2
  1590  000A3A  EC6D  F015         	call	___ftneg	;wreg free
  1591  000A3E  C019  F035         	movff	?___ftneg,___ftadd@f1
  1592  000A42  C01A  F036         	movff	?___ftneg+1,___ftadd@f1+1
  1593  000A46  C01B  F037         	movff	?___ftneg+2,___ftadd@f1+2
  1594  000A4A  EC12  F00E         	call	___ftadd	;wreg free
  1595  000A4E  C035  F041         	movff	?___ftadd,___ftge@ff1
  1596  000A52  C036  F042         	movff	?___ftadd+1,___ftge@ff1+1
  1597  000A56  C037  F043         	movff	?___ftadd+2,___ftge@ff1+2
  1598  000A5A  0E00               	movlw	0
  1599  000A5C  6E44               	movwf	___ftge@ff2,c
  1600  000A5E  0E00               	movlw	0
  1601  000A60  6E45               	movwf	___ftge@ff2+1,c
  1602  000A62  0E3F               	movlw	63
  1603  000A64  6E46               	movwf	___ftge@ff2+2,c
  1604  000A66  ECFE  F012         	call	___ftge	;wreg free
  1605  000A6A  A0D8               	btfss	status,0,c
  1606  000A6C  D015               	goto	l3155
  1607                           
  1608                           ;doprnt.c: 894: fval += 0.5;
  1609  000A6E  C076  F035         	movff	sprintf@fval,___ftadd@f1
  1610  000A72  C077  F036         	movff	sprintf@fval+1,___ftadd@f1+1
  1611  000A76  C078  F037         	movff	sprintf@fval+2,___ftadd@f1+2
  1612  000A7A  0E00               	movlw	0
  1613  000A7C  6E38               	movwf	___ftadd@f2,c
  1614  000A7E  0E00               	movlw	0
  1615  000A80  6E39               	movwf	___ftadd@f2+1,c
  1616  000A82  0E3F               	movlw	63
  1617  000A84  6E3A               	movwf	___ftadd@f2+2,c
  1618  000A86  EC12  F00E         	call	___ftadd	;wreg free
  1619  000A8A  C035  F076         	movff	?___ftadd,sprintf@fval
  1620  000A8E  C036  F077         	movff	?___ftadd+1,sprintf@fval+1
  1621  000A92  C037  F078         	movff	?___ftadd+2,sprintf@fval+2
  1622  000A96  D000               	goto	l3155
  1623  000A98                     l3155:
  1624                           
  1625                           ;doprnt.c: 895: if((unsigned long)fval >= dpowers[c+1]) {
  1626  000A98  C079  F051         	movff	sprintf@c,??_sprintf
  1627  000A9C  6A52               	clrf	(??_sprintf+1)& (0+255),c
  1628  000A9E  BE51               	btfsc	??_sprintf& (0+255),7,c
  1629  000AA0  0652               	decf	(??_sprintf+1)& (0+255),f,c
  1630  000AA2  90D8               	bcf	status,0,c
  1631  000AA4  3651               	rlcf	??_sprintf,f,c
  1632  000AA6  3652               	rlcf	??_sprintf+1,f,c
  1633  000AA8  90D8               	bcf	status,0,c
  1634  000AAA  3651               	rlcf	??_sprintf,f,c
  1635  000AAC  3652               	rlcf	??_sprintf+1,f,c
  1636  000AAE  0E04               	movlw	4
  1637  000AB0  2651               	addwf	??_sprintf,f,c
  1638  000AB2  0E00               	movlw	0
  1639  000AB4  2252               	addwfc	??_sprintf+1,f,c
  1640  000AB6  0E01               	movlw	low _dpowers
  1641  000AB8  2451               	addwf	??_sprintf,w,c
  1642  000ABA  6EF6               	movwf	tblptrl,c
  1643  000ABC  0E06               	movlw	high _dpowers
  1644  000ABE  2052               	addwfc	??_sprintf+1,w,c
  1645  000AC0  6EF7               	movwf	tblptrh,c
  1646  000AC2                     	if	0	;There are less than 3 active tblptr bytes
  1647  000AC2                     	endif
  1648  000AC2  C076  F001         	movff	sprintf@fval,___fttol@f1
  1649  000AC6  C077  F002         	movff	sprintf@fval+1,___fttol@f1+1
  1650  000ACA  C078  F003         	movff	sprintf@fval+2,___fttol@f1+2
  1651  000ACE  EC11  F011         	call	___fttol	;wreg free
  1652  000AD2  0009               	tblrd		*+
  1653  000AD4  50F5               	movf	tablat,w,c
  1654  000AD6  5C01               	subwf	?___fttol,w,c
  1655  000AD8  0009               	tblrd		*+
  1656  000ADA  50F5               	movf	tablat,w,c
  1657  000ADC  5802               	subwfb	?___fttol+1,w,c
  1658  000ADE  0009               	tblrd		*+
  1659  000AE0  50F5               	movf	tablat,w,c
  1660  000AE2  5803               	subwfb	?___fttol+2,w,c
  1661  000AE4  0009               	tblrd		*+
  1662  000AE6  50F5               	movf	tablat,w,c
  1663  000AE8  5804               	subwfb	?___fttol+3,w,c
  1664  000AEA  A0D8               	btfss	status,0,c
  1665  000AEC  D018               	goto	l3161
  1666                           
  1667                           ;doprnt.c: 896: fval *= 1e-1;
  1668  000AEE  C076  F01C         	movff	sprintf@fval,___ftmul@f1
  1669  000AF2  C077  F01D         	movff	sprintf@fval+1,___ftmul@f1+1
  1670  000AF6  C078  F01E         	movff	sprintf@fval+2,___ftmul@f1+2
  1671  000AFA  0ECD               	movlw	205
  1672  000AFC  6E1F               	movwf	___ftmul@f2,c
  1673  000AFE  0ECC               	movlw	204
  1674  000B00  6E20               	movwf	___ftmul@f2+1,c
  1675  000B02  0E3D               	movlw	61
  1676  000B04  6E21               	movwf	___ftmul@f2+2,c
  1677  000B06  EC95  F010         	call	___ftmul	;wreg free
  1678  000B0A  C01C  F076         	movff	?___ftmul,sprintf@fval
  1679  000B0E  C01D  F077         	movff	?___ftmul+1,sprintf@fval+1
  1680  000B12  C01E  F078         	movff	?___ftmul+2,sprintf@fval+2
  1681                           
  1682                           ;doprnt.c: 897: exp++;
  1683  000B16  0100               	movlb	0	; () banked
  1684  000B18  4B72               	infsnz	sprintf@exp& (0+255),f,b
  1685  000B1A  2B73               	incf	(sprintf@exp+1)& (0+255),f,b
  1686                           
  1687                           ;doprnt.c: 898: } else if((unsigned long)fval < dpowers[c]) {
  1688  000B1C  D038               	goto	l3167
  1689  000B1E                     l3161:
  1690  000B1E  0100               	movlb	0	; () banked
  1691  000B20  5179               	movf	sprintf@c& (0+255),w,b
  1692  000B22  0D04               	mullw	4
  1693  000B24  0E01               	movlw	low _dpowers
  1694  000B26  24F3               	addwf	prodl,w,c
  1695  000B28  6EF6               	movwf	tblptrl,c
  1696  000B2A  0E06               	movlw	high _dpowers
  1697  000B2C  20F4               	addwfc	prodh,w,c
  1698  000B2E  6EF7               	movwf	tblptrh,c
  1699  000B30                     	if	0	;There are less than 3 active tblptr bytes
  1700  000B30                     	endif
  1701  000B30  C076  F001         	movff	sprintf@fval,___fttol@f1
  1702  000B34  C077  F002         	movff	sprintf@fval+1,___fttol@f1+1
  1703  000B38  C078  F003         	movff	sprintf@fval+2,___fttol@f1+2
  1704  000B3C  EC11  F011         	call	___fttol	;wreg free
  1705  000B40  0009               	tblrd		*+
  1706  000B42  50F5               	movf	tablat,w,c
  1707  000B44  5C01               	subwf	?___fttol,w,c
  1708  000B46  0009               	tblrd		*+
  1709  000B48  50F5               	movf	tablat,w,c
  1710  000B4A  5802               	subwfb	?___fttol+1,w,c
  1711  000B4C  0009               	tblrd		*+
  1712  000B4E  50F5               	movf	tablat,w,c
  1713  000B50  5803               	subwfb	?___fttol+2,w,c
  1714  000B52  0009               	tblrd		*+
  1715  000B54  50F5               	movf	tablat,w,c
  1716  000B56  5804               	subwfb	?___fttol+3,w,c
  1717  000B58  B0D8               	btfsc	status,0,c
  1718  000B5A  D019               	goto	l3167
  1719                           
  1720                           ;doprnt.c: 899: fval *= 10.0;
  1721  000B5C  C076  F01C         	movff	sprintf@fval,___ftmul@f1
  1722  000B60  C077  F01D         	movff	sprintf@fval+1,___ftmul@f1+1
  1723  000B64  C078  F01E         	movff	sprintf@fval+2,___ftmul@f1+2
  1724  000B68  0E00               	movlw	0
  1725  000B6A  6E1F               	movwf	___ftmul@f2,c
  1726  000B6C  0E20               	movlw	32
  1727  000B6E  6E20               	movwf	___ftmul@f2+1,c
  1728  000B70  0E41               	movlw	65
  1729  000B72  6E21               	movwf	___ftmul@f2+2,c
  1730  000B74  EC95  F010         	call	___ftmul	;wreg free
  1731  000B78  C01C  F076         	movff	?___ftmul,sprintf@fval
  1732  000B7C  C01D  F077         	movff	?___ftmul+1,sprintf@fval+1
  1733  000B80  C01E  F078         	movff	?___ftmul+2,sprintf@fval+2
  1734                           
  1735                           ;doprnt.c: 900: exp--;
  1736  000B84  0100               	movlb	0	; () banked
  1737  000B86  0772               	decf	sprintf@exp& (0+255),f,b
  1738  000B88  A0D8               	btfss	status,0,c
  1739  000B8A  0773               	decf	(sprintf@exp+1)& (0+255),f,b
  1740                           
  1741                           ; BSR set to: 0
  1742                           
  1743                           ; BSR set to: 0
  1744  000B8C  D000               	goto	l3167
  1745  000B8E                     l3167:
  1746                           
  1747                           ;doprnt.c: 901: }
  1748                           ;doprnt.c: 903: }
  1749                           ;doprnt.c: 959: {
  1750                           ;doprnt.c: 973: if(flag & 0x03)
  1751  000B8E  0E03               	movlw	3
  1752  000B90  0100               	movlb	0	; () banked
  1753  000B92  1568               	andwf	sprintf@flag& (0+255),w,b
  1754  000B94  6E51               	movwf	??_sprintf& (0+255),c
  1755  000B96  0E00               	movlw	0
  1756  000B98  0100               	movlb	0	; () banked
  1757  000B9A  1569               	andwf	(sprintf@flag+1)& (0+255),w,b
  1758  000B9C  6E52               	movwf	(??_sprintf+1)& (0+255),c
  1759  000B9E  5051               	movf	??_sprintf,w,c
  1760  000BA0  1052               	iorwf	??_sprintf+1,w,c
  1761  000BA2  B4D8               	btfsc	status,2,c
  1762  000BA4  D009               	goto	l3173
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;doprnt.c: 974: ((*sp++ = ('-')));
  1766  000BA6  C04A  FFD9         	movff	sprintf@sp,fsr2l
  1767  000BAA  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  1768  000BAE  0E2D               	movlw	45
  1769  000BB0  6EDF               	movwf	indf2,c
  1770                           
  1771                           ; BSR set to: 0
  1772  000BB2  4A4A               	infsnz	sprintf@sp,f,c
  1773  000BB4  2A4B               	incf	sprintf@sp+1,f,c
  1774  000BB6  D000               	goto	l3173
  1775  000BB8                     l3173:
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;doprnt.c: 980: }
  1779                           ;doprnt.c: 985: val = (unsigned long)fval;
  1780  000BB8  C076  F001         	movff	sprintf@fval,___fttol@f1
  1781  000BBC  C077  F002         	movff	sprintf@fval+1,___fttol@f1+1
  1782  000BC0  C078  F003         	movff	sprintf@fval+2,___fttol@f1+2
  1783  000BC4  EC11  F011         	call	___fttol	;wreg free
  1784  000BC8  C001  F06E         	movff	?___fttol,sprintf@val
  1785  000BCC  C002  F06F         	movff	?___fttol+1,sprintf@val+1
  1786  000BD0  C003  F070         	movff	?___fttol+2,sprintf@val+2
  1787  000BD4  C004  F071         	movff	?___fttol+3,sprintf@val+3
  1788                           
  1789                           ;doprnt.c: 986: ((*sp++ = (val/dpowers[c] + '0')));
  1790  000BD8  C06E  F001         	movff	sprintf@val,___lldiv@dividend
  1791  000BDC  C06F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1792  000BE0  C070  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1793  000BE4  C071  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1794  000BE8  0100               	movlb	0	; () banked
  1795  000BEA  5179               	movf	sprintf@c& (0+255),w,b
  1796  000BEC  0D04               	mullw	4
  1797  000BEE  0E01               	movlw	low _dpowers
  1798  000BF0  24F3               	addwf	prodl,w,c
  1799  000BF2  6EF6               	movwf	tblptrl,c
  1800  000BF4  0E06               	movlw	high _dpowers
  1801  000BF6  20F4               	addwfc	prodh,w,c
  1802  000BF8  6EF7               	movwf	tblptrh,c
  1803  000BFA                     	if	0	;There are less than 3 active tblptr bytes
  1804  000BFA                     	endif
  1805  000BFA  0009               	tblrd		*+
  1806  000BFC  CFF5 F005          	movff	tablat,___lldiv@divisor
  1807  000C00  0009               	tblrd		*+
  1808  000C02  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1809  000C06  0009               	tblrd		*+
  1810  000C08  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1811  000C0C  000A               	tblrd		*-
  1812  000C0E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1813  000C12  EC49  F013         	call	___lldiv	;wreg free
  1814  000C16  5001               	movf	?___lldiv,w,c
  1815  000C18  0F30               	addlw	48
  1816  000C1A  C04A  FFD9         	movff	sprintf@sp,fsr2l
  1817  000C1E  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  1818  000C22  6EDF               	movwf	indf2,c
  1819  000C24  4A4A               	infsnz	sprintf@sp,f,c
  1820  000C26  2A4B               	incf	sprintf@sp+1,f,c
  1821                           
  1822                           ;doprnt.c: 987: val %= dpowers[c];
  1823  000C28  C06E  F001         	movff	sprintf@val,___llmod@dividend
  1824  000C2C  C06F  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1825  000C30  C070  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1826  000C34  C071  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1827  000C38  0100               	movlb	0	; () banked
  1828  000C3A  5179               	movf	sprintf@c& (0+255),w,b
  1829  000C3C  0D04               	mullw	4
  1830  000C3E  0E01               	movlw	low _dpowers
  1831  000C40  24F3               	addwf	prodl,w,c
  1832  000C42  6EF6               	movwf	tblptrl,c
  1833  000C44  0E06               	movlw	high _dpowers
  1834  000C46  20F4               	addwfc	prodh,w,c
  1835  000C48  6EF7               	movwf	tblptrh,c
  1836  000C4A                     	if	0	;There are less than 3 active tblptr bytes
  1837  000C4A                     	endif
  1838  000C4A  0009               	tblrd		*+
  1839  000C4C  CFF5 F005          	movff	tablat,___llmod@divisor
  1840  000C50  0009               	tblrd		*+
  1841  000C52  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1842  000C56  0009               	tblrd		*+
  1843  000C58  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1844  000C5C  000A               	tblrd		*-
  1845  000C5E  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1846  000C62  ECD0  F013         	call	___llmod	;wreg free
  1847  000C66  C001  F06E         	movff	?___llmod,sprintf@val
  1848  000C6A  C002  F06F         	movff	?___llmod+1,sprintf@val+1
  1849  000C6E  C003  F070         	movff	?___llmod+2,sprintf@val+2
  1850  000C72  C004  F071         	movff	?___llmod+3,sprintf@val+3
  1851                           
  1852                           ;doprnt.c: 992: if(prec)
  1853  000C76  0100               	movlb	0	; () banked
  1854  000C78  5174               	movf	sprintf@prec& (0+255),w,b
  1855  000C7A  0100               	movlb	0	; () banked
  1856  000C7C  1175               	iorwf	(sprintf@prec+1)& (0+255),w,b
  1857  000C7E  B4D8               	btfsc	status,2,c
  1858  000C80  D098               	goto	l3209
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;doprnt.c: 994: {
  1862                           ;doprnt.c: 995: ((*sp++ = ('.')));
  1863  000C82  C04A  FFD9         	movff	sprintf@sp,fsr2l
  1864  000C86  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  1865  000C8A  0E2E               	movlw	46
  1866  000C8C  6EDF               	movwf	indf2,c
  1867                           
  1868                           ; BSR set to: 0
  1869  000C8E  4A4A               	infsnz	sprintf@sp,f,c
  1870  000C90  2A4B               	incf	sprintf@sp+1,f,c
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;doprnt.c: 996: prec -= c;
  1874  000C92  0100               	movlb	0	; () banked
  1875  000C94  5179               	movf	sprintf@c& (0+255),w,b
  1876  000C96  0100               	movlb	0	; () banked
  1877  000C98  5F74               	subwf	sprintf@prec& (0+255),f,b
  1878  000C9A  0E00               	movlw	0
  1879  000C9C  0100               	movlb	0	; () banked
  1880  000C9E  BF79               	btfsc	sprintf@c& (0+255),7,b
  1881  000CA0  0EFF               	movlw	255
  1882  000CA2  0100               	movlb	0	; () banked
  1883  000CA4  5B75               	subwfb	(sprintf@prec+1)& (0+255),f,b
  1884                           
  1885                           ;doprnt.c: 997: while(c--) {
  1886  000CA6  D068               	goto	l3199
  1887  000CA8                     l142:
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;doprnt.c: 1002: if(flag & 0x200 && val == 0) {
  1891  000CA8  0100               	movlb	0	; () banked
  1892  000CAA  A369               	btfss	(sprintf@flag+1)& (0+255),1,b
  1893  000CAC  D015               	goto	l3193
  1894                           
  1895                           ; BSR set to: 0
  1896  000CAE  0100               	movlb	0	; () banked
  1897  000CB0  516E               	movf	sprintf@val& (0+255),w,b
  1898  000CB2  0100               	movlb	0	; () banked
  1899  000CB4  116F               	iorwf	(sprintf@val+1)& (0+255),w,b
  1900  000CB6  0100               	movlb	0	; () banked
  1901  000CB8  1170               	iorwf	(sprintf@val+2)& (0+255),w,b
  1902  000CBA  0100               	movlb	0	; () banked
  1903  000CBC  1171               	iorwf	(sprintf@val+3)& (0+255),w,b
  1904  000CBE  A4D8               	btfss	status,2,c
  1905  000CC0  D00B               	goto	l3193
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;doprnt.c: 1003: prec = c = 0;
  1909  000CC2  0E00               	movlw	0
  1910  000CC4  0100               	movlb	0	; () banked
  1911  000CC6  6F79               	movwf	sprintf@c& (0+255),b
  1912  000CC8  0100               	movlb	0	; () banked
  1913  000CCA  5179               	movf	sprintf@c& (0+255),w,b
  1914  000CCC  0100               	movlb	0	; () banked
  1915  000CCE  6F74               	movwf	sprintf@prec& (0+255),b
  1916  000CD0  6B75               	clrf	(sprintf@prec+1)& (0+255),b
  1917  000CD2  BF74               	btfsc	sprintf@prec& (0+255),7,b
  1918  000CD4  0775               	decf	(sprintf@prec+1)& (0+255),f,b
  1919                           
  1920                           ;doprnt.c: 1004: break;
  1921  000CD6  D065               	goto	l3207
  1922  000CD8                     l3193:
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;doprnt.c: 1005: }
  1926                           ;doprnt.c: 1007: ((*sp++ = ('0' + (val/dpowers[c]))));
  1927  000CD8  C06E  F001         	movff	sprintf@val,___lldiv@dividend
  1928  000CDC  C06F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1929  000CE0  C070  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1930  000CE4  C071  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1931  000CE8  0100               	movlb	0	; () banked
  1932  000CEA  5179               	movf	sprintf@c& (0+255),w,b
  1933  000CEC  0D04               	mullw	4
  1934  000CEE  0E01               	movlw	low _dpowers
  1935  000CF0  24F3               	addwf	prodl,w,c
  1936  000CF2  6EF6               	movwf	tblptrl,c
  1937  000CF4  0E06               	movlw	high _dpowers
  1938  000CF6  20F4               	addwfc	prodh,w,c
  1939  000CF8  6EF7               	movwf	tblptrh,c
  1940  000CFA                     	if	0	;There are less than 3 active tblptr bytes
  1941  000CFA                     	endif
  1942  000CFA  0009               	tblrd		*+
  1943  000CFC  CFF5 F005          	movff	tablat,___lldiv@divisor
  1944  000D00  0009               	tblrd		*+
  1945  000D02  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1946  000D06  0009               	tblrd		*+
  1947  000D08  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1948  000D0C  000A               	tblrd		*-
  1949  000D0E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1950  000D12  EC49  F013         	call	___lldiv	;wreg free
  1951  000D16  5001               	movf	?___lldiv,w,c
  1952  000D18  0F30               	addlw	48
  1953  000D1A  C04A  FFD9         	movff	sprintf@sp,fsr2l
  1954  000D1E  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  1955  000D22  6EDF               	movwf	indf2,c
  1956  000D24  4A4A               	infsnz	sprintf@sp,f,c
  1957  000D26  2A4B               	incf	sprintf@sp+1,f,c
  1958                           
  1959                           ;doprnt.c: 1008: val %= dpowers[c];
  1960  000D28  C06E  F001         	movff	sprintf@val,___llmod@dividend
  1961  000D2C  C06F  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1962  000D30  C070  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1963  000D34  C071  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1964  000D38  0100               	movlb	0	; () banked
  1965  000D3A  5179               	movf	sprintf@c& (0+255),w,b
  1966  000D3C  0D04               	mullw	4
  1967  000D3E  0E01               	movlw	low _dpowers
  1968  000D40  24F3               	addwf	prodl,w,c
  1969  000D42  6EF6               	movwf	tblptrl,c
  1970  000D44  0E06               	movlw	high _dpowers
  1971  000D46  20F4               	addwfc	prodh,w,c
  1972  000D48  6EF7               	movwf	tblptrh,c
  1973  000D4A                     	if	0	;There are less than 3 active tblptr bytes
  1974  000D4A                     	endif
  1975  000D4A  0009               	tblrd		*+
  1976  000D4C  CFF5 F005          	movff	tablat,___llmod@divisor
  1977  000D50  0009               	tblrd		*+
  1978  000D52  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1979  000D56  0009               	tblrd		*+
  1980  000D58  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1981  000D5C  000A               	tblrd		*-
  1982  000D5E  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1983  000D62  ECD0  F013         	call	___llmod	;wreg free
  1984  000D66  C001  F06E         	movff	?___llmod,sprintf@val
  1985  000D6A  C002  F06F         	movff	?___llmod+1,sprintf@val+1
  1986  000D6E  C003  F070         	movff	?___llmod+2,sprintf@val+2
  1987  000D72  C004  F071         	movff	?___llmod+3,sprintf@val+3
  1988  000D76  D000               	goto	l3199
  1989  000D78                     l3199:
  1990  000D78  0100               	movlb	0	; () banked
  1991  000D7A  0779               	decf	sprintf@c& (0+255),f,b
  1992  000D7C  0100               	movlb	0	; () banked
  1993  000D7E  2979               	incf	sprintf@c& (0+255),w,b
  1994  000D80  B4D8               	btfsc	status,2,c
  1995  000D82  D00F               	goto	l3207
  1996  000D84  D791               	goto	l142
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;doprnt.c: 1010: }
  2000                           ;doprnt.c: 1011: while(prec) {
  2001  000D86  D00D               	goto	l3207
  2002  000D88                     l3201:
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;doprnt.c: 1012: ((*sp++ = ('0')));
  2006  000D88  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2007  000D8C  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2008  000D90  0E30               	movlw	48
  2009  000D92  6EDF               	movwf	indf2,c
  2010                           
  2011                           ; BSR set to: 0
  2012  000D94  4A4A               	infsnz	sprintf@sp,f,c
  2013  000D96  2A4B               	incf	sprintf@sp+1,f,c
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 1013: prec--;
  2017  000D98  0100               	movlb	0	; () banked
  2018  000D9A  0774               	decf	sprintf@prec& (0+255),f,b
  2019  000D9C  A0D8               	btfss	status,0,c
  2020  000D9E  0775               	decf	(sprintf@prec+1)& (0+255),f,b
  2021  000DA0  D000               	goto	l3207
  2022  000DA2                     l3207:
  2023                           
  2024                           ; BSR set to: 0
  2025  000DA2  0100               	movlb	0	; () banked
  2026  000DA4  5174               	movf	sprintf@prec& (0+255),w,b
  2027  000DA6  0100               	movlb	0	; () banked
  2028  000DA8  1175               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2029  000DAA  B4D8               	btfsc	status,2,c
  2030  000DAC  D002               	goto	l3209
  2031  000DAE  D7EC               	goto	l3201
  2032                           
  2033                           ; BSR set to: 0
  2034  000DB0  D000               	goto	l3209
  2035  000DB2                     l3209:
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 1014: }
  2039                           ;doprnt.c: 1015: }
  2040                           ;doprnt.c: 1021: ((*sp++ = ('e')));
  2041  000DB2  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2042  000DB6  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2043  000DBA  0E65               	movlw	101
  2044  000DBC  6EDF               	movwf	indf2,c
  2045                           
  2046                           ; BSR set to: 0
  2047  000DBE  4A4A               	infsnz	sprintf@sp,f,c
  2048  000DC0  2A4B               	incf	sprintf@sp+1,f,c
  2049                           
  2050                           ; BSR set to: 0
  2051                           ;doprnt.c: 1022: if(exp < 0) {
  2052  000DC2  0100               	movlb	0	; () banked
  2053  000DC4  AF73               	btfss	(sprintf@exp+1)& (0+255),7,b
  2054  000DC6  D00E               	goto	l3221
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;doprnt.c: 1023: exp = -exp;
  2058  000DC8  0100               	movlb	0	; () banked
  2059  000DCA  6D72               	negf	sprintf@exp& (0+255),b
  2060  000DCC  1F73               	comf	(sprintf@exp+1)& (0+255),f,b
  2061  000DCE  B0D8               	btfsc	status,0,c
  2062  000DD0  2B73               	incf	(sprintf@exp+1)& (0+255),f,b
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;doprnt.c: 1024: ((*sp++ = ('-')));
  2066  000DD2  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2067  000DD6  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2068  000DDA  0E2D               	movlw	45
  2069  000DDC  D008               	goto	L1
  2070  000DDE                     l3219:
  2071                           
  2072                           ; BSR set to: 0
  2073  000DDE  4A4A               	infsnz	sprintf@sp,f,c
  2074  000DE0  2A4B               	incf	sprintf@sp+1,f,c
  2075                           
  2076                           ;doprnt.c: 1025: } else
  2077  000DE2  D007               	goto	l3225
  2078  000DE4                     l3221:
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;doprnt.c: 1026: ((*sp++ = ('+')));
  2082  000DE4  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2083  000DE8  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2084  000DEC  0E2B               	movlw	43
  2085  000DEE                     L1:
  2086  000DEE  6EDF               	movwf	indf2,c
  2087  000DF0  D7F6               	goto	l3219
  2088  000DF2                     l3225:
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;doprnt.c: 1039: ((*sp++ = (exp / 10 + '0')));
  2092  000DF2  C072  F007         	movff	sprintf@exp,___awdiv@dividend
  2093  000DF6  C073  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2094  000DFA  0E00               	movlw	0
  2095  000DFC  6E0A               	movwf	___awdiv@divisor+1,c
  2096  000DFE  0E0A               	movlw	10
  2097  000E00  6E09               	movwf	___awdiv@divisor,c
  2098  000E02  ECB3  F012         	call	___awdiv	;wreg free
  2099  000E06  5007               	movf	?___awdiv,w,c
  2100  000E08  0F30               	addlw	48
  2101  000E0A  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2102  000E0E  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2103  000E12  6EDF               	movwf	indf2,c
  2104  000E14  4A4A               	infsnz	sprintf@sp,f,c
  2105  000E16  2A4B               	incf	sprintf@sp+1,f,c
  2106                           
  2107                           ;doprnt.c: 1040: ((*sp++ = (exp % 10 + '0')));
  2108  000E18  C072  F001         	movff	sprintf@exp,___awmod@dividend
  2109  000E1C  C073  F002         	movff	sprintf@exp+1,___awmod@dividend+1
  2110  000E20  0E00               	movlw	0
  2111  000E22  6E04               	movwf	___awmod@divisor+1,c
  2112  000E24  0E0A               	movlw	10
  2113  000E26  6E03               	movwf	___awmod@divisor,c
  2114  000E28  EC8F  F013         	call	___awmod	;wreg free
  2115  000E2C  5001               	movf	?___awmod,w,c
  2116  000E2E  0F30               	addlw	48
  2117  000E30  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2118  000E34  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2119  000E38  D3C8               	goto	L2
  2120  000E3A                     l3231:
  2121  000E3A  4A4A               	infsnz	sprintf@sp,f,c
  2122  000E3C  2A4B               	incf	sprintf@sp+1,f,c
  2123                           
  2124                           ;doprnt.c: 1047: continue;
  2125  000E3E  D3C8               	goto	l3393
  2126  000E40                     l128:
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;doprnt.c: 1048: }
  2130                           ;doprnt.c: 1087: if(flag & 0x200) {
  2131  000E40  0100               	movlb	0	; () banked
  2132  000E42  A369               	btfss	(sprintf@flag+1)& (0+255),1,b
  2133  000E44  D107               	goto	l3269
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;doprnt.c: 1088: if(exp < 0)
  2137  000E46  0100               	movlb	0	; () banked
  2138  000E48  AF73               	btfss	(sprintf@exp+1)& (0+255),7,b
  2139  000E4A  D00F               	goto	l3237
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;doprnt.c: 1089: prec -= (exp+1);
  2143  000E4C  0E01               	movlw	1
  2144  000E4E  0100               	movlb	0	; () banked
  2145  000E50  2572               	addwf	sprintf@exp& (0+255),w,b
  2146  000E52  6E51               	movwf	??_sprintf& (0+255),c
  2147  000E54  0E00               	movlw	0
  2148  000E56  0100               	movlb	0	; () banked
  2149  000E58  2173               	addwfc	(sprintf@exp+1)& (0+255),w,b
  2150  000E5A  6E52               	movwf	(??_sprintf+1)& (0+255),c
  2151  000E5C  5051               	movf	??_sprintf,w,c
  2152  000E5E  0100               	movlb	0	; () banked
  2153  000E60  5F74               	subwf	sprintf@prec& (0+255),f,b
  2154  000E62  5052               	movf	??_sprintf+1,w,c
  2155  000E64  0100               	movlb	0	; () banked
  2156  000E66  5B75               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2157  000E68  D000               	goto	l3237
  2158  000E6A                     l3237:
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;doprnt.c: 1091: val = (unsigned long)fval;
  2162  000E6A  C076  F001         	movff	sprintf@fval,___fttol@f1
  2163  000E6E  C077  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2164  000E72  C078  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2165  000E76  EC11  F011         	call	___fttol	;wreg free
  2166  000E7A  C001  F06E         	movff	?___fttol,sprintf@val
  2167  000E7E  C002  F06F         	movff	?___fttol+1,sprintf@val+1
  2168  000E82  C003  F070         	movff	?___fttol+2,sprintf@val+2
  2169  000E86  C004  F071         	movff	?___fttol+3,sprintf@val+3
  2170                           
  2171                           ;doprnt.c: 1092: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2172  000E8A  0E00               	movlw	0
  2173  000E8C  0100               	movlb	0	; () banked
  2174  000E8E  6F79               	movwf	sprintf@c& (0+255),b
  2175  000E90                     l3241:
  2176                           
  2177                           ; BSR set to: 0
  2178  000E90  0E0A               	movlw	10
  2179  000E92  0100               	movlb	0	; () banked
  2180  000E94  1979               	xorwf	sprintf@c& (0+255),w,b
  2181  000E96  B4D8               	btfsc	status,2,c
  2182  000E98  D022               	goto	l3253
  2183  000E9A  D001               	goto	l3245
  2184                           
  2185                           ; BSR set to: 0
  2186  000E9C  D020               	goto	l3253
  2187  000E9E                     l3245:
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;doprnt.c: 1093: if(val < dpowers[c])
  2191  000E9E  0100               	movlb	0	; () banked
  2192  000EA0  5179               	movf	sprintf@c& (0+255),w,b
  2193  000EA2  0D04               	mullw	4
  2194  000EA4  0E01               	movlw	low _dpowers
  2195  000EA6  24F3               	addwf	prodl,w,c
  2196  000EA8  6EF6               	movwf	tblptrl,c
  2197  000EAA  0E06               	movlw	high _dpowers
  2198  000EAC  20F4               	addwfc	prodh,w,c
  2199  000EAE  6EF7               	movwf	tblptrh,c
  2200  000EB0                     	if	0	;There are less than 3 active tblptr bytes
  2201  000EB0                     	endif
  2202  000EB0  0009               	tblrd		*+
  2203  000EB2  50F5               	movf	tablat,w,c
  2204  000EB4  0100               	movlb	0	; () banked
  2205  000EB6  5D6E               	subwf	sprintf@val& (0+255),w,b
  2206  000EB8  0009               	tblrd		*+
  2207  000EBA  50F5               	movf	tablat,w,c
  2208  000EBC  0100               	movlb	0	; () banked
  2209  000EBE  596F               	subwfb	(sprintf@val+1)& (0+255),w,b
  2210  000EC0  0009               	tblrd		*+
  2211  000EC2  50F5               	movf	tablat,w,c
  2212  000EC4  0100               	movlb	0	; () banked
  2213  000EC6  5970               	subwfb	(sprintf@val+2)& (0+255),w,b
  2214  000EC8  0009               	tblrd		*+
  2215  000ECA  50F5               	movf	tablat,w,c
  2216  000ECC  0100               	movlb	0	; () banked
  2217  000ECE  5971               	subwfb	(sprintf@val+3)& (0+255),w,b
  2218  000ED0  A0D8               	btfss	status,0,c
  2219  000ED2  D005               	goto	l3253
  2220  000ED4  D001               	goto	l3249
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;doprnt.c: 1094: break;
  2224  000ED6  D003               	goto	l3253
  2225  000ED8                     l3249:
  2226                           
  2227                           ; BSR set to: 0
  2228  000ED8  0100               	movlb	0	; () banked
  2229  000EDA  2B79               	incf	sprintf@c& (0+255),f,b
  2230  000EDC  D7D9               	goto	l3241
  2231  000EDE                     l3253:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;doprnt.c: 1095: prec -= c;
  2235  000EDE  0100               	movlb	0	; () banked
  2236  000EE0  5179               	movf	sprintf@c& (0+255),w,b
  2237  000EE2  0100               	movlb	0	; () banked
  2238  000EE4  5F74               	subwf	sprintf@prec& (0+255),f,b
  2239  000EE6  0E00               	movlw	0
  2240  000EE8  0100               	movlb	0	; () banked
  2241  000EEA  BF79               	btfsc	sprintf@c& (0+255),7,b
  2242  000EEC  0EFF               	movlw	255
  2243  000EEE  0100               	movlb	0	; () banked
  2244  000EF0  5B75               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2245                           
  2246                           ;doprnt.c: 1096: if(prec <= 12)
  2247  000EF2  0100               	movlb	0	; () banked
  2248  000EF4  BF75               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2249  000EF6  D008               	goto	l3255
  2250  000EF8  0100               	movlb	0	; () banked
  2251  000EFA  5175               	movf	(sprintf@prec+1)& (0+255),w,b
  2252  000EFC  E11D               	bnz	l155
  2253  000EFE  0E0D               	movlw	13
  2254  000F00  0100               	movlb	0	; () banked
  2255  000F02  5D74               	subwf	sprintf@prec& (0+255),w,b
  2256  000F04  B0D8               	btfsc	status,0,c
  2257  000F06  D018               	goto	l155
  2258  000F08                     l3255:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;doprnt.c: 1097: fval += fround(prec);
  2262  000F08  C076  F035         	movff	sprintf@fval,___ftadd@f1
  2263  000F0C  C077  F036         	movff	sprintf@fval+1,___ftadd@f1+1
  2264  000F10  C078  F037         	movff	sprintf@fval+2,___ftadd@f1+2
  2265  000F14  0100               	movlb	0	; () banked
  2266  000F16  5174               	movf	sprintf@prec& (0+255),w,b
  2267  000F18  ECF0  F00C         	call	_fround
  2268  000F1C  C02B  F038         	movff	?_fround,___ftadd@f2
  2269  000F20  C02C  F039         	movff	?_fround+1,___ftadd@f2+1
  2270  000F24  C02D  F03A         	movff	?_fround+2,___ftadd@f2+2
  2271  000F28  EC12  F00E         	call	___ftadd	;wreg free
  2272  000F2C  C035  F076         	movff	?___ftadd,sprintf@fval
  2273  000F30  C036  F077         	movff	?___ftadd+1,sprintf@fval+1
  2274  000F34  C037  F078         	movff	?___ftadd+2,sprintf@fval+2
  2275  000F38                     l155:
  2276                           
  2277                           ;doprnt.c: 1100: {
  2278                           ;doprnt.c: 1101: double temp;
  2279                           ;doprnt.c: 1102: temp = scale(prec);
  2280  000F38  0100               	movlb	0	; () banked
  2281  000F3A  5174               	movf	sprintf@prec& (0+255),w,b
  2282  000F3C  EC00  F00B         	call	_scale
  2283  000F40  C02B  F065         	movff	?_scale,sprintf@temp
  2284  000F44  C02C  F066         	movff	?_scale+1,sprintf@temp+1
  2285  000F48  C02D  F067         	movff	?_scale+2,sprintf@temp+2
  2286                           
  2287                           ;doprnt.c: 1103: temp *= fval - (double)val;
  2288  000F4C  C065  F01C         	movff	sprintf@temp,___ftmul@f1
  2289  000F50  C066  F01D         	movff	sprintf@temp+1,___ftmul@f1+1
  2290  000F54  C067  F01E         	movff	sprintf@temp+2,___ftmul@f1+2
  2291  000F58  C076  F038         	movff	sprintf@fval,___ftadd@f2
  2292  000F5C  C077  F039         	movff	sprintf@fval+1,___ftadd@f2+1
  2293  000F60  C078  F03A         	movff	sprintf@fval+2,___ftadd@f2+2
  2294  000F64  C06E  F010         	movff	sprintf@val,___lltoft@c
  2295  000F68  C06F  F011         	movff	sprintf@val+1,___lltoft@c+1
  2296  000F6C  C070  F012         	movff	sprintf@val+2,___lltoft@c+2
  2297  000F70  C071  F013         	movff	sprintf@val+3,___lltoft@c+3
  2298  000F74  EC08  F014         	call	___lltoft	;wreg free
  2299  000F78  C010  F019         	movff	?___lltoft,___ftneg@f1
  2300  000F7C  C011  F01A         	movff	?___lltoft+1,___ftneg@f1+1
  2301  000F80  C012  F01B         	movff	?___lltoft+2,___ftneg@f1+2
  2302  000F84  EC6D  F015         	call	___ftneg	;wreg free
  2303  000F88  C019  F035         	movff	?___ftneg,___ftadd@f1
  2304  000F8C  C01A  F036         	movff	?___ftneg+1,___ftadd@f1+1
  2305  000F90  C01B  F037         	movff	?___ftneg+2,___ftadd@f1+2
  2306  000F94  EC12  F00E         	call	___ftadd	;wreg free
  2307  000F98  C035  F01F         	movff	?___ftadd,___ftmul@f2
  2308  000F9C  C036  F020         	movff	?___ftadd+1,___ftmul@f2+1
  2309  000FA0  C037  F021         	movff	?___ftadd+2,___ftmul@f2+2
  2310  000FA4  EC95  F010         	call	___ftmul	;wreg free
  2311  000FA8  C01C  F065         	movff	?___ftmul,sprintf@temp
  2312  000FAC  C01D  F066         	movff	?___ftmul+1,sprintf@temp+1
  2313  000FB0  C01E  F067         	movff	?___ftmul+2,sprintf@temp+2
  2314                           
  2315                           ;doprnt.c: 1104: val = (unsigned long)temp;
  2316  000FB4  C065  F001         	movff	sprintf@temp,___fttol@f1
  2317  000FB8  C066  F002         	movff	sprintf@temp+1,___fttol@f1+1
  2318  000FBC  C067  F003         	movff	sprintf@temp+2,___fttol@f1+2
  2319  000FC0  EC11  F011         	call	___fttol	;wreg free
  2320  000FC4  C001  F06E         	movff	?___fttol,sprintf@val
  2321  000FC8  C002  F06F         	movff	?___fttol+1,sprintf@val+1
  2322  000FCC  C003  F070         	movff	?___fttol+2,sprintf@val+2
  2323  000FD0  C004  F071         	movff	?___fttol+3,sprintf@val+3
  2324                           
  2325                           ;doprnt.c: 1105: }
  2326                           ;doprnt.c: 1106: while(prec && val % 10 == 0) {
  2327  000FD4  D01F               	goto	l3265
  2328  000FD6                     l3261:
  2329                           
  2330                           ;doprnt.c: 1107: val /= 10;
  2331  000FD6  C06E  F001         	movff	sprintf@val,___lldiv@dividend
  2332  000FDA  C06F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2333  000FDE  C070  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2334  000FE2  C071  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2335  000FE6  0E0A               	movlw	10
  2336  000FE8  6E05               	movwf	___lldiv@divisor,c
  2337  000FEA  0E00               	movlw	0
  2338  000FEC  6E06               	movwf	___lldiv@divisor+1,c
  2339  000FEE  0E00               	movlw	0
  2340  000FF0  6E07               	movwf	___lldiv@divisor+2,c
  2341  000FF2  0E00               	movlw	0
  2342  000FF4  6E08               	movwf	___lldiv@divisor+3,c
  2343  000FF6  EC49  F013         	call	___lldiv	;wreg free
  2344  000FFA  C001  F06E         	movff	?___lldiv,sprintf@val
  2345  000FFE  C002  F06F         	movff	?___lldiv+1,sprintf@val+1
  2346  001002  C003  F070         	movff	?___lldiv+2,sprintf@val+2
  2347  001006  C004  F071         	movff	?___lldiv+3,sprintf@val+3
  2348                           
  2349                           ;doprnt.c: 1108: prec--;
  2350  00100A  0100               	movlb	0	; () banked
  2351  00100C  0774               	decf	sprintf@prec& (0+255),f,b
  2352  00100E  A0D8               	btfss	status,0,c
  2353  001010  0775               	decf	(sprintf@prec+1)& (0+255),f,b
  2354  001012  D000               	goto	l3265
  2355  001014                     l3265:
  2356  001014  0100               	movlb	0	; () banked
  2357  001016  5174               	movf	sprintf@prec& (0+255),w,b
  2358  001018  0100               	movlb	0	; () banked
  2359  00101A  1175               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2360  00101C  B4D8               	btfsc	status,2,c
  2361  00101E  D03E               	goto	l3273
  2362                           
  2363                           ; BSR set to: 0
  2364  001020  C06E  F001         	movff	sprintf@val,___llmod@dividend
  2365  001024  C06F  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2366  001028  C070  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2367  00102C  C071  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2368  001030  0E0A               	movlw	10
  2369  001032  6E05               	movwf	___llmod@divisor,c
  2370  001034  0E00               	movlw	0
  2371  001036  6E06               	movwf	___llmod@divisor+1,c
  2372  001038  0E00               	movlw	0
  2373  00103A  6E07               	movwf	___llmod@divisor+2,c
  2374  00103C  0E00               	movlw	0
  2375  00103E  6E08               	movwf	___llmod@divisor+3,c
  2376  001040  ECD0  F013         	call	___llmod	;wreg free
  2377  001044  5001               	movf	?___llmod,w,c
  2378  001046  1002               	iorwf	?___llmod+1,w,c
  2379  001048  1003               	iorwf	?___llmod+2,w,c
  2380  00104A  1004               	iorwf	?___llmod+3,w,c
  2381  00104C  A4D8               	btfss	status,2,c
  2382  00104E  D026               	goto	l3273
  2383  001050  D7C2               	goto	l3261
  2384                           
  2385                           ;doprnt.c: 1109: }
  2386                           ;doprnt.c: 1110: } else
  2387  001052  D024               	goto	l3273
  2388  001054                     l3269:
  2389                           
  2390                           ;doprnt.c: 1112: if(prec <= 12)
  2391  001054  0100               	movlb	0	; () banked
  2392  001056  BF75               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2393  001058  D008               	goto	l3271
  2394  00105A  0100               	movlb	0	; () banked
  2395  00105C  5175               	movf	(sprintf@prec+1)& (0+255),w,b
  2396  00105E  E11E               	bnz	l3273
  2397  001060  0E0D               	movlw	13
  2398  001062  0100               	movlb	0	; () banked
  2399  001064  5D74               	subwf	sprintf@prec& (0+255),w,b
  2400  001066  B0D8               	btfsc	status,0,c
  2401  001068  D019               	goto	l3273
  2402  00106A                     l3271:
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;doprnt.c: 1113: fval += fround(prec);
  2406  00106A  C076  F035         	movff	sprintf@fval,___ftadd@f1
  2407  00106E  C077  F036         	movff	sprintf@fval+1,___ftadd@f1+1
  2408  001072  C078  F037         	movff	sprintf@fval+2,___ftadd@f1+2
  2409  001076  0100               	movlb	0	; () banked
  2410  001078  5174               	movf	sprintf@prec& (0+255),w,b
  2411  00107A  ECF0  F00C         	call	_fround
  2412  00107E  C02B  F038         	movff	?_fround,___ftadd@f2
  2413  001082  C02C  F039         	movff	?_fround+1,___ftadd@f2+1
  2414  001086  C02D  F03A         	movff	?_fround+2,___ftadd@f2+2
  2415  00108A  EC12  F00E         	call	___ftadd	;wreg free
  2416  00108E  C035  F076         	movff	?___ftadd,sprintf@fval
  2417  001092  C036  F077         	movff	?___ftadd+1,sprintf@fval+1
  2418  001096  C037  F078         	movff	?___ftadd+2,sprintf@fval+2
  2419  00109A  D000               	goto	l3273
  2420  00109C                     l3273:
  2421                           
  2422                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2423  00109C  0100               	movlb	0	; () banked
  2424  00109E  BF73               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2425  0010A0  D008               	goto	l3275
  2426  0010A2  0100               	movlb	0	; () banked
  2427  0010A4  5173               	movf	(sprintf@exp+1)& (0+255),w,b
  2428  0010A6  E128               	bnz	l3281
  2429  0010A8  0E0A               	movlw	10
  2430  0010AA  0100               	movlb	0	; () banked
  2431  0010AC  5D72               	subwf	sprintf@exp& (0+255),w,b
  2432  0010AE  B0D8               	btfsc	status,0,c
  2433  0010B0  D023               	goto	l3281
  2434  0010B2                     l3275:
  2435                           
  2436                           ; BSR set to: 0
  2437  0010B2  0100               	movlb	0	; () banked
  2438  0010B4  5176               	movf	sprintf@fval& (0+255),w,b
  2439  0010B6  0100               	movlb	0	; () banked
  2440  0010B8  1177               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2441  0010BA  0100               	movlb	0	; () banked
  2442  0010BC  1178               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2443  0010BE  B4D8               	btfsc	status,2,c
  2444  0010C0  D077               	goto	l3295
  2445                           
  2446                           ; BSR set to: 0
  2447  0010C2  C076  F001         	movff	sprintf@fval,___fttol@f1
  2448  0010C6  C077  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2449  0010CA  C078  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2450  0010CE  EC11  F011         	call	___fttol	;wreg free
  2451  0010D2  5001               	movf	?___fttol,w,c
  2452  0010D4  1002               	iorwf	?___fttol+1,w,c
  2453  0010D6  1003               	iorwf	?___fttol+2,w,c
  2454  0010D8  1004               	iorwf	?___fttol+3,w,c
  2455  0010DA  A4D8               	btfss	status,2,c
  2456  0010DC  D069               	goto	l3295
  2457  0010DE  0100               	movlb	0	; () banked
  2458  0010E0  BF73               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2459  0010E2  D066               	goto	l3295
  2460  0010E4  0100               	movlb	0	; () banked
  2461  0010E6  5173               	movf	(sprintf@exp+1)& (0+255),w,b
  2462  0010E8  E107               	bnz	l3281
  2463  0010EA  0E02               	movlw	2
  2464  0010EC  0100               	movlb	0	; () banked
  2465  0010EE  5D72               	subwf	sprintf@exp& (0+255),w,b
  2466  0010F0  B0D8               	btfsc	status,0,c
  2467  0010F2  D002               	goto	l3281
  2468  0010F4  D05D               	goto	l3295
  2469  0010F6  D000               	goto	l3281
  2470  0010F8                     l3281:
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2474  0010F8  C06A  F041         	movff	sprintf@tmpval,___ftge@ff1
  2475  0010FC  C06B  F042         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2476  001100  C06C  F043         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2477  001104  0E70               	movlw	112
  2478  001106  6E44               	movwf	___ftge@ff2,c
  2479  001108  0E89               	movlw	137
  2480  00110A  6E45               	movwf	___ftge@ff2+1,c
  2481  00110C  0E40               	movlw	64
  2482  00110E  6E46               	movwf	___ftge@ff2+2,c
  2483  001110  ECFE  F012         	call	___ftge	;wreg free
  2484  001114  B0D8               	btfsc	status,0,c
  2485  001116  D003               	goto	l3285
  2486                           
  2487                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2488  001118  0100               	movlb	0	; () banked
  2489  00111A  0EF7               	movlw	247
  2490  00111C  D002               	goto	L3
  2491  00111E                     l3285:
  2492                           
  2493                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2494  00111E  0100               	movlb	0	; () banked
  2495  001120  0EF8               	movlw	248
  2496  001122                     L3:
  2497  001122  2772               	addwf	sprintf@exp& (0+255),f,b
  2498  001124  0EFF               	movlw	255
  2499  001126  2373               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2500  001128  D000               	goto	l3287
  2501  00112A                     l3287:
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;doprnt.c: 1124: }
  2505                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2506  00112A  0100               	movlb	0	; () banked
  2507  00112C  5172               	movf	sprintf@exp& (0+255),w,b
  2508  00112E  EC00  F00B         	call	_scale
  2509  001132  C02B  F06A         	movff	?_scale,sprintf@tmpval
  2510  001136  C02C  F06B         	movff	?_scale+1,sprintf@tmpval+1
  2511  00113A  C02D  F06C         	movff	?_scale+2,sprintf@tmpval+2
  2512                           
  2513                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2514  00113E  D017               	goto	l3291
  2515  001140  C076  F001         	movff	sprintf@fval,__div_to_l_@f1
  2516  001144  C077  F002         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2517  001148  C078  F003         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2518  00114C  C06A  F004         	movff	sprintf@tmpval,__div_to_l_@f2
  2519  001150  C06B  F005         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2520  001154  C06C  F006         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2521  001158  EC10  F010         	call	__div_to_l_	;wreg free
  2522  00115C  C001  F06E         	movff	?__div_to_l_,sprintf@val
  2523  001160  C002  F06F         	movff	?__div_to_l_+1,sprintf@val+1
  2524  001164  C003  F070         	movff	?__div_to_l_+2,sprintf@val+2
  2525  001168  C004  F071         	movff	?__div_to_l_+3,sprintf@val+3
  2526  00116C  D017               	goto	l3293
  2527  00116E                     l3291:
  2528  00116E  C076  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2529  001172  C077  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2530  001176  C078  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2531  00117A  C06A  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2532  00117E  C06B  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2533  001182  C06C  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2534  001186  EC88  F00F         	call	__tdiv_to_l_	;wreg free
  2535  00118A  C001  F06E         	movff	?__tdiv_to_l_,sprintf@val
  2536  00118E  C002  F06F         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2537  001192  C003  F070         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2538  001196  C004  F071         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2539  00119A  D000               	goto	l3293
  2540  00119C                     l3293:
  2541                           
  2542                           ;doprnt.c: 1129: fval = 0.0;
  2543  00119C  0E00               	movlw	0
  2544  00119E  0100               	movlb	0	; () banked
  2545  0011A0  6F76               	movwf	sprintf@fval& (0+255),b
  2546  0011A2  0E00               	movlw	0
  2547  0011A4  0100               	movlb	0	; () banked
  2548  0011A6  6F77               	movwf	(sprintf@fval+1)& (0+255),b
  2549  0011A8  0E00               	movlw	0
  2550  0011AA  0100               	movlb	0	; () banked
  2551  0011AC  6F78               	movwf	(sprintf@fval+2)& (0+255),b
  2552                           
  2553                           ;doprnt.c: 1130: } else {
  2554  0011AE  D034               	goto	l3299
  2555  0011B0                     l3295:
  2556                           
  2557                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2558  0011B0  C076  F001         	movff	sprintf@fval,___fttol@f1
  2559  0011B4  C077  F002         	movff	sprintf@fval+1,___fttol@f1+1
  2560  0011B8  C078  F003         	movff	sprintf@fval+2,___fttol@f1+2
  2561  0011BC  EC11  F011         	call	___fttol	;wreg free
  2562  0011C0  C001  F06E         	movff	?___fttol,sprintf@val
  2563  0011C4  C002  F06F         	movff	?___fttol+1,sprintf@val+1
  2564  0011C8  C003  F070         	movff	?___fttol+2,sprintf@val+2
  2565  0011CC  C004  F071         	movff	?___fttol+3,sprintf@val+3
  2566                           
  2567                           ;doprnt.c: 1132: fval -= (double)val;
  2568  0011D0  C076  F041         	movff	sprintf@fval,___ftsub@f1
  2569  0011D4  C077  F042         	movff	sprintf@fval+1,___ftsub@f1+1
  2570  0011D8  C078  F043         	movff	sprintf@fval+2,___ftsub@f1+2
  2571  0011DC  C06E  F010         	movff	sprintf@val,___lltoft@c
  2572  0011E0  C06F  F011         	movff	sprintf@val+1,___lltoft@c+1
  2573  0011E4  C070  F012         	movff	sprintf@val+2,___lltoft@c+2
  2574  0011E8  C071  F013         	movff	sprintf@val+3,___lltoft@c+3
  2575  0011EC  EC08  F014         	call	___lltoft	;wreg free
  2576  0011F0  C010  F044         	movff	?___lltoft,___ftsub@f2
  2577  0011F4  C011  F045         	movff	?___lltoft+1,___ftsub@f2+1
  2578  0011F8  C012  F046         	movff	?___lltoft+2,___ftsub@f2+2
  2579  0011FC  EC91  F014         	call	___ftsub	;wreg free
  2580  001200  C041  F076         	movff	?___ftsub,sprintf@fval
  2581  001204  C042  F077         	movff	?___ftsub+1,sprintf@fval+1
  2582  001208  C043  F078         	movff	?___ftsub+2,sprintf@fval+2
  2583                           
  2584                           ;doprnt.c: 1133: exp = 0;
  2585  00120C  0E00               	movlw	0
  2586  00120E  0100               	movlb	0	; () banked
  2587  001210  6F73               	movwf	(sprintf@exp+1)& (0+255),b
  2588  001212  0E00               	movlw	0
  2589  001214  6F72               	movwf	sprintf@exp& (0+255),b
  2590  001216  D000               	goto	l3299
  2591  001218                     l3299:
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;doprnt.c: 1134: }
  2595                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2596  001218  0E01               	movlw	1
  2597  00121A  0100               	movlb	0	; () banked
  2598  00121C  6F79               	movwf	sprintf@c& (0+255),b
  2599  00121E                     l3301:
  2600                           
  2601                           ; BSR set to: 0
  2602  00121E  0E0A               	movlw	10
  2603  001220  0100               	movlb	0	; () banked
  2604  001222  1979               	xorwf	sprintf@c& (0+255),w,b
  2605  001224  B4D8               	btfsc	status,2,c
  2606  001226  D022               	goto	l3313
  2607  001228  D001               	goto	l3305
  2608                           
  2609                           ; BSR set to: 0
  2610  00122A  D020               	goto	l3313
  2611  00122C                     l3305:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;doprnt.c: 1137: if(val < dpowers[c])
  2615  00122C  0100               	movlb	0	; () banked
  2616  00122E  5179               	movf	sprintf@c& (0+255),w,b
  2617  001230  0D04               	mullw	4
  2618  001232  0E01               	movlw	low _dpowers
  2619  001234  24F3               	addwf	prodl,w,c
  2620  001236  6EF6               	movwf	tblptrl,c
  2621  001238  0E06               	movlw	high _dpowers
  2622  00123A  20F4               	addwfc	prodh,w,c
  2623  00123C  6EF7               	movwf	tblptrh,c
  2624  00123E                     	if	0	;There are less than 3 active tblptr bytes
  2625  00123E                     	endif
  2626  00123E  0009               	tblrd		*+
  2627  001240  50F5               	movf	tablat,w,c
  2628  001242  0100               	movlb	0	; () banked
  2629  001244  5D6E               	subwf	sprintf@val& (0+255),w,b
  2630  001246  0009               	tblrd		*+
  2631  001248  50F5               	movf	tablat,w,c
  2632  00124A  0100               	movlb	0	; () banked
  2633  00124C  596F               	subwfb	(sprintf@val+1)& (0+255),w,b
  2634  00124E  0009               	tblrd		*+
  2635  001250  50F5               	movf	tablat,w,c
  2636  001252  0100               	movlb	0	; () banked
  2637  001254  5970               	subwfb	(sprintf@val+2)& (0+255),w,b
  2638  001256  0009               	tblrd		*+
  2639  001258  50F5               	movf	tablat,w,c
  2640  00125A  0100               	movlb	0	; () banked
  2641  00125C  5971               	subwfb	(sprintf@val+3)& (0+255),w,b
  2642  00125E  A0D8               	btfss	status,0,c
  2643  001260  D005               	goto	l3313
  2644  001262  D001               	goto	l3309
  2645                           
  2646                           ; BSR set to: 0
  2647                           ;doprnt.c: 1138: break;
  2648  001264  D003               	goto	l3313
  2649  001266                     l3309:
  2650                           
  2651                           ; BSR set to: 0
  2652  001266  0100               	movlb	0	; () banked
  2653  001268  2B79               	incf	sprintf@c& (0+255),f,b
  2654  00126A  D7D9               	goto	l3301
  2655  00126C                     l3313:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;doprnt.c: 1175: {
  2659                           ;doprnt.c: 1188: if(flag & 0x03)
  2660  00126C  0E03               	movlw	3
  2661  00126E  0100               	movlb	0	; () banked
  2662  001270  1568               	andwf	sprintf@flag& (0+255),w,b
  2663  001272  6E51               	movwf	??_sprintf& (0+255),c
  2664  001274  0E00               	movlw	0
  2665  001276  0100               	movlb	0	; () banked
  2666  001278  1569               	andwf	(sprintf@flag+1)& (0+255),w,b
  2667  00127A  6E52               	movwf	(??_sprintf+1)& (0+255),c
  2668  00127C  5051               	movf	??_sprintf,w,c
  2669  00127E  1052               	iorwf	??_sprintf+1,w,c
  2670  001280  B4D8               	btfsc	status,2,c
  2671  001282  D053               	goto	l3327
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2675  001284  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2676  001288  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2677  00128C  0E2D               	movlw	45
  2678  00128E  D04B               	goto	L4
  2679  001290                     l3317:
  2680                           
  2681                           ; BSR set to: 0
  2682  001290  4A4A               	infsnz	sprintf@sp,f,c
  2683  001292  2A4B               	incf	sprintf@sp+1,f,c
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;doprnt.c: 1195: }
  2687                           ;doprnt.c: 1196: while(c--) {
  2688  001294  D04A               	goto	l3327
  2689  001296                     l3319:
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;doprnt.c: 1200: {
  2693                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2694  001296  C06E  F001         	movff	sprintf@val,___lldiv@dividend
  2695  00129A  C06F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2696  00129E  C070  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2697  0012A2  C071  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2698  0012A6  0100               	movlb	0	; () banked
  2699  0012A8  5179               	movf	sprintf@c& (0+255),w,b
  2700  0012AA  0D04               	mullw	4
  2701  0012AC  0E01               	movlw	low _dpowers
  2702  0012AE  24F3               	addwf	prodl,w,c
  2703  0012B0  6EF6               	movwf	tblptrl,c
  2704  0012B2  0E06               	movlw	high _dpowers
  2705  0012B4  20F4               	addwfc	prodh,w,c
  2706  0012B6  6EF7               	movwf	tblptrh,c
  2707  0012B8                     	if	0	;There are less than 3 active tblptr bytes
  2708  0012B8                     	endif
  2709  0012B8  0009               	tblrd		*+
  2710  0012BA  CFF5 F005          	movff	tablat,___lldiv@divisor
  2711  0012BE  0009               	tblrd		*+
  2712  0012C0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2713  0012C4  0009               	tblrd		*+
  2714  0012C6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2715  0012CA  000A               	tblrd		*-
  2716  0012CC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2717  0012D0  EC49  F013         	call	___lldiv	;wreg free
  2718  0012D4  C001  F06A         	movff	?___lldiv,sprintf@tmpval
  2719  0012D8  C002  F06B         	movff	?___lldiv+1,sprintf@tmpval+1
  2720  0012DC  C003  F06C         	movff	?___lldiv+2,sprintf@tmpval+2
  2721  0012E0  C004  F06D         	movff	?___lldiv+3,sprintf@tmpval+3
  2722                           
  2723                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2724  0012E4  C06A  F001         	movff	sprintf@tmpval,___llmod@dividend
  2725  0012E8  C06B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2726  0012EC  C06C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2727  0012F0  C06D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2728  0012F4  0E0A               	movlw	10
  2729  0012F6  6E05               	movwf	___llmod@divisor,c
  2730  0012F8  0E00               	movlw	0
  2731  0012FA  6E06               	movwf	___llmod@divisor+1,c
  2732  0012FC  0E00               	movlw	0
  2733  0012FE  6E07               	movwf	___llmod@divisor+2,c
  2734  001300  0E00               	movlw	0
  2735  001302  6E08               	movwf	___llmod@divisor+3,c
  2736  001304  ECD0  F013         	call	___llmod	;wreg free
  2737  001308  C001  F06A         	movff	?___llmod,sprintf@tmpval
  2738  00130C  C002  F06B         	movff	?___llmod+1,sprintf@tmpval+1
  2739  001310  C003  F06C         	movff	?___llmod+2,sprintf@tmpval+2
  2740  001314  C004  F06D         	movff	?___llmod+3,sprintf@tmpval+3
  2741                           
  2742                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2743  001318  0100               	movlb	0	; () banked
  2744  00131A  516A               	movf	sprintf@tmpval& (0+255),w,b
  2745  00131C  0F30               	addlw	48
  2746  00131E  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2747  001322  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2748  001326                     L4:
  2749  001326  6EDF               	movwf	indf2,c
  2750  001328  D7B3               	goto	l3317
  2751  00132A                     l3327:
  2752                           
  2753                           ; BSR set to: 0
  2754  00132A  0100               	movlb	0	; () banked
  2755  00132C  0779               	decf	sprintf@c& (0+255),f,b
  2756  00132E  0100               	movlb	0	; () banked
  2757  001330  2979               	incf	sprintf@c& (0+255),w,b
  2758  001332  B4D8               	btfsc	status,2,c
  2759  001334  D00F               	goto	l3335
  2760  001336  D7AF               	goto	l3319
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;doprnt.c: 1204: }
  2764                           ;doprnt.c: 1206: }
  2765                           ;doprnt.c: 1207: while(exp > 0) {
  2766  001338  D00D               	goto	l3335
  2767  00133A                     l3329:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2771  00133A  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2772  00133E  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2773  001342  0E30               	movlw	48
  2774  001344  6EDF               	movwf	indf2,c
  2775                           
  2776                           ; BSR set to: 0
  2777  001346  4A4A               	infsnz	sprintf@sp,f,c
  2778  001348  2A4B               	incf	sprintf@sp+1,f,c
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;doprnt.c: 1209: exp--;
  2782  00134A  0100               	movlb	0	; () banked
  2783  00134C  0772               	decf	sprintf@exp& (0+255),f,b
  2784  00134E  A0D8               	btfss	status,0,c
  2785  001350  0773               	decf	(sprintf@exp+1)& (0+255),f,b
  2786  001352  D000               	goto	l3335
  2787  001354                     l3335:
  2788                           
  2789                           ; BSR set to: 0
  2790  001354  0100               	movlb	0	; () banked
  2791  001356  BF73               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2792  001358  D007               	goto	l3337
  2793  00135A  0100               	movlb	0	; () banked
  2794  00135C  5173               	movf	(sprintf@exp+1)& (0+255),w,b
  2795  00135E  E1ED               	bnz	l3329
  2796  001360  0100               	movlb	0	; () banked
  2797  001362  0572               	decf	sprintf@exp& (0+255),w,b
  2798  001364  B0D8               	btfsc	status,0,c
  2799  001366  D7E9               	goto	l3329
  2800  001368                     l3337:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;doprnt.c: 1210: }
  2804                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2805  001368  0100               	movlb	0	; () banked
  2806  00136A  BF75               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2807  00136C  D00C               	goto	l183
  2808  00136E  0100               	movlb	0	; () banked
  2809  001370  5175               	movf	(sprintf@prec+1)& (0+255),w,b
  2810  001372  E105               	bnz	u3360
  2811  001374  0E09               	movlw	9
  2812  001376  0100               	movlb	0	; () banked
  2813  001378  5D74               	subwf	sprintf@prec& (0+255),w,b
  2814  00137A  A0D8               	btfss	status,0,c
  2815  00137C  D004               	goto	l183
  2816  00137E                     u3360:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2820  00137E  0E08               	movlw	8
  2821  001380  0100               	movlb	0	; () banked
  2822  001382  6F79               	movwf	sprintf@c& (0+255),b
  2823  001384  D003               	goto	l3341
  2824  001386                     l183:
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;doprnt.c: 1213: else
  2828                           ;doprnt.c: 1214: c = prec;
  2829  001386  C074  F079         	movff	sprintf@prec,sprintf@c
  2830  00138A  D000               	goto	l3341
  2831  00138C                     l3341:
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;doprnt.c: 1215: prec -= c;
  2835  00138C  0100               	movlb	0	; () banked
  2836  00138E  5179               	movf	sprintf@c& (0+255),w,b
  2837  001390  0100               	movlb	0	; () banked
  2838  001392  5F74               	subwf	sprintf@prec& (0+255),f,b
  2839  001394  0E00               	movlw	0
  2840  001396  0100               	movlb	0	; () banked
  2841  001398  BF79               	btfsc	sprintf@c& (0+255),7,b
  2842  00139A  0EFF               	movlw	255
  2843  00139C  0100               	movlb	0	; () banked
  2844  00139E  5B75               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;doprnt.c: 1219: if(c)
  2848  0013A0  0100               	movlb	0	; () banked
  2849  0013A2  5179               	movf	sprintf@c& (0+255),w,b
  2850  0013A4  0100               	movlb	0	; () banked
  2851  0013A6  B4D8               	btfsc	status,2,c
  2852  0013A8  D009               	goto	l3349
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2856  0013AA  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2857  0013AE  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2858  0013B2  0E2E               	movlw	46
  2859  0013B4  6EDF               	movwf	indf2,c
  2860                           
  2861                           ; BSR set to: 0
  2862  0013B6  4A4A               	infsnz	sprintf@sp,f,c
  2863  0013B8  2A4B               	incf	sprintf@sp+1,f,c
  2864  0013BA  D000               	goto	l3349
  2865  0013BC                     l3349:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2869  0013BC  0100               	movlb	0	; () banked
  2870  0013BE  5179               	movf	sprintf@c& (0+255),w,b
  2871  0013C0  EC00  F00B         	call	_scale
  2872  0013C4  C02B  F060         	movff	?_scale,_sprintf$1398
  2873  0013C8  C02C  F061         	movff	?_scale+1,_sprintf$1398+1
  2874  0013CC  C02D  F062         	movff	?_scale+2,_sprintf$1398+2
  2875                           
  2876                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2877  0013D0  C076  F01F         	movff	sprintf@fval,___ftmul@f2
  2878  0013D4  C077  F020         	movff	sprintf@fval+1,___ftmul@f2+1
  2879  0013D8  C078  F021         	movff	sprintf@fval+2,___ftmul@f2+2
  2880  0013DC  C060  F01C         	movff	_sprintf$1398,___ftmul@f1
  2881  0013E0  C061  F01D         	movff	_sprintf$1398+1,___ftmul@f1+1
  2882  0013E4  C062  F01E         	movff	_sprintf$1398+2,___ftmul@f1+2
  2883  0013E8  EC95  F010         	call	___ftmul	;wreg free
  2884  0013EC  C01C  F001         	movff	?___ftmul,___fttol@f1
  2885  0013F0  C01D  F002         	movff	?___ftmul+1,___fttol@f1+1
  2886  0013F4  C01E  F003         	movff	?___ftmul+2,___fttol@f1+2
  2887  0013F8  EC11  F011         	call	___fttol	;wreg free
  2888  0013FC  C001  F06E         	movff	?___fttol,sprintf@val
  2889  001400  C002  F06F         	movff	?___fttol+1,sprintf@val+1
  2890  001404  C003  F070         	movff	?___fttol+2,sprintf@val+2
  2891  001408  C004  F071         	movff	?___fttol+3,sprintf@val+3
  2892                           
  2893                           ;doprnt.c: 1228: while(c--) {
  2894  00140C  D073               	goto	l3363
  2895  00140E                     l3353:
  2896                           
  2897                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2898  00140E  C06E  F001         	movff	sprintf@val,___lldiv@dividend
  2899  001412  C06F  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2900  001416  C070  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2901  00141A  C071  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2902  00141E  0100               	movlb	0	; () banked
  2903  001420  5179               	movf	sprintf@c& (0+255),w,b
  2904  001422  0D04               	mullw	4
  2905  001424  0E01               	movlw	low _dpowers
  2906  001426  24F3               	addwf	prodl,w,c
  2907  001428  6EF6               	movwf	tblptrl,c
  2908  00142A  0E06               	movlw	high _dpowers
  2909  00142C  20F4               	addwfc	prodh,w,c
  2910  00142E  6EF7               	movwf	tblptrh,c
  2911  001430                     	if	0	;There are less than 3 active tblptr bytes
  2912  001430                     	endif
  2913  001430  0009               	tblrd		*+
  2914  001432  CFF5 F005          	movff	tablat,___lldiv@divisor
  2915  001436  0009               	tblrd		*+
  2916  001438  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2917  00143C  0009               	tblrd		*+
  2918  00143E  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2919  001442  000A               	tblrd		*-
  2920  001444  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2921  001448  EC49  F013         	call	___lldiv	;wreg free
  2922  00144C  C001  F06A         	movff	?___lldiv,sprintf@tmpval
  2923  001450  C002  F06B         	movff	?___lldiv+1,sprintf@tmpval+1
  2924  001454  C003  F06C         	movff	?___lldiv+2,sprintf@tmpval+2
  2925  001458  C004  F06D         	movff	?___lldiv+3,sprintf@tmpval+3
  2926                           
  2927                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2928  00145C  C06A  F001         	movff	sprintf@tmpval,___llmod@dividend
  2929  001460  C06B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2930  001464  C06C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2931  001468  C06D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2932  00146C  0E0A               	movlw	10
  2933  00146E  6E05               	movwf	___llmod@divisor,c
  2934  001470  0E00               	movlw	0
  2935  001472  6E06               	movwf	___llmod@divisor+1,c
  2936  001474  0E00               	movlw	0
  2937  001476  6E07               	movwf	___llmod@divisor+2,c
  2938  001478  0E00               	movlw	0
  2939  00147A  6E08               	movwf	___llmod@divisor+3,c
  2940  00147C  ECD0  F013         	call	___llmod	;wreg free
  2941  001480  C001  F06A         	movff	?___llmod,sprintf@tmpval
  2942  001484  C002  F06B         	movff	?___llmod+1,sprintf@tmpval+1
  2943  001488  C003  F06C         	movff	?___llmod+2,sprintf@tmpval+2
  2944  00148C  C004  F06D         	movff	?___llmod+3,sprintf@tmpval+3
  2945                           
  2946                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2947  001490  0100               	movlb	0	; () banked
  2948  001492  516A               	movf	sprintf@tmpval& (0+255),w,b
  2949  001494  0F30               	addlw	48
  2950  001496  C04A  FFD9         	movff	sprintf@sp,fsr2l
  2951  00149A  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  2952  00149E  6EDF               	movwf	indf2,c
  2953                           
  2954                           ; BSR set to: 0
  2955  0014A0  4A4A               	infsnz	sprintf@sp,f,c
  2956  0014A2  2A4B               	incf	sprintf@sp+1,f,c
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;doprnt.c: 1232: val %= dpowers[c];
  2960  0014A4  C06E  F001         	movff	sprintf@val,___llmod@dividend
  2961  0014A8  C06F  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2962  0014AC  C070  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2963  0014B0  C071  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2964  0014B4  0100               	movlb	0	; () banked
  2965  0014B6  5179               	movf	sprintf@c& (0+255),w,b
  2966  0014B8  0D04               	mullw	4
  2967  0014BA  0E01               	movlw	low _dpowers
  2968  0014BC  24F3               	addwf	prodl,w,c
  2969  0014BE  6EF6               	movwf	tblptrl,c
  2970  0014C0  0E06               	movlw	high _dpowers
  2971  0014C2  20F4               	addwfc	prodh,w,c
  2972  0014C4  6EF7               	movwf	tblptrh,c
  2973  0014C6                     	if	0	;There are less than 3 active tblptr bytes
  2974  0014C6                     	endif
  2975  0014C6  0009               	tblrd		*+
  2976  0014C8  CFF5 F005          	movff	tablat,___llmod@divisor
  2977  0014CC  0009               	tblrd		*+
  2978  0014CE  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2979  0014D2  0009               	tblrd		*+
  2980  0014D4  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2981  0014D8  000A               	tblrd		*-
  2982  0014DA  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2983  0014DE  ECD0  F013         	call	___llmod	;wreg free
  2984  0014E2  C001  F06E         	movff	?___llmod,sprintf@val
  2985  0014E6  C002  F06F         	movff	?___llmod+1,sprintf@val+1
  2986  0014EA  C003  F070         	movff	?___llmod+2,sprintf@val+2
  2987  0014EE  C004  F071         	movff	?___llmod+3,sprintf@val+3
  2988  0014F2  D000               	goto	l3363
  2989  0014F4                     l3363:
  2990  0014F4  0100               	movlb	0	; () banked
  2991  0014F6  0779               	decf	sprintf@c& (0+255),f,b
  2992  0014F8  0100               	movlb	0	; () banked
  2993  0014FA  2979               	incf	sprintf@c& (0+255),w,b
  2994  0014FC  B4D8               	btfsc	status,2,c
  2995  0014FE  D00F               	goto	l3371
  2996  001500  D786               	goto	l3353
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;doprnt.c: 1233: }
  3000                           ;doprnt.c: 1235: while(prec) {
  3001  001502  D00D               	goto	l3371
  3002  001504                     l3365:
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3006  001504  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3007  001508  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3008  00150C  0E30               	movlw	48
  3009  00150E  6EDF               	movwf	indf2,c
  3010                           
  3011                           ; BSR set to: 0
  3012  001510  4A4A               	infsnz	sprintf@sp,f,c
  3013  001512  2A4B               	incf	sprintf@sp+1,f,c
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;doprnt.c: 1237: prec--;
  3017  001514  0100               	movlb	0	; () banked
  3018  001516  0774               	decf	sprintf@prec& (0+255),f,b
  3019  001518  A0D8               	btfss	status,0,c
  3020  00151A  0775               	decf	(sprintf@prec+1)& (0+255),f,b
  3021  00151C  D000               	goto	l3371
  3022  00151E                     l3371:
  3023                           
  3024                           ; BSR set to: 0
  3025  00151E  0100               	movlb	0	; () banked
  3026  001520  5174               	movf	sprintf@prec& (0+255),w,b
  3027  001522  0100               	movlb	0	; () banked
  3028  001524  1175               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3029  001526  B4D8               	btfsc	status,2,c
  3030  001528  D053               	goto	l3393
  3031  00152A  D7EC               	goto	l3365
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;doprnt.c: 1238: }
  3035                           ;doprnt.c: 1245: continue;
  3036  00152C  D051               	goto	l3393
  3037  00152E                     l3373:
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;doprnt.c: 1246: }
  3041                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3042  00152E  0100               	movlb	0	; () banked
  3043  001530  5174               	movf	sprintf@prec& (0+255),w,b
  3044  001532  0100               	movlb	0	; () banked
  3045  001534  1175               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3046  001536  A4D8               	btfss	status,2,c
  3047  001538  D00E               	goto	l3379
  3048                           
  3049                           ; BSR set to: 0
  3050  00153A  0100               	movlb	0	; () banked
  3051  00153C  516E               	movf	sprintf@val& (0+255),w,b
  3052  00153E  0100               	movlb	0	; () banked
  3053  001540  116F               	iorwf	(sprintf@val+1)& (0+255),w,b
  3054  001542  0100               	movlb	0	; () banked
  3055  001544  1170               	iorwf	(sprintf@val+2)& (0+255),w,b
  3056  001546  0100               	movlb	0	; () banked
  3057  001548  1171               	iorwf	(sprintf@val+3)& (0+255),w,b
  3058  00154A  A4D8               	btfss	status,2,c
  3059  00154C  D004               	goto	l3379
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;doprnt.c: 1291: prec++;
  3063  00154E  0100               	movlb	0	; () banked
  3064  001550  4B74               	infsnz	sprintf@prec& (0+255),f,b
  3065  001552  2B75               	incf	(sprintf@prec+1)& (0+255),f,b
  3066  001554  D000               	goto	l3379
  3067  001556                     l3379:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;doprnt.c: 1339: if(c < prec)
  3071  001556  0E80               	movlw	128
  3072  001558  0100               	movlb	0	; () banked
  3073  00155A  BF79               	btfsc	sprintf@c& (0+255),7,b
  3074  00155C  0E7F               	movlw	127
  3075  00155E  6E51               	movwf	??_sprintf& (0+255),c
  3076  001560  0100               	movlb	0	; () banked
  3077  001562  5174               	movf	sprintf@prec& (0+255),w,b
  3078  001564  0100               	movlb	0	; () banked
  3079  001566  5D79               	subwf	sprintf@c& (0+255),w,b
  3080  001568  0100               	movlb	0	; () banked
  3081  00156A  5175               	movf	(sprintf@prec+1)& (0+255),w,b
  3082  00156C  0A80               	xorlw	128
  3083  00156E  5851               	subwfb	??_sprintf& (0+255),w,c
  3084  001570  B0D8               	btfsc	status,0,c
  3085  001572  D003               	goto	l3383
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;doprnt.c: 1340: c = prec;
  3089  001574  C074  F079         	movff	sprintf@prec,sprintf@c
  3090  001578  D017               	goto	l3387
  3091  00157A                     l3383:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;doprnt.c: 1341: else if(prec < c)
  3095  00157A  0100               	movlb	0	; () banked
  3096  00157C  5175               	movf	(sprintf@prec+1)& (0+255),w,b
  3097  00157E  0A80               	xorlw	128
  3098  001580  6E51               	movwf	??_sprintf& (0+255),c
  3099  001582  0100               	movlb	0	; () banked
  3100  001584  5179               	movf	sprintf@c& (0+255),w,b
  3101  001586  0100               	movlb	0	; () banked
  3102  001588  5D74               	subwf	sprintf@prec& (0+255),w,b
  3103  00158A  0E80               	movlw	128
  3104  00158C  0100               	movlb	0	; () banked
  3105  00158E  BF79               	btfsc	sprintf@c& (0+255),7,b
  3106  001590  0E7F               	movlw	127
  3107  001592  5851               	subwfb	??_sprintf& (0+255),w,c
  3108  001594  B0D8               	btfsc	status,0,c
  3109  001596  D008               	goto	l3387
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;doprnt.c: 1342: prec = c;
  3113  001598  0100               	movlb	0	; () banked
  3114  00159A  5179               	movf	sprintf@c& (0+255),w,b
  3115  00159C  0100               	movlb	0	; () banked
  3116  00159E  6F74               	movwf	sprintf@prec& (0+255),b
  3117  0015A0  6B75               	clrf	(sprintf@prec+1)& (0+255),b
  3118  0015A2  BF74               	btfsc	sprintf@prec& (0+255),7,b
  3119  0015A4  0775               	decf	(sprintf@prec+1)& (0+255),f,b
  3120                           
  3121                           ; BSR set to: 0
  3122  0015A6  D000               	goto	l3387
  3123  0015A8                     l3387:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;doprnt.c: 1422: {
  3127                           ;doprnt.c: 1438: if(flag & 0x03)
  3128  0015A8  0E03               	movlw	3
  3129  0015AA  0100               	movlb	0	; () banked
  3130  0015AC  1568               	andwf	sprintf@flag& (0+255),w,b
  3131  0015AE  6E51               	movwf	??_sprintf& (0+255),c
  3132  0015B0  0E00               	movlw	0
  3133  0015B2  0100               	movlb	0	; () banked
  3134  0015B4  1569               	andwf	(sprintf@flag+1)& (0+255),w,b
  3135  0015B6  6E52               	movwf	(??_sprintf+1)& (0+255),c
  3136  0015B8  5051               	movf	??_sprintf,w,c
  3137  0015BA  1052               	iorwf	??_sprintf+1,w,c
  3138  0015BC  B4D8               	btfsc	status,2,c
  3139  0015BE  D008               	goto	l3393
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3143  0015C0  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3144  0015C4  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3145  0015C8  0E2D               	movlw	45
  3146  0015CA                     L2:
  3147  0015CA  6EDF               	movwf	indf2,c
  3148  0015CC  D436               	goto	l3231
  3149                           
  3150                           ; BSR set to: 0
  3151                           
  3152                           ; BSR set to: 0
  3153  0015CE  D000               	goto	l3393
  3154  0015D0                     l3393:
  3155  0015D0  C04C  FFF6         	movff	sprintf@f,tblptrl
  3156  0015D4  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  3157  0015D8  4A4C               	infsnz	sprintf@f,f,c
  3158  0015DA  2A4D               	incf	sprintf@f+1,f,c
  3159  0015DC                     	if	0	;tblptru may be non-zero
  3160  0015DC                     	endif
  3161  0015DC                     	if	0	;tblptru may be non-zero
  3162  0015DC                     	endif
  3163  0015DC  0008               	tblrd		*
  3164  0015DE  CFF5 F079          	movff	tablat,sprintf@c
  3165  0015E2  0100               	movlb	0	; () banked
  3166  0015E4  5179               	movf	sprintf@c& (0+255),w,b
  3167  0015E6  B4D8               	btfsc	status,2,c
  3168  0015E8  D003               	goto	l3395
  3169  0015EA  EF54  F003         	goto	l3055
  3170                           
  3171                           ; BSR set to: 0
  3172  0015EE  D000               	goto	l3395
  3173  0015F0                     l3395:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;doprnt.c: 1538: *sp = 0;
  3177  0015F0  C04A  FFD9         	movff	sprintf@sp,fsr2l
  3178  0015F4  C04B  FFDA         	movff	sprintf@sp+1,fsr2h
  3179  0015F8  0E00               	movlw	0
  3180  0015FA  6EDF               	movwf	indf2,c
  3181  0015FC  D000               	goto	l198
  3182  0015FE                     l198:
  3183                           
  3184                           ; BSR set to: 0
  3185  0015FE  0012               	return		;funcret
  3186  001600                     __end_of_sprintf:
  3187                           	opt stack 0
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           prodh	equ	0xFF4
  3193                           prodl	equ	0xFF3
  3194                           postinc0	equ	0xFEE
  3195                           wreg	equ	0xFE8
  3196                           indf2	equ	0xFDF
  3197                           postinc2	equ	0xFDE
  3198                           postdec2	equ	0xFDD
  3199                           fsr2h	equ	0xFDA
  3200                           fsr2l	equ	0xFD9
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function _scale *****************
  3204 ;; Defined at:
  3205 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  scl             1    wreg     char 
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  scl             1   48[COMRAM] char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;                  3   42[COMRAM] char 
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3219 ;;      Params:         3       0       0       0       0       0       0
  3220 ;;      Locals:         4       0       0       0       0       0       0
  3221 ;;      Temps:          0       0       0       0       0       0       0
  3222 ;;      Totals:         7       0       0       0       0       0       0
  3223 ;;Total ram usage:        7 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    2
  3226 ;; This function calls:
  3227 ;;		___awdiv
  3228 ;;		___awmod
  3229 ;;		___ftmul
  3230 ;;		___wmul
  3231 ;; This function is called by:
  3232 ;;		_sprintf
  3233 ;; This function uses a non-reentrant model
  3234 ;;
  3235                           
  3236                           	psect	text2
  3237  001600                     __ptext2:
  3238                           	opt stack 0
  3239  001600                     _scale:
  3240                           	opt stack 27
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;incstack = 0
  3244                           ;scale@scl stored from wreg
  3245  001600  6E31               	movwf	scale@scl,c
  3246                           
  3247                           ;doprnt.c: 428: if(scl < 0) {
  3248  001602  AE31               	btfss	scale@scl,7,c
  3249  001604  D0EF               	goto	l2685
  3250                           
  3251                           ;doprnt.c: 429: scl = -scl;
  3252  001606  6C31               	negf	scale@scl,c
  3253                           
  3254                           ;doprnt.c: 430: if(scl>=110)
  3255  001608  5031               	movf	scale@scl,w,c
  3256  00160A  0A80               	xorlw	128
  3257  00160C  0F12               	addlw	-238
  3258  00160E  A0D8               	btfss	status,0,c
  3259  001610  D08D               	goto	l2675
  3260                           
  3261                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3262  001612  0E00               	movlw	0
  3263  001614  6E12               	movwf	___wmul@multiplicand+1,c
  3264  001616  0E03               	movlw	3
  3265  001618  6E11               	movwf	___wmul@multiplicand,c
  3266  00161A  0E00               	movlw	0
  3267  00161C  6E0A               	movwf	___awdiv@divisor+1,c
  3268  00161E  0E0A               	movlw	10
  3269  001620  6E09               	movwf	___awdiv@divisor,c
  3270  001622  0E00               	movlw	0
  3271  001624  6E04               	movwf	___awmod@divisor+1,c
  3272  001626  0E64               	movlw	100
  3273  001628  6E03               	movwf	___awmod@divisor,c
  3274  00162A  5031               	movf	scale@scl,w,c
  3275  00162C  6E01               	movwf	___awmod@dividend,c
  3276  00162E  6A02               	clrf	___awmod@dividend+1,c
  3277  001630  BE01               	btfsc	___awmod@dividend,7,c
  3278  001632  0602               	decf	___awmod@dividend+1,f,c
  3279  001634  EC8F  F013         	call	___awmod	;wreg free
  3280  001638  C001  F007         	movff	?___awmod,___awdiv@dividend
  3281  00163C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3282  001640  ECB3  F012         	call	___awdiv	;wreg free
  3283  001644  0E09               	movlw	9
  3284  001646  2407               	addwf	?___awdiv,w,c
  3285  001648  6E0F               	movwf	___wmul@multiplier,c
  3286  00164A  0E00               	movlw	0
  3287  00164C  2008               	addwfc	?___awdiv+1,w,c
  3288  00164E  6E10               	movwf	___wmul@multiplier+1,c
  3289  001650  EC46  F015         	call	___wmul	;wreg free
  3290  001654  0E29               	movlw	low __npowers_
  3291  001656  240F               	addwf	?___wmul,w,c
  3292  001658  6EF6               	movwf	tblptrl,c
  3293  00165A  0E06               	movlw	high __npowers_
  3294  00165C  2010               	addwfc	?___wmul+1,w,c
  3295  00165E  6EF7               	movwf	tblptrh,c
  3296  001660                     	if	0	;There are less than 3 active tblptr bytes
  3297  001660                     	endif
  3298  001660  0009               	tblrd		*+
  3299  001662  CFF5 F01F          	movff	tablat,___ftmul@f2
  3300  001666  0009               	tblrd		*+
  3301  001668  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3302  00166C  000A               	tblrd		*-
  3303  00166E  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3304  001672  0E00               	movlw	0
  3305  001674  6E0A               	movwf	___awdiv@divisor+1,c
  3306  001676  0E64               	movlw	100
  3307  001678  6E09               	movwf	___awdiv@divisor,c
  3308  00167A  5031               	movf	scale@scl,w,c
  3309  00167C  6E07               	movwf	___awdiv@dividend,c
  3310  00167E  6A08               	clrf	___awdiv@dividend+1,c
  3311  001680  BE07               	btfsc	___awdiv@dividend,7,c
  3312  001682  0608               	decf	___awdiv@dividend+1,f,c
  3313  001684  ECB3  F012         	call	___awdiv	;wreg free
  3314  001688  0E12               	movlw	18
  3315  00168A  2407               	addwf	?___awdiv,w,c
  3316  00168C  6E0F               	movwf	___wmul@multiplier,c
  3317  00168E  0E00               	movlw	0
  3318  001690  2008               	addwfc	?___awdiv+1,w,c
  3319  001692  6E10               	movwf	___wmul@multiplier+1,c
  3320  001694  0E00               	movlw	0
  3321  001696  6E12               	movwf	___wmul@multiplicand+1,c
  3322  001698  0E03               	movlw	3
  3323  00169A  6E11               	movwf	___wmul@multiplicand,c
  3324  00169C  EC46  F015         	call	___wmul	;wreg free
  3325  0016A0  0E29               	movlw	low __npowers_
  3326  0016A2  240F               	addwf	?___wmul,w,c
  3327  0016A4  6EF6               	movwf	tblptrl,c
  3328  0016A6  0E06               	movlw	high __npowers_
  3329  0016A8  2010               	addwfc	?___wmul+1,w,c
  3330  0016AA  6EF7               	movwf	tblptrh,c
  3331  0016AC                     	if	0	;There are less than 3 active tblptr bytes
  3332  0016AC                     	endif
  3333  0016AC  0009               	tblrd		*+
  3334  0016AE  CFF5 F01C          	movff	tablat,___ftmul@f1
  3335  0016B2  0009               	tblrd		*+
  3336  0016B4  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3337  0016B8  000A               	tblrd		*-
  3338  0016BA  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3339  0016BE  EC95  F010         	call	___ftmul	;wreg free
  3340  0016C2  C01C  F02E         	movff	?___ftmul,_scale$1397
  3341  0016C6  C01D  F02F         	movff	?___ftmul+1,_scale$1397+1
  3342  0016CA  C01E  F030         	movff	?___ftmul+2,_scale$1397+2
  3343                           
  3344                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3345  0016CE  C02E  F01C         	movff	_scale$1397,___ftmul@f1
  3346  0016D2  C02F  F01D         	movff	_scale$1397+1,___ftmul@f1+1
  3347  0016D6  C030  F01E         	movff	_scale$1397+2,___ftmul@f1+2
  3348  0016DA  0E00               	movlw	0
  3349  0016DC  6E12               	movwf	___wmul@multiplicand+1,c
  3350  0016DE  0E03               	movlw	3
  3351  0016E0  6E11               	movwf	___wmul@multiplicand,c
  3352  0016E2  0E00               	movlw	0
  3353  0016E4  6E04               	movwf	___awmod@divisor+1,c
  3354  0016E6  0E0A               	movlw	10
  3355  0016E8  6E03               	movwf	___awmod@divisor,c
  3356  0016EA  5031               	movf	scale@scl,w,c
  3357  0016EC  6E01               	movwf	___awmod@dividend,c
  3358  0016EE  6A02               	clrf	___awmod@dividend+1,c
  3359  0016F0  BE01               	btfsc	___awmod@dividend,7,c
  3360  0016F2  0602               	decf	___awmod@dividend+1,f,c
  3361  0016F4  EC8F  F013         	call	___awmod	;wreg free
  3362  0016F8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3363  0016FC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3364  001700  EC46  F015         	call	___wmul	;wreg free
  3365  001704  0E29               	movlw	low __npowers_
  3366  001706  240F               	addwf	?___wmul,w,c
  3367  001708  6EF6               	movwf	tblptrl,c
  3368  00170A  0E06               	movlw	high __npowers_
  3369  00170C  2010               	addwfc	?___wmul+1,w,c
  3370  00170E  6EF7               	movwf	tblptrh,c
  3371  001710                     	if	0	;There are less than 3 active tblptr bytes
  3372  001710                     	endif
  3373  001710  0009               	tblrd		*+
  3374  001712  CFF5 F01F          	movff	tablat,___ftmul@f2
  3375  001716  0009               	tblrd		*+
  3376  001718  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3377  00171C  000A               	tblrd		*-
  3378  00171E  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3379  001722  EC95  F010         	call	___ftmul	;wreg free
  3380  001726  D141               	goto	L8
  3381  001728  D15A               	goto	l96
  3382  00172A  D054               	goto	l2681
  3383  00172C                     l2675:
  3384                           
  3385                           ;doprnt.c: 432: else if(scl > 10)
  3386  00172C  5031               	movf	scale@scl,w,c
  3387  00172E  0A80               	xorlw	128
  3388  001730  0F75               	addlw	-139
  3389  001732  A0D8               	btfss	status,0,c
  3390  001734  D04F               	goto	l2681
  3391                           
  3392                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3393  001736  0E00               	movlw	0
  3394  001738  6E0A               	movwf	___awdiv@divisor+1,c
  3395  00173A  0E0A               	movlw	10
  3396  00173C  6E09               	movwf	___awdiv@divisor,c
  3397  00173E  5031               	movf	scale@scl,w,c
  3398  001740  6E07               	movwf	___awdiv@dividend,c
  3399  001742  6A08               	clrf	___awdiv@dividend+1,c
  3400  001744  BE07               	btfsc	___awdiv@dividend,7,c
  3401  001746  0608               	decf	___awdiv@dividend+1,f,c
  3402  001748  ECB3  F012         	call	___awdiv	;wreg free
  3403  00174C  0E09               	movlw	9
  3404  00174E  2407               	addwf	?___awdiv,w,c
  3405  001750  6E0F               	movwf	___wmul@multiplier,c
  3406  001752  0E00               	movlw	0
  3407  001754  2008               	addwfc	?___awdiv+1,w,c
  3408  001756  6E10               	movwf	___wmul@multiplier+1,c
  3409  001758  0E00               	movlw	0
  3410  00175A  6E12               	movwf	___wmul@multiplicand+1,c
  3411  00175C  0E03               	movlw	3
  3412  00175E  6E11               	movwf	___wmul@multiplicand,c
  3413  001760  EC46  F015         	call	___wmul	;wreg free
  3414  001764  0E29               	movlw	low __npowers_
  3415  001766  240F               	addwf	?___wmul,w,c
  3416  001768  6EF6               	movwf	tblptrl,c
  3417  00176A  0E06               	movlw	high __npowers_
  3418  00176C  2010               	addwfc	?___wmul+1,w,c
  3419  00176E  6EF7               	movwf	tblptrh,c
  3420  001770                     	if	0	;There are less than 3 active tblptr bytes
  3421  001770                     	endif
  3422  001770  0009               	tblrd		*+
  3423  001772  CFF5 F01C          	movff	tablat,___ftmul@f1
  3424  001776  0009               	tblrd		*+
  3425  001778  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3426  00177C  000A               	tblrd		*-
  3427  00177E  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3428  001782  0E00               	movlw	0
  3429  001784  6E12               	movwf	___wmul@multiplicand+1,c
  3430  001786  0E03               	movlw	3
  3431  001788  6E11               	movwf	___wmul@multiplicand,c
  3432  00178A  0E00               	movlw	0
  3433  00178C  6E04               	movwf	___awmod@divisor+1,c
  3434  00178E  0E0A               	movlw	10
  3435  001790  6E03               	movwf	___awmod@divisor,c
  3436  001792  5031               	movf	scale@scl,w,c
  3437  001794  6E01               	movwf	___awmod@dividend,c
  3438  001796  6A02               	clrf	___awmod@dividend+1,c
  3439  001798  BE01               	btfsc	___awmod@dividend,7,c
  3440  00179A  0602               	decf	___awmod@dividend+1,f,c
  3441  00179C  EC8F  F013         	call	___awmod	;wreg free
  3442  0017A0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3443  0017A4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3444  0017A8  EC46  F015         	call	___wmul	;wreg free
  3445  0017AC  0E29               	movlw	low __npowers_
  3446  0017AE  240F               	addwf	?___wmul,w,c
  3447  0017B0  6EF6               	movwf	tblptrl,c
  3448  0017B2  0E06               	movlw	high __npowers_
  3449  0017B4  2010               	addwfc	?___wmul+1,w,c
  3450  0017B6  6EF7               	movwf	tblptrh,c
  3451  0017B8                     	if	0	;There are less than 3 active tblptr bytes
  3452  0017B8                     	endif
  3453  0017B8  0009               	tblrd		*+
  3454  0017BA  CFF5 F01F          	movff	tablat,___ftmul@f2
  3455  0017BE  0009               	tblrd		*+
  3456  0017C0  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3457  0017C4  000A               	tblrd		*-
  3458  0017C6  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3459  0017CA  EC95  F010         	call	___ftmul	;wreg free
  3460  0017CE  D0ED               	goto	L8
  3461  0017D0  D106               	goto	l96
  3462  0017D2  D000               	goto	l2681
  3463  0017D4                     l2681:
  3464                           
  3465                           ;doprnt.c: 434: return _npowers_[scl];
  3466  0017D4  5031               	movf	scale@scl,w,c
  3467  0017D6  0D03               	mullw	3
  3468  0017D8  0E29               	movlw	low __npowers_
  3469  0017DA  24F3               	addwf	prodl,w,c
  3470  0017DC  6EF6               	movwf	tblptrl,c
  3471  0017DE  0E06               	movlw	high __npowers_
  3472  0017E0  D0F2               	goto	L7
  3473  0017E2  D0FD               	goto	l96
  3474  0017E4                     l2685:
  3475                           
  3476                           ;doprnt.c: 435: }
  3477                           ;doprnt.c: 436: if(scl>=110)
  3478  0017E4  5031               	movf	scale@scl,w,c
  3479  0017E6  0A80               	xorlw	128
  3480  0017E8  0F12               	addlw	-238
  3481  0017EA  A0D8               	btfss	status,0,c
  3482  0017EC  D08D               	goto	l2693
  3483                           
  3484                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3485  0017EE  0E00               	movlw	0
  3486  0017F0  6E12               	movwf	___wmul@multiplicand+1,c
  3487  0017F2  0E03               	movlw	3
  3488  0017F4  6E11               	movwf	___wmul@multiplicand,c
  3489  0017F6  0E00               	movlw	0
  3490  0017F8  6E0A               	movwf	___awdiv@divisor+1,c
  3491  0017FA  0E0A               	movlw	10
  3492  0017FC  6E09               	movwf	___awdiv@divisor,c
  3493  0017FE  0E00               	movlw	0
  3494  001800  6E04               	movwf	___awmod@divisor+1,c
  3495  001802  0E64               	movlw	100
  3496  001804  6E03               	movwf	___awmod@divisor,c
  3497  001806  5031               	movf	scale@scl,w,c
  3498  001808  6E01               	movwf	___awmod@dividend,c
  3499  00180A  6A02               	clrf	___awmod@dividend+1,c
  3500  00180C  BE01               	btfsc	___awmod@dividend,7,c
  3501  00180E  0602               	decf	___awmod@dividend+1,f,c
  3502  001810  EC8F  F013         	call	___awmod	;wreg free
  3503  001814  C001  F007         	movff	?___awmod,___awdiv@dividend
  3504  001818  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3505  00181C  ECB3  F012         	call	___awdiv	;wreg free
  3506  001820  0E09               	movlw	9
  3507  001822  2407               	addwf	?___awdiv,w,c
  3508  001824  6E0F               	movwf	___wmul@multiplier,c
  3509  001826  0E00               	movlw	0
  3510  001828  2008               	addwfc	?___awdiv+1,w,c
  3511  00182A  6E10               	movwf	___wmul@multiplier+1,c
  3512  00182C  EC46  F015         	call	___wmul	;wreg free
  3513  001830  0E50               	movlw	low __powers_
  3514  001832  240F               	addwf	?___wmul,w,c
  3515  001834  6EF6               	movwf	tblptrl,c
  3516  001836  0E06               	movlw	high __powers_
  3517  001838  2010               	addwfc	?___wmul+1,w,c
  3518  00183A  6EF7               	movwf	tblptrh,c
  3519  00183C                     	if	0	;There are less than 3 active tblptr bytes
  3520  00183C                     	endif
  3521  00183C  0009               	tblrd		*+
  3522  00183E  CFF5 F01F          	movff	tablat,___ftmul@f2
  3523  001842  0009               	tblrd		*+
  3524  001844  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3525  001848  000A               	tblrd		*-
  3526  00184A  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3527  00184E  0E00               	movlw	0
  3528  001850  6E0A               	movwf	___awdiv@divisor+1,c
  3529  001852  0E64               	movlw	100
  3530  001854  6E09               	movwf	___awdiv@divisor,c
  3531  001856  5031               	movf	scale@scl,w,c
  3532  001858  6E07               	movwf	___awdiv@dividend,c
  3533  00185A  6A08               	clrf	___awdiv@dividend+1,c
  3534  00185C  BE07               	btfsc	___awdiv@dividend,7,c
  3535  00185E  0608               	decf	___awdiv@dividend+1,f,c
  3536  001860  ECB3  F012         	call	___awdiv	;wreg free
  3537  001864  0E12               	movlw	18
  3538  001866  2407               	addwf	?___awdiv,w,c
  3539  001868  6E0F               	movwf	___wmul@multiplier,c
  3540  00186A  0E00               	movlw	0
  3541  00186C  2008               	addwfc	?___awdiv+1,w,c
  3542  00186E  6E10               	movwf	___wmul@multiplier+1,c
  3543  001870  0E00               	movlw	0
  3544  001872  6E12               	movwf	___wmul@multiplicand+1,c
  3545  001874  0E03               	movlw	3
  3546  001876  6E11               	movwf	___wmul@multiplicand,c
  3547  001878  EC46  F015         	call	___wmul	;wreg free
  3548  00187C  0E50               	movlw	low __powers_
  3549  00187E  240F               	addwf	?___wmul,w,c
  3550  001880  6EF6               	movwf	tblptrl,c
  3551  001882  0E06               	movlw	high __powers_
  3552  001884  2010               	addwfc	?___wmul+1,w,c
  3553  001886  6EF7               	movwf	tblptrh,c
  3554  001888                     	if	0	;There are less than 3 active tblptr bytes
  3555  001888                     	endif
  3556  001888  0009               	tblrd		*+
  3557  00188A  CFF5 F01C          	movff	tablat,___ftmul@f1
  3558  00188E  0009               	tblrd		*+
  3559  001890  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3560  001894  000A               	tblrd		*-
  3561  001896  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3562  00189A  EC95  F010         	call	___ftmul	;wreg free
  3563  00189E  C01C  F02E         	movff	?___ftmul,_scale$1397
  3564  0018A2  C01D  F02F         	movff	?___ftmul+1,_scale$1397+1
  3565  0018A6  C01E  F030         	movff	?___ftmul+2,_scale$1397+2
  3566                           
  3567                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3568  0018AA  C02E  F01C         	movff	_scale$1397,___ftmul@f1
  3569  0018AE  C02F  F01D         	movff	_scale$1397+1,___ftmul@f1+1
  3570  0018B2  C030  F01E         	movff	_scale$1397+2,___ftmul@f1+2
  3571  0018B6  0E00               	movlw	0
  3572  0018B8  6E12               	movwf	___wmul@multiplicand+1,c
  3573  0018BA  0E03               	movlw	3
  3574  0018BC  6E11               	movwf	___wmul@multiplicand,c
  3575  0018BE  0E00               	movlw	0
  3576  0018C0  6E04               	movwf	___awmod@divisor+1,c
  3577  0018C2  0E0A               	movlw	10
  3578  0018C4  6E03               	movwf	___awmod@divisor,c
  3579  0018C6  5031               	movf	scale@scl,w,c
  3580  0018C8  6E01               	movwf	___awmod@dividend,c
  3581  0018CA  6A02               	clrf	___awmod@dividend+1,c
  3582  0018CC  BE01               	btfsc	___awmod@dividend,7,c
  3583  0018CE  0602               	decf	___awmod@dividend+1,f,c
  3584  0018D0  EC8F  F013         	call	___awmod	;wreg free
  3585  0018D4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3586  0018D8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3587  0018DC  EC46  F015         	call	___wmul	;wreg free
  3588  0018E0  0E50               	movlw	low __powers_
  3589  0018E2  240F               	addwf	?___wmul,w,c
  3590  0018E4  6EF6               	movwf	tblptrl,c
  3591  0018E6  0E06               	movlw	high __powers_
  3592  0018E8  2010               	addwfc	?___wmul+1,w,c
  3593  0018EA  6EF7               	movwf	tblptrh,c
  3594  0018EC                     	if	0	;There are less than 3 active tblptr bytes
  3595  0018EC                     	endif
  3596  0018EC  0009               	tblrd		*+
  3597  0018EE  CFF5 F01F          	movff	tablat,___ftmul@f2
  3598  0018F2  0009               	tblrd		*+
  3599  0018F4  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3600  0018F8  000A               	tblrd		*-
  3601  0018FA  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3602  0018FE  EC95  F010         	call	___ftmul	;wreg free
  3603  001902  D053               	goto	L8
  3604  001904  D06C               	goto	l96
  3605  001906  D059               	goto	l2699
  3606  001908                     l2693:
  3607                           
  3608                           ;doprnt.c: 438: else if(scl > 10)
  3609  001908  5031               	movf	scale@scl,w,c
  3610  00190A  0A80               	xorlw	128
  3611  00190C  0F75               	addlw	-139
  3612  00190E  A0D8               	btfss	status,0,c
  3613  001910  D054               	goto	l2699
  3614                           
  3615                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3616  001912  0E00               	movlw	0
  3617  001914  6E0A               	movwf	___awdiv@divisor+1,c
  3618  001916  0E0A               	movlw	10
  3619  001918  6E09               	movwf	___awdiv@divisor,c
  3620  00191A  5031               	movf	scale@scl,w,c
  3621  00191C  6E07               	movwf	___awdiv@dividend,c
  3622  00191E  6A08               	clrf	___awdiv@dividend+1,c
  3623  001920  BE07               	btfsc	___awdiv@dividend,7,c
  3624  001922  0608               	decf	___awdiv@dividend+1,f,c
  3625  001924  ECB3  F012         	call	___awdiv	;wreg free
  3626  001928  0E09               	movlw	9
  3627  00192A  2407               	addwf	?___awdiv,w,c
  3628  00192C  6E0F               	movwf	___wmul@multiplier,c
  3629  00192E  0E00               	movlw	0
  3630  001930  2008               	addwfc	?___awdiv+1,w,c
  3631  001932  6E10               	movwf	___wmul@multiplier+1,c
  3632  001934  0E00               	movlw	0
  3633  001936  6E12               	movwf	___wmul@multiplicand+1,c
  3634  001938  0E03               	movlw	3
  3635  00193A  6E11               	movwf	___wmul@multiplicand,c
  3636  00193C  EC46  F015         	call	___wmul	;wreg free
  3637  001940  0E50               	movlw	low __powers_
  3638  001942  240F               	addwf	?___wmul,w,c
  3639  001944  6EF6               	movwf	tblptrl,c
  3640  001946  0E06               	movlw	high __powers_
  3641  001948  2010               	addwfc	?___wmul+1,w,c
  3642  00194A  6EF7               	movwf	tblptrh,c
  3643  00194C                     	if	0	;There are less than 3 active tblptr bytes
  3644  00194C                     	endif
  3645  00194C  0009               	tblrd		*+
  3646  00194E  CFF5 F01C          	movff	tablat,___ftmul@f1
  3647  001952  0009               	tblrd		*+
  3648  001954  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3649  001958  000A               	tblrd		*-
  3650  00195A  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3651  00195E  0E00               	movlw	0
  3652  001960  6E12               	movwf	___wmul@multiplicand+1,c
  3653  001962  0E03               	movlw	3
  3654  001964  6E11               	movwf	___wmul@multiplicand,c
  3655  001966  0E00               	movlw	0
  3656  001968  6E04               	movwf	___awmod@divisor+1,c
  3657  00196A  0E0A               	movlw	10
  3658  00196C  6E03               	movwf	___awmod@divisor,c
  3659  00196E  5031               	movf	scale@scl,w,c
  3660  001970  6E01               	movwf	___awmod@dividend,c
  3661  001972  6A02               	clrf	___awmod@dividend+1,c
  3662  001974  BE01               	btfsc	___awmod@dividend,7,c
  3663  001976  0602               	decf	___awmod@dividend+1,f,c
  3664  001978  EC8F  F013         	call	___awmod	;wreg free
  3665  00197C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3666  001980  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3667  001984  EC46  F015         	call	___wmul	;wreg free
  3668  001988  0E50               	movlw	low __powers_
  3669  00198A  240F               	addwf	?___wmul,w,c
  3670  00198C  6EF6               	movwf	tblptrl,c
  3671  00198E  0E06               	movlw	high __powers_
  3672  001990  2010               	addwfc	?___wmul+1,w,c
  3673  001992  6EF7               	movwf	tblptrh,c
  3674  001994                     	if	0	;There are less than 3 active tblptr bytes
  3675  001994                     	endif
  3676  001994  0009               	tblrd		*+
  3677  001996  CFF5 F01F          	movff	tablat,___ftmul@f2
  3678  00199A  0009               	tblrd		*+
  3679  00199C  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3680  0019A0  000A               	tblrd		*-
  3681  0019A2  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3682  0019A6  EC95  F010         	call	___ftmul	;wreg free
  3683  0019AA                     L8:
  3684  0019AA  C01C  F02B         	movff	?___ftmul,?_scale
  3685  0019AE  C01D  F02C         	movff	?___ftmul+1,?_scale+1
  3686  0019B2  C01E  F02D         	movff	?___ftmul+2,?_scale+2
  3687  0019B6  D013               	goto	l96
  3688  0019B8  D000               	goto	l2699
  3689  0019BA                     l2699:
  3690                           
  3691                           ;doprnt.c: 440: return _powers_[scl];
  3692  0019BA  5031               	movf	scale@scl,w,c
  3693  0019BC  0D03               	mullw	3
  3694  0019BE  0E50               	movlw	low __powers_
  3695  0019C0  24F3               	addwf	prodl,w,c
  3696  0019C2  6EF6               	movwf	tblptrl,c
  3697  0019C4  0E06               	movlw	high __powers_
  3698  0019C6                     L7:
  3699  0019C6  20F4               	addwfc	prodh,w,c
  3700  0019C8  6EF7               	movwf	tblptrh,c
  3701  0019CA                     	if	0	;There are less than 3 active tblptr bytes
  3702  0019CA                     	endif
  3703  0019CA  0009               	tblrd		*+
  3704  0019CC  CFF5 F02B          	movff	tablat,?_scale
  3705  0019D0  0009               	tblrd		*+
  3706  0019D2  CFF5 F02C          	movff	tablat,?_scale+1
  3707  0019D6  000A               	tblrd		*-
  3708  0019D8  CFF5 F02D          	movff	tablat,?_scale+2
  3709  0019DC  D000               	goto	l96
  3710  0019DE                     l96:
  3711  0019DE  0012               	return		;funcret
  3712  0019E0                     __end_of_scale:
  3713                           	opt stack 0
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           postinc0	equ	0xFEE
  3721                           wreg	equ	0xFE8
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8
  3728                           
  3729 ;; *************** function _isdigit *****************
  3730 ;; Defined at:
  3731 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  c               1    wreg     unsigned char 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;  c               1    2[COMRAM] unsigned char 
  3736 ;; Return value:  Size  Location     Type
  3737 ;;		None               void
  3738 ;; Registers used:
  3739 ;;		wreg, status,2, status,0
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3745 ;;      Params:         0       0       0       0       0       0       0
  3746 ;;      Locals:         2       0       0       0       0       0       0
  3747 ;;      Temps:          1       0       0       0       0       0       0
  3748 ;;      Totals:         3       0       0       0       0       0       0
  3749 ;;Total ram usage:        3 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_sprintf
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text3
  3759  002AFE                     __ptext3:
  3760                           	opt stack 0
  3761  002AFE                     _isdigit:
  3762                           	opt stack 29
  3763                           
  3764                           ;incstack = 0
  3765                           ;isdigit@c stored from wreg
  3766  002AFE  6E03               	movwf	isdigit@c,c
  3767  002B00  0E00               	movlw	0
  3768  002B02  6E02               	movwf	_isdigit$1164,c
  3769  002B04  0E3A               	movlw	58
  3770  002B06  6003               	cpfslt	isdigit@c,c
  3771  002B08  D006               	goto	l2711
  3772  002B0A  0E2F               	movlw	47
  3773  002B0C  6403               	cpfsgt	isdigit@c,c
  3774  002B0E  D003               	goto	l2711
  3775  002B10  0E01               	movlw	1
  3776  002B12  6E02               	movwf	_isdigit$1164,c
  3777  002B14  D000               	goto	l2711
  3778  002B16                     l2711:
  3779  002B16  C002  F001         	movff	_isdigit$1164,??_isdigit
  3780  002B1A  3001               	rrcf	??_isdigit,w,c
  3781  002B1C  D000               	goto	l834
  3782  002B1E                     l834:
  3783  002B1E  0012               	return		;funcret
  3784  002B20                     __end_of_isdigit:
  3785                           	opt stack 0
  3786                           tblptru	equ	0xFF8
  3787                           tblptrh	equ	0xFF7
  3788                           tblptrl	equ	0xFF6
  3789                           tablat	equ	0xFF5
  3790                           prodh	equ	0xFF4
  3791                           prodl	equ	0xFF3
  3792                           postinc0	equ	0xFEE
  3793                           wreg	equ	0xFE8
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _fround *****************
  3802 ;; Defined at:
  3803 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  prec            1    wreg     unsigned char 
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;  prec            1   51[COMRAM] unsigned char 
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  3   42[COMRAM] unsigned char 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3817 ;;      Params:         3       0       0       0       0       0       0
  3818 ;;      Locals:         7       0       0       0       0       0       0
  3819 ;;      Temps:          0       0       0       0       0       0       0
  3820 ;;      Totals:        10       0       0       0       0       0       0
  3821 ;;Total ram usage:       10 bytes
  3822 ;; Hardware stack levels used:    1
  3823 ;; Hardware stack levels required when called:    2
  3824 ;; This function calls:
  3825 ;;		___awdiv
  3826 ;;		___awmod
  3827 ;;		___ftmul
  3828 ;;		___wmul
  3829 ;; This function is called by:
  3830 ;;		_sprintf
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text4
  3835  0019E0                     __ptext4:
  3836                           	opt stack 0
  3837  0019E0                     _fround:
  3838                           	opt stack 27
  3839                           
  3840                           ;incstack = 0
  3841                           ;fround@prec stored from wreg
  3842  0019E0  6E34               	movwf	fround@prec,c
  3843                           
  3844                           ;doprnt.c: 413: if(prec>=110)
  3845  0019E2  0E6D               	movlw	109
  3846  0019E4  6434               	cpfsgt	fround@prec,c
  3847  0019E6  D09B               	goto	l2653
  3848                           
  3849                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3850  0019E8  0E00               	movlw	0
  3851  0019EA  6E12               	movwf	___wmul@multiplicand+1,c
  3852  0019EC  0E03               	movlw	3
  3853  0019EE  6E11               	movwf	___wmul@multiplicand,c
  3854  0019F0  0E00               	movlw	0
  3855  0019F2  6E0A               	movwf	___awdiv@divisor+1,c
  3856  0019F4  0E0A               	movlw	10
  3857  0019F6  6E09               	movwf	___awdiv@divisor,c
  3858  0019F8  0E00               	movlw	0
  3859  0019FA  6E04               	movwf	___awmod@divisor+1,c
  3860  0019FC  0E64               	movlw	100
  3861  0019FE  6E03               	movwf	___awmod@divisor,c
  3862  001A00  C034  F001         	movff	fround@prec,___awmod@dividend
  3863  001A04  6A02               	clrf	___awmod@dividend+1,c
  3864  001A06  EC8F  F013         	call	___awmod	;wreg free
  3865  001A0A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3866  001A0E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3867  001A12  ECB3  F012         	call	___awdiv	;wreg free
  3868  001A16  0E09               	movlw	9
  3869  001A18  2407               	addwf	?___awdiv,w,c
  3870  001A1A  6E0F               	movwf	___wmul@multiplier,c
  3871  001A1C  0E00               	movlw	0
  3872  001A1E  2008               	addwfc	?___awdiv+1,w,c
  3873  001A20  6E10               	movwf	___wmul@multiplier+1,c
  3874  001A22  EC46  F015         	call	___wmul	;wreg free
  3875  001A26  0E29               	movlw	low __npowers_
  3876  001A28  240F               	addwf	?___wmul,w,c
  3877  001A2A  6EF6               	movwf	tblptrl,c
  3878  001A2C  0E06               	movlw	high __npowers_
  3879  001A2E  2010               	addwfc	?___wmul+1,w,c
  3880  001A30  6EF7               	movwf	tblptrh,c
  3881  001A32                     	if	0	;There are less than 3 active tblptr bytes
  3882  001A32                     	endif
  3883  001A32  0009               	tblrd		*+
  3884  001A34  CFF5 F01F          	movff	tablat,___ftmul@f2
  3885  001A38  0009               	tblrd		*+
  3886  001A3A  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3887  001A3E  000A               	tblrd		*-
  3888  001A40  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3889  001A44  0E00               	movlw	0
  3890  001A46  6E0A               	movwf	___awdiv@divisor+1,c
  3891  001A48  0E64               	movlw	100
  3892  001A4A  6E09               	movwf	___awdiv@divisor,c
  3893  001A4C  C034  F007         	movff	fround@prec,___awdiv@dividend
  3894  001A50  6A08               	clrf	___awdiv@dividend+1,c
  3895  001A52  ECB3  F012         	call	___awdiv	;wreg free
  3896  001A56  0E12               	movlw	18
  3897  001A58  2407               	addwf	?___awdiv,w,c
  3898  001A5A  6E0F               	movwf	___wmul@multiplier,c
  3899  001A5C  0E00               	movlw	0
  3900  001A5E  2008               	addwfc	?___awdiv+1,w,c
  3901  001A60  6E10               	movwf	___wmul@multiplier+1,c
  3902  001A62  0E00               	movlw	0
  3903  001A64  6E12               	movwf	___wmul@multiplicand+1,c
  3904  001A66  0E03               	movlw	3
  3905  001A68  6E11               	movwf	___wmul@multiplicand,c
  3906  001A6A  EC46  F015         	call	___wmul	;wreg free
  3907  001A6E  0E29               	movlw	low __npowers_
  3908  001A70  240F               	addwf	?___wmul,w,c
  3909  001A72  6EF6               	movwf	tblptrl,c
  3910  001A74  0E06               	movlw	high __npowers_
  3911  001A76  2010               	addwfc	?___wmul+1,w,c
  3912  001A78  6EF7               	movwf	tblptrh,c
  3913  001A7A                     	if	0	;There are less than 3 active tblptr bytes
  3914  001A7A                     	endif
  3915  001A7A  0009               	tblrd		*+
  3916  001A7C  CFF5 F01C          	movff	tablat,___ftmul@f1
  3917  001A80  0009               	tblrd		*+
  3918  001A82  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  3919  001A86  000A               	tblrd		*-
  3920  001A88  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  3921  001A8C  EC95  F010         	call	___ftmul	;wreg free
  3922  001A90  C01C  F031         	movff	?___ftmul,_fround$1395
  3923  001A94  C01D  F032         	movff	?___ftmul+1,_fround$1395+1
  3924  001A98  C01E  F033         	movff	?___ftmul+2,_fround$1395+2
  3925                           
  3926                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3927  001A9C  0E00               	movlw	0
  3928  001A9E  6E12               	movwf	___wmul@multiplicand+1,c
  3929  001AA0  0E03               	movlw	3
  3930  001AA2  6E11               	movwf	___wmul@multiplicand,c
  3931  001AA4  0E00               	movlw	0
  3932  001AA6  6E04               	movwf	___awmod@divisor+1,c
  3933  001AA8  0E0A               	movlw	10
  3934  001AAA  6E03               	movwf	___awmod@divisor,c
  3935  001AAC  C034  F001         	movff	fround@prec,___awmod@dividend
  3936  001AB0  6A02               	clrf	___awmod@dividend+1,c
  3937  001AB2  EC8F  F013         	call	___awmod	;wreg free
  3938  001AB6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3939  001ABA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3940  001ABE  EC46  F015         	call	___wmul	;wreg free
  3941  001AC2  0E29               	movlw	low __npowers_
  3942  001AC4  240F               	addwf	?___wmul,w,c
  3943  001AC6  6EF6               	movwf	tblptrl,c
  3944  001AC8  0E06               	movlw	high __npowers_
  3945  001ACA  2010               	addwfc	?___wmul+1,w,c
  3946  001ACC  6EF7               	movwf	tblptrh,c
  3947  001ACE                     	if	0	;There are less than 3 active tblptr bytes
  3948  001ACE                     	endif
  3949  001ACE  0009               	tblrd		*+
  3950  001AD0  CFF5 F01F          	movff	tablat,___ftmul@f2
  3951  001AD4  0009               	tblrd		*+
  3952  001AD6  CFF5 F020          	movff	tablat,___ftmul@f2+1
  3953  001ADA  000A               	tblrd		*-
  3954  001ADC  CFF5 F021          	movff	tablat,___ftmul@f2+2
  3955  001AE0  C031  F01C         	movff	_fround$1395,___ftmul@f1
  3956  001AE4  C032  F01D         	movff	_fround$1395+1,___ftmul@f1+1
  3957  001AE8  C033  F01E         	movff	_fround$1395+2,___ftmul@f1+2
  3958  001AEC  EC95  F010         	call	___ftmul	;wreg free
  3959  001AF0  C01C  F02E         	movff	?___ftmul,_fround$1396
  3960  001AF4  C01D  F02F         	movff	?___ftmul+1,_fround$1396+1
  3961  001AF8  C01E  F030         	movff	?___ftmul+2,_fround$1396+2
  3962                           
  3963                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3964  001AFC  C02E  F01C         	movff	_fround$1396,___ftmul@f1
  3965  001B00  C02F  F01D         	movff	_fround$1396+1,___ftmul@f1+1
  3966  001B04  C030  F01E         	movff	_fround$1396+2,___ftmul@f1+2
  3967  001B08  0E00               	movlw	0
  3968  001B0A  6E1F               	movwf	___ftmul@f2,c
  3969  001B0C  0E00               	movlw	0
  3970  001B0E  6E20               	movwf	___ftmul@f2+1,c
  3971  001B10  0E3F               	movlw	63
  3972  001B12  6E21               	movwf	___ftmul@f2+2,c
  3973  001B14  EC95  F010         	call	___ftmul	;wreg free
  3974  001B18  D07D               	goto	L10
  3975  001B1A  D083               	goto	l89
  3976  001B1C  D062               	goto	l2661
  3977  001B1E                     l2653:
  3978                           
  3979                           ;doprnt.c: 415: else if(prec > 10)
  3980  001B1E  0E0A               	movlw	10
  3981  001B20  6434               	cpfsgt	fround@prec,c
  3982  001B22  D05F               	goto	l2661
  3983                           
  3984                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3985  001B24  0E00               	movlw	0
  3986  001B26  6E12               	movwf	___wmul@multiplicand+1,c
  3987  001B28  0E03               	movlw	3
  3988  001B2A  6E11               	movwf	___wmul@multiplicand,c
  3989  001B2C  0E00               	movlw	0
  3990  001B2E  6E04               	movwf	___awmod@divisor+1,c
  3991  001B30  0E0A               	movlw	10
  3992  001B32  6E03               	movwf	___awmod@divisor,c
  3993  001B34  C034  F001         	movff	fround@prec,___awmod@dividend
  3994  001B38  6A02               	clrf	___awmod@dividend+1,c
  3995  001B3A  EC8F  F013         	call	___awmod	;wreg free
  3996  001B3E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3997  001B42  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3998  001B46  EC46  F015         	call	___wmul	;wreg free
  3999  001B4A  0E29               	movlw	low __npowers_
  4000  001B4C  240F               	addwf	?___wmul,w,c
  4001  001B4E  6EF6               	movwf	tblptrl,c
  4002  001B50  0E06               	movlw	high __npowers_
  4003  001B52  2010               	addwfc	?___wmul+1,w,c
  4004  001B54  6EF7               	movwf	tblptrh,c
  4005  001B56                     	if	0	;There are less than 3 active tblptr bytes
  4006  001B56                     	endif
  4007  001B56  0009               	tblrd		*+
  4008  001B58  CFF5 F01F          	movff	tablat,___ftmul@f2
  4009  001B5C  0009               	tblrd		*+
  4010  001B5E  CFF5 F020          	movff	tablat,___ftmul@f2+1
  4011  001B62  000A               	tblrd		*-
  4012  001B64  CFF5 F021          	movff	tablat,___ftmul@f2+2
  4013  001B68  0E00               	movlw	0
  4014  001B6A  6E0A               	movwf	___awdiv@divisor+1,c
  4015  001B6C  0E0A               	movlw	10
  4016  001B6E  6E09               	movwf	___awdiv@divisor,c
  4017  001B70  C034  F007         	movff	fround@prec,___awdiv@dividend
  4018  001B74  6A08               	clrf	___awdiv@dividend+1,c
  4019  001B76  ECB3  F012         	call	___awdiv	;wreg free
  4020  001B7A  0E09               	movlw	9
  4021  001B7C  2407               	addwf	?___awdiv,w,c
  4022  001B7E  6E0F               	movwf	___wmul@multiplier,c
  4023  001B80  0E00               	movlw	0
  4024  001B82  2008               	addwfc	?___awdiv+1,w,c
  4025  001B84  6E10               	movwf	___wmul@multiplier+1,c
  4026  001B86  0E00               	movlw	0
  4027  001B88  6E12               	movwf	___wmul@multiplicand+1,c
  4028  001B8A  0E03               	movlw	3
  4029  001B8C  6E11               	movwf	___wmul@multiplicand,c
  4030  001B8E  EC46  F015         	call	___wmul	;wreg free
  4031  001B92  0E29               	movlw	low __npowers_
  4032  001B94  240F               	addwf	?___wmul,w,c
  4033  001B96  6EF6               	movwf	tblptrl,c
  4034  001B98  0E06               	movlw	high __npowers_
  4035  001B9A  2010               	addwfc	?___wmul+1,w,c
  4036  001B9C  6EF7               	movwf	tblptrh,c
  4037  001B9E                     	if	0	;There are less than 3 active tblptr bytes
  4038  001B9E                     	endif
  4039  001B9E  0009               	tblrd		*+
  4040  001BA0  CFF5 F01C          	movff	tablat,___ftmul@f1
  4041  001BA4  0009               	tblrd		*+
  4042  001BA6  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  4043  001BAA  000A               	tblrd		*-
  4044  001BAC  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  4045  001BB0  EC95  F010         	call	___ftmul	;wreg free
  4046  001BB4  C01C  F031         	movff	?___ftmul,_fround$1395
  4047  001BB8  C01D  F032         	movff	?___ftmul+1,_fround$1395+1
  4048  001BBC  C01E  F033         	movff	?___ftmul+2,_fround$1395+2
  4049                           
  4050                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4051  001BC0  C031  F01C         	movff	_fround$1395,___ftmul@f1
  4052  001BC4  C032  F01D         	movff	_fround$1395+1,___ftmul@f1+1
  4053  001BC8  C033  F01E         	movff	_fround$1395+2,___ftmul@f1+2
  4054  001BCC  0E00               	movlw	0
  4055  001BCE  6E1F               	movwf	___ftmul@f2,c
  4056  001BD0  0E00               	movlw	0
  4057  001BD2  6E20               	movwf	___ftmul@f2+1,c
  4058  001BD4  0E3F               	movlw	63
  4059  001BD6  6E21               	movwf	___ftmul@f2+2,c
  4060  001BD8  EC95  F010         	call	___ftmul	;wreg free
  4061  001BDC  D01B               	goto	L10
  4062  001BDE  D021               	goto	l89
  4063  001BE0  D000               	goto	l2661
  4064  001BE2                     l2661:
  4065                           
  4066                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4067  001BE2  5034               	movf	fround@prec,w,c
  4068  001BE4  0D03               	mullw	3
  4069  001BE6  0E29               	movlw	low __npowers_
  4070  001BE8  24F3               	addwf	prodl,w,c
  4071  001BEA  6EF6               	movwf	tblptrl,c
  4072  001BEC  0E06               	movlw	high __npowers_
  4073  001BEE  20F4               	addwfc	prodh,w,c
  4074  001BF0  6EF7               	movwf	tblptrh,c
  4075  001BF2                     	if	0	;There are less than 3 active tblptr bytes
  4076  001BF2                     	endif
  4077  001BF2  0009               	tblrd		*+
  4078  001BF4  CFF5 F01C          	movff	tablat,___ftmul@f1
  4079  001BF8  0009               	tblrd		*+
  4080  001BFA  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  4081  001BFE  000A               	tblrd		*-
  4082  001C00  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  4083  001C04  0E00               	movlw	0
  4084  001C06  6E1F               	movwf	___ftmul@f2,c
  4085  001C08  0E00               	movlw	0
  4086  001C0A  6E20               	movwf	___ftmul@f2+1,c
  4087  001C0C  0E3F               	movlw	63
  4088  001C0E  6E21               	movwf	___ftmul@f2+2,c
  4089  001C10  EC95  F010         	call	___ftmul	;wreg free
  4090  001C14                     L10:
  4091  001C14  C01C  F02B         	movff	?___ftmul,?_fround
  4092  001C18  C01D  F02C         	movff	?___ftmul+1,?_fround+1
  4093  001C1C  C01E  F02D         	movff	?___ftmul+2,?_fround+2
  4094  001C20  D000               	goto	l89
  4095  001C22                     l89:
  4096  001C22  0012               	return		;funcret
  4097  001C24                     __end_of_fround:
  4098                           	opt stack 0
  4099                           tblptru	equ	0xFF8
  4100                           tblptrh	equ	0xFF7
  4101                           tblptrl	equ	0xFF6
  4102                           tablat	equ	0xFF5
  4103                           prodh	equ	0xFF4
  4104                           prodl	equ	0xFF3
  4105                           postinc0	equ	0xFEE
  4106                           wreg	equ	0xFE8
  4107                           indf2	equ	0xFDF
  4108                           postinc2	equ	0xFDE
  4109                           postdec2	equ	0xFDD
  4110                           fsr2h	equ	0xFDA
  4111                           fsr2l	equ	0xFD9
  4112                           status	equ	0xFD8
  4113                           
  4114 ;; *************** function ___wmul *****************
  4115 ;; Defined at:
  4116 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  multiplier      2   14[COMRAM] unsigned int 
  4119 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  product         2   18[COMRAM] unsigned int 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  2   14[COMRAM] unsigned int 
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0, prodl, prodh
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4131 ;;      Params:         4       0       0       0       0       0       0
  4132 ;;      Locals:         2       0       0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0
  4134 ;;      Totals:         6       0       0       0       0       0       0
  4135 ;;Total ram usage:        6 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_fround
  4141 ;;		_scale
  4142 ;;		_sprintf
  4143 ;; This function uses a non-reentrant model
  4144 ;;
  4145                           
  4146                           	psect	text5
  4147  002A8C                     __ptext5:
  4148                           	opt stack 0
  4149  002A8C                     ___wmul:
  4150                           	opt stack 28
  4151                           
  4152                           ;incstack = 0
  4153  002A8C  500F               	movf	___wmul@multiplier,w,c
  4154  002A8E  0211               	mulwf	___wmul@multiplicand,c
  4155  002A90  CFF3 F013          	movff	prodl,___wmul@product
  4156  002A94  CFF4 F014          	movff	prodh,___wmul@product+1
  4157  002A98  500F               	movf	___wmul@multiplier,w,c
  4158  002A9A  0212               	mulwf	___wmul@multiplicand+1,c
  4159  002A9C  50F3               	movf	prodl,w,c
  4160  002A9E  2614               	addwf	___wmul@product+1,f,c
  4161  002AA0  5010               	movf	___wmul@multiplier+1,w,c
  4162  002AA2  0211               	mulwf	___wmul@multiplicand,c
  4163  002AA4  50F3               	movf	prodl,w,c
  4164  002AA6  2614               	addwf	___wmul@product+1,f,c
  4165  002AA8  C013  F00F         	movff	___wmul@product,?___wmul
  4166  002AAC  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4167  002AB0  D000               	goto	l348
  4168  002AB2                     l348:
  4169  002AB2  0012               	return		;funcret
  4170  002AB4                     __end_of___wmul:
  4171                           	opt stack 0
  4172                           tblptru	equ	0xFF8
  4173                           tblptrh	equ	0xFF7
  4174                           tblptrl	equ	0xFF6
  4175                           tablat	equ	0xFF5
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           indf2	equ	0xFDF
  4181                           postinc2	equ	0xFDE
  4182                           postdec2	equ	0xFDD
  4183                           fsr2h	equ	0xFDA
  4184                           fsr2l	equ	0xFD9
  4185                           status	equ	0xFD8
  4186                           
  4187 ;; *************** function ___ftmul *****************
  4188 ;; Defined at:
  4189 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4190 ;; Parameters:    Size  Location     Type
  4191 ;;  f1              3   27[COMRAM] float 
  4192 ;;  f2              3   30[COMRAM] float 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  4195 ;;  sign            1   41[COMRAM] unsigned char 
  4196 ;;  cntr            1   40[COMRAM] unsigned char 
  4197 ;;  exp             1   36[COMRAM] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  3   27[COMRAM] float 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4207 ;;      Params:         6       0       0       0       0       0       0
  4208 ;;      Locals:         6       0       0       0       0       0       0
  4209 ;;      Temps:          3       0       0       0       0       0       0
  4210 ;;      Totals:        15       0       0       0       0       0       0
  4211 ;;Total ram usage:       15 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    1
  4214 ;; This function calls:
  4215 ;;		___ftpack
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;;		_fround
  4219 ;;		_scale
  4220 ;;		_sprintf
  4221 ;; This function uses a non-reentrant model
  4222 ;;
  4223                           
  4224                           	psect	text6
  4225  00212A                     __ptext6:
  4226                           	opt stack 0
  4227  00212A                     ___ftmul:
  4228                           	opt stack 27
  4229                           
  4230                           ;incstack = 0
  4231  00212A  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  4232  00212E  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4233  002130  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4234  002132  341D               	rlcf	___ftmul@f1+1,w,c
  4235  002134  3622               	rlcf	??___ftmul& (0+255),f,c
  4236  002136  E301               	bnc	u2071
  4237  002138  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4238  00213A                     u2071:
  4239  00213A  5022               	movf	??___ftmul,w,c
  4240  00213C  6E25               	movwf	___ftmul@exp,c
  4241  00213E  5025               	movf	___ftmul@exp,w,c
  4242  002140  A4D8               	btfss	status,2,c
  4243  002142  D002               	goto	l2455
  4244  002144  D00E               	goto	l2457
  4245  002146  D06C               	goto	l798
  4246  002148                     l2455:
  4247  002148  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  4248  00214C  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4249  00214E  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4250  002150  3420               	rlcf	___ftmul@f2+1,w,c
  4251  002152  3622               	rlcf	??___ftmul& (0+255),f,c
  4252  002154  E301               	bnc	u2091
  4253  002156  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4254  002158                     u2091:
  4255  002158  5022               	movf	??___ftmul,w,c
  4256  00215A  6E2A               	movwf	___ftmul@sign,c
  4257  00215C  502A               	movf	___ftmul@sign,w,c
  4258  00215E  A4D8               	btfss	status,2,c
  4259  002160  D007               	goto	l2461
  4260  002162                     l2457:
  4261  002162  0E00               	movlw	0
  4262  002164  6E1C               	movwf	?___ftmul,c
  4263  002166  0E00               	movlw	0
  4264  002168  6E1D               	movwf	?___ftmul+1,c
  4265  00216A  0E00               	movlw	0
  4266  00216C  6E1E               	movwf	?___ftmul+2,c
  4267  00216E  D058               	goto	l798
  4268  002170                     l2461:
  4269  002170  502A               	movf	___ftmul@sign,w,c
  4270  002172  0F7B               	addlw	123
  4271  002174  2625               	addwf	___ftmul@exp,f,c
  4272  002176  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  4273  00217A  5021               	movf	___ftmul@f2+2,w,c
  4274  00217C  1A2A               	xorwf	___ftmul@sign,f,c
  4275  00217E  0E80               	movlw	128
  4276  002180  162A               	andwf	___ftmul@sign,f,c
  4277  002182  8E1D               	bsf	___ftmul@f1+1,7,c
  4278  002184  8E20               	bsf	___ftmul@f2+1,7,c
  4279  002186  0EFF               	movlw	255
  4280  002188  161F               	andwf	___ftmul@f2,f,c
  4281  00218A  0EFF               	movlw	255
  4282  00218C  1620               	andwf	___ftmul@f2+1,f,c
  4283  00218E  0E00               	movlw	0
  4284  002190  1621               	andwf	___ftmul@f2+2,f,c
  4285  002192  0E00               	movlw	0
  4286  002194  6E26               	movwf	___ftmul@f3_as_product,c
  4287  002196  0E00               	movlw	0
  4288  002198  6E27               	movwf	___ftmul@f3_as_product+1,c
  4289  00219A  0E00               	movlw	0
  4290  00219C  6E28               	movwf	___ftmul@f3_as_product+2,c
  4291  00219E  0E07               	movlw	7
  4292  0021A0  6E29               	movwf	___ftmul@cntr,c
  4293  0021A2  D000               	goto	l2475
  4294  0021A4                     l2475:
  4295  0021A4  A01C               	btfss	___ftmul@f1,0,c
  4296  0021A6  D007               	goto	l2479
  4297  0021A8  501F               	movf	___ftmul@f2,w,c
  4298  0021AA  2626               	addwf	___ftmul@f3_as_product,f,c
  4299  0021AC  5020               	movf	___ftmul@f2+1,w,c
  4300  0021AE  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4301  0021B0  5021               	movf	___ftmul@f2+2,w,c
  4302  0021B2  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4303  0021B4  D000               	goto	l2479
  4304  0021B6                     l2479:
  4305  0021B6  90D8               	bcf	status,0,c
  4306  0021B8  321E               	rrcf	___ftmul@f1+2,f,c
  4307  0021BA  321D               	rrcf	___ftmul@f1+1,f,c
  4308  0021BC  321C               	rrcf	___ftmul@f1,f,c
  4309  0021BE  90D8               	bcf	status,0,c
  4310  0021C0  361F               	rlcf	___ftmul@f2,f,c
  4311  0021C2  3620               	rlcf	___ftmul@f2+1,f,c
  4312  0021C4  3621               	rlcf	___ftmul@f2+2,f,c
  4313  0021C6  2E29               	decfsz	___ftmul@cntr,f,c
  4314  0021C8  D7ED               	goto	l2475
  4315  0021CA  D000               	goto	l2483
  4316  0021CC                     l2483:
  4317  0021CC  0E09               	movlw	9
  4318  0021CE  6E29               	movwf	___ftmul@cntr,c
  4319  0021D0  D000               	goto	l2485
  4320  0021D2                     l2485:
  4321  0021D2  A01C               	btfss	___ftmul@f1,0,c
  4322  0021D4  D007               	goto	l2489
  4323  0021D6  501F               	movf	___ftmul@f2,w,c
  4324  0021D8  2626               	addwf	___ftmul@f3_as_product,f,c
  4325  0021DA  5020               	movf	___ftmul@f2+1,w,c
  4326  0021DC  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4327  0021DE  5021               	movf	___ftmul@f2+2,w,c
  4328  0021E0  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4329  0021E2  D000               	goto	l2489
  4330  0021E4                     l2489:
  4331  0021E4  90D8               	bcf	status,0,c
  4332  0021E6  321E               	rrcf	___ftmul@f1+2,f,c
  4333  0021E8  321D               	rrcf	___ftmul@f1+1,f,c
  4334  0021EA  321C               	rrcf	___ftmul@f1,f,c
  4335  0021EC  90D8               	bcf	status,0,c
  4336  0021EE  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  4337  0021F0  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  4338  0021F2  3226               	rrcf	___ftmul@f3_as_product,f,c
  4339  0021F4  2E29               	decfsz	___ftmul@cntr,f,c
  4340  0021F6  D7ED               	goto	l2485
  4341  0021F8  D000               	goto	l2493
  4342  0021FA                     l2493:
  4343  0021FA  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4344  0021FE  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4345  002202  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4346  002206  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  4347  00220A  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  4348  00220E  ECF5  F011         	call	___ftpack	;wreg free
  4349  002212  C001  F01C         	movff	?___ftpack,?___ftmul
  4350  002216  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  4351  00221A  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  4352  00221E  D000               	goto	l798
  4353  002220                     l798:
  4354  002220  0012               	return		;funcret
  4355  002222                     __end_of___ftmul:
  4356                           	opt stack 0
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           postinc0	equ	0xFEE
  4364                           wreg	equ	0xFE8
  4365                           indf2	equ	0xFDF
  4366                           postinc2	equ	0xFDE
  4367                           postdec2	equ	0xFDD
  4368                           fsr2h	equ	0xFDA
  4369                           fsr2l	equ	0xFD9
  4370                           status	equ	0xFD8
  4371                           
  4372 ;; *************** function ___awmod *****************
  4373 ;; Defined at:
  4374 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;  dividend        2    0[COMRAM] int 
  4377 ;;  divisor         2    2[COMRAM] int 
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;  sign            1    5[COMRAM] unsigned char 
  4380 ;;  counter         1    4[COMRAM] unsigned char 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  2    0[COMRAM] int 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4390 ;;      Params:         4       0       0       0       0       0       0
  4391 ;;      Locals:         2       0       0       0       0       0       0
  4392 ;;      Temps:          0       0       0       0       0       0       0
  4393 ;;      Totals:         6       0       0       0       0       0       0
  4394 ;;Total ram usage:        6 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; This function calls:
  4397 ;;		Nothing
  4398 ;; This function is called by:
  4399 ;;		_fround
  4400 ;;		_scale
  4401 ;;		_sprintf
  4402 ;; This function uses a non-reentrant model
  4403 ;;
  4404                           
  4405                           	psect	text7
  4406  00271E                     __ptext7:
  4407                           	opt stack 0
  4408  00271E                     ___awmod:
  4409                           	opt stack 28
  4410                           
  4411                           ;incstack = 0
  4412  00271E  0E00               	movlw	0
  4413  002720  6E06               	movwf	___awmod@sign,c
  4414  002722  AE02               	btfss	___awmod@dividend+1,7,c
  4415  002724  D007               	goto	l2549
  4416  002726  6C01               	negf	___awmod@dividend,c
  4417  002728  1E02               	comf	___awmod@dividend+1,f,c
  4418  00272A  B0D8               	btfsc	status,0,c
  4419  00272C  2A02               	incf	___awmod@dividend+1,f,c
  4420  00272E  0E01               	movlw	1
  4421  002730  6E06               	movwf	___awmod@sign,c
  4422  002732  D000               	goto	l2549
  4423  002734                     l2549:
  4424  002734  AE04               	btfss	___awmod@divisor+1,7,c
  4425  002736  D005               	goto	l2553
  4426  002738  6C03               	negf	___awmod@divisor,c
  4427  00273A  1E04               	comf	___awmod@divisor+1,f,c
  4428  00273C  B0D8               	btfsc	status,0,c
  4429  00273E  2A04               	incf	___awmod@divisor+1,f,c
  4430  002740  D000               	goto	l2553
  4431  002742                     l2553:
  4432  002742  5003               	movf	___awmod@divisor,w,c
  4433  002744  1004               	iorwf	___awmod@divisor+1,w,c
  4434  002746  B4D8               	btfsc	status,2,c
  4435  002748  D01D               	goto	l2569
  4436  00274A  0E01               	movlw	1
  4437  00274C  6E05               	movwf	___awmod@counter,c
  4438  00274E  D005               	goto	l2559
  4439  002750                     l2557:
  4440  002750  90D8               	bcf	status,0,c
  4441  002752  3603               	rlcf	___awmod@divisor,f,c
  4442  002754  3604               	rlcf	___awmod@divisor+1,f,c
  4443  002756  2A05               	incf	___awmod@counter,f,c
  4444  002758  D000               	goto	l2559
  4445  00275A                     l2559:
  4446  00275A  BE04               	btfsc	___awmod@divisor+1,7,c
  4447  00275C  D002               	goto	l2561
  4448  00275E  D7F8               	goto	l2557
  4449  002760  D000               	goto	l2561
  4450  002762                     l2561:
  4451  002762  5003               	movf	___awmod@divisor,w,c
  4452  002764  5C01               	subwf	___awmod@dividend,w,c
  4453  002766  5004               	movf	___awmod@divisor+1,w,c
  4454  002768  5802               	subwfb	___awmod@dividend+1,w,c
  4455  00276A  A0D8               	btfss	status,0,c
  4456  00276C  D005               	goto	l2565
  4457  00276E  5003               	movf	___awmod@divisor,w,c
  4458  002770  5E01               	subwf	___awmod@dividend,f,c
  4459  002772  5004               	movf	___awmod@divisor+1,w,c
  4460  002774  5A02               	subwfb	___awmod@dividend+1,f,c
  4461  002776  D000               	goto	l2565
  4462  002778                     l2565:
  4463  002778  90D8               	bcf	status,0,c
  4464  00277A  3204               	rrcf	___awmod@divisor+1,f,c
  4465  00277C  3203               	rrcf	___awmod@divisor,f,c
  4466  00277E  2E05               	decfsz	___awmod@counter,f,c
  4467  002780  D7F0               	goto	l2561
  4468  002782  D000               	goto	l2569
  4469  002784                     l2569:
  4470  002784  5006               	movf	___awmod@sign,w,c
  4471  002786  B4D8               	btfsc	status,2,c
  4472  002788  D005               	goto	l2573
  4473  00278A  6C01               	negf	___awmod@dividend,c
  4474  00278C  1E02               	comf	___awmod@dividend+1,f,c
  4475  00278E  B0D8               	btfsc	status,0,c
  4476  002790  2A02               	incf	___awmod@dividend+1,f,c
  4477  002792  D000               	goto	l2573
  4478  002794                     l2573:
  4479  002794  C001  F001         	movff	___awmod@dividend,?___awmod
  4480  002798  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4481  00279C  D000               	goto	l554
  4482  00279E                     l554:
  4483  00279E  0012               	return		;funcret
  4484  0027A0                     __end_of___awmod:
  4485                           	opt stack 0
  4486                           tblptru	equ	0xFF8
  4487                           tblptrh	equ	0xFF7
  4488                           tblptrl	equ	0xFF6
  4489                           tablat	equ	0xFF5
  4490                           prodh	equ	0xFF4
  4491                           prodl	equ	0xFF3
  4492                           postinc0	equ	0xFEE
  4493                           wreg	equ	0xFE8
  4494                           indf2	equ	0xFDF
  4495                           postinc2	equ	0xFDE
  4496                           postdec2	equ	0xFDD
  4497                           fsr2h	equ	0xFDA
  4498                           fsr2l	equ	0xFD9
  4499                           status	equ	0xFD8
  4500                           
  4501 ;; *************** function ___awdiv *****************
  4502 ;; Defined at:
  4503 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;  dividend        2    6[COMRAM] int 
  4506 ;;  divisor         2    8[COMRAM] int 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  quotient        2   12[COMRAM] int 
  4509 ;;  sign            1   11[COMRAM] unsigned char 
  4510 ;;  counter         1   10[COMRAM] unsigned char 
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  2    6[COMRAM] int 
  4513 ;; Registers used:
  4514 ;;		wreg, status,2, status,0
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4520 ;;      Params:         4       0       0       0       0       0       0
  4521 ;;      Locals:         4       0       0       0       0       0       0
  4522 ;;      Temps:          0       0       0       0       0       0       0
  4523 ;;      Totals:         8       0       0       0       0       0       0
  4524 ;;Total ram usage:        8 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_fround
  4530 ;;		_scale
  4531 ;;		_sprintf
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text8
  4536  002566                     __ptext8:
  4537                           	opt stack 0
  4538  002566                     ___awdiv:
  4539                           	opt stack 28
  4540                           
  4541                           ;incstack = 0
  4542  002566  0E00               	movlw	0
  4543  002568  6E0C               	movwf	___awdiv@sign,c
  4544  00256A  AE0A               	btfss	___awdiv@divisor+1,7,c
  4545  00256C  D007               	goto	l2505
  4546  00256E  6C09               	negf	___awdiv@divisor,c
  4547  002570  1E0A               	comf	___awdiv@divisor+1,f,c
  4548  002572  B0D8               	btfsc	status,0,c
  4549  002574  2A0A               	incf	___awdiv@divisor+1,f,c
  4550  002576  0E01               	movlw	1
  4551  002578  6E0C               	movwf	___awdiv@sign,c
  4552  00257A  D000               	goto	l2505
  4553  00257C                     l2505:
  4554  00257C  AE08               	btfss	___awdiv@dividend+1,7,c
  4555  00257E  D007               	goto	l2511
  4556  002580  6C07               	negf	___awdiv@dividend,c
  4557  002582  1E08               	comf	___awdiv@dividend+1,f,c
  4558  002584  B0D8               	btfsc	status,0,c
  4559  002586  2A08               	incf	___awdiv@dividend+1,f,c
  4560  002588  0E01               	movlw	1
  4561  00258A  1A0C               	xorwf	___awdiv@sign,f,c
  4562  00258C  D000               	goto	l2511
  4563  00258E                     l2511:
  4564  00258E  0E00               	movlw	0
  4565  002590  6E0E               	movwf	___awdiv@quotient+1,c
  4566  002592  0E00               	movlw	0
  4567  002594  6E0D               	movwf	___awdiv@quotient,c
  4568  002596  5009               	movf	___awdiv@divisor,w,c
  4569  002598  100A               	iorwf	___awdiv@divisor+1,w,c
  4570  00259A  B4D8               	btfsc	status,2,c
  4571  00259C  D021               	goto	l2533
  4572  00259E  0E01               	movlw	1
  4573  0025A0  6E0B               	movwf	___awdiv@counter,c
  4574  0025A2  D005               	goto	l2519
  4575  0025A4                     l2517:
  4576  0025A4  90D8               	bcf	status,0,c
  4577  0025A6  3609               	rlcf	___awdiv@divisor,f,c
  4578  0025A8  360A               	rlcf	___awdiv@divisor+1,f,c
  4579  0025AA  2A0B               	incf	___awdiv@counter,f,c
  4580  0025AC  D000               	goto	l2519
  4581  0025AE                     l2519:
  4582  0025AE  BE0A               	btfsc	___awdiv@divisor+1,7,c
  4583  0025B0  D002               	goto	l2521
  4584  0025B2  D7F8               	goto	l2517
  4585  0025B4  D000               	goto	l2521
  4586  0025B6                     l2521:
  4587  0025B6  90D8               	bcf	status,0,c
  4588  0025B8  360D               	rlcf	___awdiv@quotient,f,c
  4589  0025BA  360E               	rlcf	___awdiv@quotient+1,f,c
  4590  0025BC  5009               	movf	___awdiv@divisor,w,c
  4591  0025BE  5C07               	subwf	___awdiv@dividend,w,c
  4592  0025C0  500A               	movf	___awdiv@divisor+1,w,c
  4593  0025C2  5808               	subwfb	___awdiv@dividend+1,w,c
  4594  0025C4  A0D8               	btfss	status,0,c
  4595  0025C6  D006               	goto	l2529
  4596  0025C8  5009               	movf	___awdiv@divisor,w,c
  4597  0025CA  5E07               	subwf	___awdiv@dividend,f,c
  4598  0025CC  500A               	movf	___awdiv@divisor+1,w,c
  4599  0025CE  5A08               	subwfb	___awdiv@dividend+1,f,c
  4600  0025D0  800D               	bsf	___awdiv@quotient,0,c
  4601  0025D2  D000               	goto	l2529
  4602  0025D4                     l2529:
  4603  0025D4  90D8               	bcf	status,0,c
  4604  0025D6  320A               	rrcf	___awdiv@divisor+1,f,c
  4605  0025D8  3209               	rrcf	___awdiv@divisor,f,c
  4606  0025DA  2E0B               	decfsz	___awdiv@counter,f,c
  4607  0025DC  D7EC               	goto	l2521
  4608  0025DE  D000               	goto	l2533
  4609  0025E0                     l2533:
  4610  0025E0  500C               	movf	___awdiv@sign,w,c
  4611  0025E2  B4D8               	btfsc	status,2,c
  4612  0025E4  D005               	goto	l2537
  4613  0025E6  6C0D               	negf	___awdiv@quotient,c
  4614  0025E8  1E0E               	comf	___awdiv@quotient+1,f,c
  4615  0025EA  B0D8               	btfsc	status,0,c
  4616  0025EC  2A0E               	incf	___awdiv@quotient+1,f,c
  4617  0025EE  D000               	goto	l2537
  4618  0025F0                     l2537:
  4619  0025F0  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4620  0025F4  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4621  0025F8  D000               	goto	l541
  4622  0025FA                     l541:
  4623  0025FA  0012               	return		;funcret
  4624  0025FC                     __end_of___awdiv:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           tblptrh	equ	0xFF7
  4628                           tblptrl	equ	0xFF6
  4629                           tablat	equ	0xFF5
  4630                           prodh	equ	0xFF4
  4631                           prodl	equ	0xFF3
  4632                           postinc0	equ	0xFEE
  4633                           wreg	equ	0xFE8
  4634                           indf2	equ	0xFDF
  4635                           postinc2	equ	0xFDE
  4636                           postdec2	equ	0xFDD
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function __tdiv_to_l_ *****************
  4642 ;; Defined at:
  4643 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;  f1              3    0[COMRAM] float 
  4646 ;;  f2              3    3[COMRAM] float 
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  quot            4    9[COMRAM] unsigned long 
  4649 ;;  exp1            1   14[COMRAM] unsigned char 
  4650 ;;  cntr            1   13[COMRAM] unsigned char 
  4651 ;; Return value:  Size  Location     Type
  4652 ;;                  4    0[COMRAM] unsigned long 
  4653 ;; Registers used:
  4654 ;;		wreg, status,2, status,0
  4655 ;; Tracked objects:
  4656 ;;		On entry : 0/0
  4657 ;;		On exit  : 0/0
  4658 ;;		Unchanged: 0/0
  4659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4660 ;;      Params:         6       0       0       0       0       0       0
  4661 ;;      Locals:         6       0       0       0       0       0       0
  4662 ;;      Temps:          3       0       0       0       0       0       0
  4663 ;;      Totals:        15       0       0       0       0       0       0
  4664 ;;Total ram usage:       15 bytes
  4665 ;; Hardware stack levels used:    1
  4666 ;; This function calls:
  4667 ;;		Nothing
  4668 ;; This function is called by:
  4669 ;;		_sprintf
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           	psect	text9
  4674  001F10                     __ptext9:
  4675                           	opt stack 0
  4676  001F10                     __tdiv_to_l_:
  4677                           	opt stack 29
  4678                           
  4679                           ;incstack = 0
  4680  001F10  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4681  001F14  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4682  001F16  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4683  001F18  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4684  001F1A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4685  001F1C  E301               	bnc	u2421
  4686  001F1E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4687  001F20                     u2421:
  4688  001F20  5007               	movf	??__tdiv_to_l_,w,c
  4689  001F22  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4690  001F24  500F               	movf	__tdiv_to_l_@exp1,w,c
  4691  001F26  A4D8               	btfss	status,2,c
  4692  001F28  D002               	goto	l2721
  4693  001F2A  D05D               	goto	l2763
  4694  001F2C  D078               	goto	l774
  4695  001F2E                     l2721:
  4696  001F2E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4697  001F32  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4698  001F34  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4699  001F36  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4700  001F38  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4701  001F3A  E301               	bnc	u2441
  4702  001F3C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4703  001F3E                     u2441:
  4704  001F3E  5007               	movf	??__tdiv_to_l_,w,c
  4705  001F40  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4706  001F42  500E               	movf	__tdiv_to_l_@cntr,w,c
  4707  001F44  A4D8               	btfss	status,2,c
  4708  001F46  D002               	goto	l2727
  4709  001F48  D04E               	goto	l2763
  4710  001F4A  D069               	goto	l774
  4711  001F4C                     l2727:
  4712  001F4C  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4713  001F4E  0EFF               	movlw	255
  4714  001F50  1601               	andwf	__tdiv_to_l_@f1,f,c
  4715  001F52  0EFF               	movlw	255
  4716  001F54  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4717  001F56  0E00               	movlw	0
  4718  001F58  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4719  001F5A  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4720  001F5C  0EFF               	movlw	255
  4721  001F5E  1604               	andwf	__tdiv_to_l_@f2,f,c
  4722  001F60  0EFF               	movlw	255
  4723  001F62  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4724  001F64  0E00               	movlw	0
  4725  001F66  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4726  001F68  0E00               	movlw	0
  4727  001F6A  6E0A               	movwf	__tdiv_to_l_@quot,c
  4728  001F6C  0E00               	movlw	0
  4729  001F6E  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4730  001F70  0E00               	movlw	0
  4731  001F72  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4732  001F74  0E00               	movlw	0
  4733  001F76  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4734  001F78  0E7F               	movlw	127
  4735  001F7A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4736  001F7C  500E               	movf	__tdiv_to_l_@cntr,w,c
  4737  001F7E  0F98               	addlw	152
  4738  001F80  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4739  001F82  0E18               	movlw	24
  4740  001F84  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4741  001F86                     l776:
  4742  001F86  90D8               	bcf	status,0,c
  4743  001F88  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4744  001F8A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4745  001F8C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4746  001F8E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4747  001F90  5004               	movf	__tdiv_to_l_@f2,w,c
  4748  001F92  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4749  001F94  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4750  001F96  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4751  001F98  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4752  001F9A  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4753  001F9C  A0D8               	btfss	status,0,c
  4754  001F9E  D007               	goto	l777
  4755  001FA0  5004               	movf	__tdiv_to_l_@f2,w,c
  4756  001FA2  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4757  001FA4  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4758  001FA6  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4759  001FA8  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4760  001FAA  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4761  001FAC  800A               	bsf	__tdiv_to_l_@quot,0,c
  4762  001FAE                     l777:
  4763  001FAE  90D8               	bcf	status,0,c
  4764  001FB0  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4765  001FB2  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4766  001FB4  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4767  001FB6  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4768  001FB8  D7E6               	goto	l776
  4769  001FBA  D000               	goto	l2749
  4770  001FBC                     l2749:
  4771  001FBC  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4772  001FBE  D010               	goto	l2761
  4773  001FC0  500F               	movf	__tdiv_to_l_@exp1,w,c
  4774  001FC2  0A80               	xorlw	128
  4775  001FC4  0F97               	addlw	151
  4776  001FC6  B0D8               	btfsc	status,0,c
  4777  001FC8  D003               	goto	l2757
  4778  001FCA  D00D               	goto	l2763
  4779  001FCC  D028               	goto	l774
  4780  001FCE  D000               	goto	l2757
  4781  001FD0                     l2757:
  4782  001FD0  90D8               	bcf	status,0,c
  4783  001FD2  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4784  001FD4  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4785  001FD6  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4786  001FD8  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4787  001FDA  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4788  001FDC  D7F9               	goto	l2757
  4789  001FDE  D017               	goto	l783
  4790  001FE0                     l2761:
  4791  001FE0  0E17               	movlw	23
  4792  001FE2  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4793  001FE4  D011               	goto	l2769
  4794  001FE6                     l2763:
  4795  001FE6  0E00               	movlw	0
  4796  001FE8  6E01               	movwf	?__tdiv_to_l_,c
  4797  001FEA  0E00               	movlw	0
  4798  001FEC  6E02               	movwf	?__tdiv_to_l_+1,c
  4799  001FEE  0E00               	movlw	0
  4800  001FF0  6E03               	movwf	?__tdiv_to_l_+2,c
  4801  001FF2  0E00               	movlw	0
  4802  001FF4  6E04               	movwf	?__tdiv_to_l_+3,c
  4803  001FF6  D013               	goto	l774
  4804  001FF8  D007               	goto	l2769
  4805  001FFA                     l2767:
  4806  001FFA  90D8               	bcf	status,0,c
  4807  001FFC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4808  001FFE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4809  002000  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4810  002002  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4811  002004  060F               	decf	__tdiv_to_l_@exp1,f,c
  4812  002006  D000               	goto	l2769
  4813  002008                     l2769:
  4814  002008  500F               	movf	__tdiv_to_l_@exp1,w,c
  4815  00200A  A4D8               	btfss	status,2,c
  4816  00200C  D7F6               	goto	l2767
  4817  00200E                     l783:
  4818  00200E  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4819  002012  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4820  002016  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4821  00201A  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4822  00201E                     l774:
  4823  00201E  0012               	return		;funcret
  4824  002020                     __end_of__tdiv_to_l_:
  4825                           	opt stack 0
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodh	equ	0xFF4
  4831                           prodl	equ	0xFF3
  4832                           postinc0	equ	0xFEE
  4833                           wreg	equ	0xFE8
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function __div_to_l_ *****************
  4842 ;; Defined at:
  4843 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  f1              3    0[COMRAM] unsigned long 
  4846 ;;  f2              3    3[COMRAM] unsigned long 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  quot            4    6[COMRAM] unsigned long 
  4849 ;;  exp1            1   11[COMRAM] unsigned char 
  4850 ;;  cntr            1   10[COMRAM] unsigned char 
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  4    0[COMRAM] unsigned long 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4860 ;;      Params:         6       0       0       0       0       0       0
  4861 ;;      Locals:         6       0       0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0
  4863 ;;      Totals:        12       0       0       0       0       0       0
  4864 ;;Total ram usage:       12 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_sprintf
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text10
  4874  002020                     __ptext10:
  4875                           	opt stack 0
  4876  002020                     __div_to_l_:
  4877                           	opt stack 29
  4878                           
  4879                           ;incstack = 0
  4880  002020  3403               	rlcf	__div_to_l_@f1+2,w,c
  4881  002022  3404               	rlcf	__div_to_l_@f1+3,w,c
  4882  002024  6E0C               	movwf	__div_to_l_@exp1,c
  4883  002026  500C               	movf	__div_to_l_@exp1,w,c
  4884  002028  A4D8               	btfss	status,2,c
  4885  00202A  D002               	goto	l2777
  4886  00202C  D061               	goto	l2823
  4887  00202E  D07C               	goto	l653
  4888  002030                     l2777:
  4889  002030  3406               	rlcf	__div_to_l_@f2+2,w,c
  4890  002032  3407               	rlcf	__div_to_l_@f2+3,w,c
  4891  002034  6E0B               	movwf	__div_to_l_@cntr,c
  4892  002036  500B               	movf	__div_to_l_@cntr,w,c
  4893  002038  A4D8               	btfss	status,2,c
  4894  00203A  D002               	goto	l2783
  4895  00203C  D059               	goto	l2823
  4896  00203E  D074               	goto	l653
  4897  002040                     l2783:
  4898  002040  8E03               	bsf	__div_to_l_@f1+2,7,c
  4899  002042  0EFF               	movlw	255
  4900  002044  1601               	andwf	__div_to_l_@f1,f,c
  4901  002046  0EFF               	movlw	255
  4902  002048  1602               	andwf	__div_to_l_@f1+1,f,c
  4903  00204A  0EFF               	movlw	255
  4904  00204C  1603               	andwf	__div_to_l_@f1+2,f,c
  4905  00204E  0E00               	movlw	0
  4906  002050  1604               	andwf	__div_to_l_@f1+3,f,c
  4907  002052  8E06               	bsf	__div_to_l_@f2+2,7,c
  4908  002054  0EFF               	movlw	255
  4909  002056  1604               	andwf	__div_to_l_@f2,f,c
  4910  002058  0EFF               	movlw	255
  4911  00205A  1605               	andwf	__div_to_l_@f2+1,f,c
  4912  00205C  0EFF               	movlw	255
  4913  00205E  1606               	andwf	__div_to_l_@f2+2,f,c
  4914  002060  0E00               	movlw	0
  4915  002062  1607               	andwf	__div_to_l_@f2+3,f,c
  4916  002064  0E00               	movlw	0
  4917  002066  6E07               	movwf	__div_to_l_@quot,c
  4918  002068  0E00               	movlw	0
  4919  00206A  6E08               	movwf	__div_to_l_@quot+1,c
  4920  00206C  0E00               	movlw	0
  4921  00206E  6E09               	movwf	__div_to_l_@quot+2,c
  4922  002070  0E00               	movlw	0
  4923  002072  6E0A               	movwf	__div_to_l_@quot+3,c
  4924  002074  0E7F               	movlw	127
  4925  002076  5E0C               	subwf	__div_to_l_@exp1,f,c
  4926  002078  500B               	movf	__div_to_l_@cntr,w,c
  4927  00207A  0FA0               	addlw	160
  4928  00207C  5E0C               	subwf	__div_to_l_@exp1,f,c
  4929  00207E  0E20               	movlw	32
  4930  002080  6E0B               	movwf	__div_to_l_@cntr,c
  4931  002082  D000               	goto	l2797
  4932  002084                     l2797:
  4933  002084  90D8               	bcf	status,0,c
  4934  002086  3607               	rlcf	__div_to_l_@quot,f,c
  4935  002088  3608               	rlcf	__div_to_l_@quot+1,f,c
  4936  00208A  3609               	rlcf	__div_to_l_@quot+2,f,c
  4937  00208C  360A               	rlcf	__div_to_l_@quot+3,f,c
  4938  00208E  5004               	movf	__div_to_l_@f2,w,c
  4939  002090  5C01               	subwf	__div_to_l_@f1,w,c
  4940  002092  5005               	movf	__div_to_l_@f2+1,w,c
  4941  002094  5802               	subwfb	__div_to_l_@f1+1,w,c
  4942  002096  5006               	movf	__div_to_l_@f2+2,w,c
  4943  002098  5803               	subwfb	__div_to_l_@f1+2,w,c
  4944  00209A  5007               	movf	__div_to_l_@f2+3,w,c
  4945  00209C  5804               	subwfb	__div_to_l_@f1+3,w,c
  4946  00209E  A0D8               	btfss	status,0,c
  4947  0020A0  D00A               	goto	l2805
  4948  0020A2  5004               	movf	__div_to_l_@f2,w,c
  4949  0020A4  5E01               	subwf	__div_to_l_@f1,f,c
  4950  0020A6  5005               	movf	__div_to_l_@f2+1,w,c
  4951  0020A8  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4952  0020AA  5006               	movf	__div_to_l_@f2+2,w,c
  4953  0020AC  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4954  0020AE  5007               	movf	__div_to_l_@f2+3,w,c
  4955  0020B0  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4956  0020B2  8007               	bsf	__div_to_l_@quot,0,c
  4957  0020B4  D000               	goto	l2805
  4958  0020B6                     l2805:
  4959  0020B6  90D8               	bcf	status,0,c
  4960  0020B8  3601               	rlcf	__div_to_l_@f1,f,c
  4961  0020BA  3602               	rlcf	__div_to_l_@f1+1,f,c
  4962  0020BC  3603               	rlcf	__div_to_l_@f1+2,f,c
  4963  0020BE  3604               	rlcf	__div_to_l_@f1+3,f,c
  4964  0020C0  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4965  0020C2  D7E0               	goto	l2797
  4966  0020C4  D000               	goto	l2809
  4967  0020C6                     l2809:
  4968  0020C6  AE0C               	btfss	__div_to_l_@exp1,7,c
  4969  0020C8  D010               	goto	l2821
  4970  0020CA  500C               	movf	__div_to_l_@exp1,w,c
  4971  0020CC  0A80               	xorlw	128
  4972  0020CE  0F9F               	addlw	159
  4973  0020D0  B0D8               	btfsc	status,0,c
  4974  0020D2  D003               	goto	l2817
  4975  0020D4  D00D               	goto	l2823
  4976  0020D6  D028               	goto	l653
  4977  0020D8  D000               	goto	l2817
  4978  0020DA                     l2817:
  4979  0020DA  90D8               	bcf	status,0,c
  4980  0020DC  320A               	rrcf	__div_to_l_@quot+3,f,c
  4981  0020DE  3209               	rrcf	__div_to_l_@quot+2,f,c
  4982  0020E0  3208               	rrcf	__div_to_l_@quot+1,f,c
  4983  0020E2  3207               	rrcf	__div_to_l_@quot,f,c
  4984  0020E4  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4985  0020E6  D7F9               	goto	l2817
  4986  0020E8  D017               	goto	l662
  4987  0020EA                     l2821:
  4988  0020EA  0E1F               	movlw	31
  4989  0020EC  640C               	cpfsgt	__div_to_l_@exp1,c
  4990  0020EE  D011               	goto	l2829
  4991  0020F0                     l2823:
  4992  0020F0  0E00               	movlw	0
  4993  0020F2  6E01               	movwf	?__div_to_l_,c
  4994  0020F4  0E00               	movlw	0
  4995  0020F6  6E02               	movwf	?__div_to_l_+1,c
  4996  0020F8  0E00               	movlw	0
  4997  0020FA  6E03               	movwf	?__div_to_l_+2,c
  4998  0020FC  0E00               	movlw	0
  4999  0020FE  6E04               	movwf	?__div_to_l_+3,c
  5000  002100  D013               	goto	l653
  5001  002102  D007               	goto	l2829
  5002  002104                     l2827:
  5003  002104  90D8               	bcf	status,0,c
  5004  002106  3607               	rlcf	__div_to_l_@quot,f,c
  5005  002108  3608               	rlcf	__div_to_l_@quot+1,f,c
  5006  00210A  3609               	rlcf	__div_to_l_@quot+2,f,c
  5007  00210C  360A               	rlcf	__div_to_l_@quot+3,f,c
  5008  00210E  060C               	decf	__div_to_l_@exp1,f,c
  5009  002110  D000               	goto	l2829
  5010  002112                     l2829:
  5011  002112  500C               	movf	__div_to_l_@exp1,w,c
  5012  002114  A4D8               	btfss	status,2,c
  5013  002116  D7F6               	goto	l2827
  5014  002118                     l662:
  5015  002118  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5016  00211C  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5017  002120  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5018  002124  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5019  002128                     l653:
  5020  002128  0012               	return		;funcret
  5021  00212A                     __end_of__div_to_l_:
  5022                           	opt stack 0
  5023                           tblptru	equ	0xFF8
  5024                           tblptrh	equ	0xFF7
  5025                           tblptrl	equ	0xFF6
  5026                           tablat	equ	0xFF5
  5027                           prodh	equ	0xFF4
  5028                           prodl	equ	0xFF3
  5029                           postinc0	equ	0xFEE
  5030                           wreg	equ	0xFE8
  5031                           indf2	equ	0xFDF
  5032                           postinc2	equ	0xFDE
  5033                           postdec2	equ	0xFDD
  5034                           fsr2h	equ	0xFDA
  5035                           fsr2l	equ	0xFD9
  5036                           status	equ	0xFD8
  5037                           
  5038 ;; *************** function ___lltoft *****************
  5039 ;; Defined at:
  5040 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;  c               4   15[COMRAM] unsigned long 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  exp             1   23[COMRAM] unsigned char 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  3   15[COMRAM] float 
  5047 ;; Registers used:
  5048 ;;		wreg, status,2, status,0, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5054 ;;      Params:         4       0       0       0       0       0       0
  5055 ;;      Locals:         1       0       0       0       0       0       0
  5056 ;;      Temps:          4       0       0       0       0       0       0
  5057 ;;      Totals:         9       0       0       0       0       0       0
  5058 ;;Total ram usage:        9 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    1
  5061 ;; This function calls:
  5062 ;;		___ftpack
  5063 ;; This function is called by:
  5064 ;;		_sprintf
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text11
  5069  002810                     __ptext11:
  5070                           	opt stack 0
  5071  002810                     ___lltoft:
  5072                           	opt stack 28
  5073                           
  5074                           ;incstack = 0
  5075  002810  0E8E               	movlw	142
  5076  002812  6E18               	movwf	___lltoft@exp,c
  5077  002814  D007               	goto	l3019
  5078  002816                     l3017:
  5079  002816  90D8               	bcf	status,0,c
  5080  002818  3213               	rrcf	___lltoft@c+3,f,c
  5081  00281A  3212               	rrcf	___lltoft@c+2,f,c
  5082  00281C  3211               	rrcf	___lltoft@c+1,f,c
  5083  00281E  3210               	rrcf	___lltoft@c,f,c
  5084  002820  2A18               	incf	___lltoft@exp,f,c
  5085  002822  D000               	goto	l3019
  5086  002824                     l3019:
  5087  002824  0E00               	movlw	0
  5088  002826  1410               	andwf	___lltoft@c,w,c
  5089  002828  6E14               	movwf	??___lltoft& (0+255),c
  5090  00282A  0E00               	movlw	0
  5091  00282C  1411               	andwf	___lltoft@c+1,w,c
  5092  00282E  6E15               	movwf	(??___lltoft+1)& (0+255),c
  5093  002830  0E00               	movlw	0
  5094  002832  1412               	andwf	___lltoft@c+2,w,c
  5095  002834  6E16               	movwf	(??___lltoft+2)& (0+255),c
  5096  002836  0EFF               	movlw	255
  5097  002838  1413               	andwf	___lltoft@c+3,w,c
  5098  00283A  6E17               	movwf	(??___lltoft+3)& (0+255),c
  5099  00283C  5014               	movf	??___lltoft,w,c
  5100  00283E  1015               	iorwf	??___lltoft+1,w,c
  5101  002840  1016               	iorwf	??___lltoft+2,w,c
  5102  002842  1017               	iorwf	??___lltoft+3,w,c
  5103  002844  A4D8               	btfss	status,2,c
  5104  002846  D7E7               	goto	l3017
  5105  002848  C010  F001         	movff	___lltoft@c,___ftpack@arg
  5106  00284C  C011  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5107  002850  C012  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5108  002854  C018  F004         	movff	___lltoft@exp,___ftpack@exp
  5109  002858  0E00               	movlw	0
  5110  00285A  6E05               	movwf	___ftpack@sign,c
  5111  00285C  ECF5  F011         	call	___ftpack	;wreg free
  5112  002860  C001  F010         	movff	?___ftpack,?___lltoft
  5113  002864  C002  F011         	movff	?___ftpack+1,?___lltoft+1
  5114  002868  C003  F012         	movff	?___ftpack+2,?___lltoft+2
  5115  00286C  D000               	goto	l893
  5116  00286E                     l893:
  5117  00286E  0012               	return		;funcret
  5118  002870                     __end_of___lltoft:
  5119                           	opt stack 0
  5120                           tblptru	equ	0xFF8
  5121                           tblptrh	equ	0xFF7
  5122                           tblptrl	equ	0xFF6
  5123                           tablat	equ	0xFF5
  5124                           prodh	equ	0xFF4
  5125                           prodl	equ	0xFF3
  5126                           postinc0	equ	0xFEE
  5127                           wreg	equ	0xFE8
  5128                           indf2	equ	0xFDF
  5129                           postinc2	equ	0xFDE
  5130                           postdec2	equ	0xFDD
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function ___llmod *****************
  5136 ;; Defined at:
  5137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  dividend        4    0[COMRAM] unsigned long 
  5140 ;;  divisor         4    4[COMRAM] unsigned long 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  counter         1    8[COMRAM] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  4    0[COMRAM] unsigned long 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5152 ;;      Params:         8       0       0       0       0       0       0
  5153 ;;      Locals:         1       0       0       0       0       0       0
  5154 ;;      Temps:          0       0       0       0       0       0       0
  5155 ;;      Totals:         9       0       0       0       0       0       0
  5156 ;;Total ram usage:        9 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_sprintf
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text12
  5166  0027A0                     __ptext12:
  5167                           	opt stack 0
  5168  0027A0                     ___llmod:
  5169                           	opt stack 29
  5170                           
  5171                           ;incstack = 0
  5172  0027A0  5005               	movf	___llmod@divisor,w,c
  5173  0027A2  1006               	iorwf	___llmod@divisor+1,w,c
  5174  0027A4  1007               	iorwf	___llmod@divisor+2,w,c
  5175  0027A6  1008               	iorwf	___llmod@divisor+3,w,c
  5176  0027A8  B4D8               	btfsc	status,2,c
  5177  0027AA  D029               	goto	l873
  5178  0027AC  0E01               	movlw	1
  5179  0027AE  6E09               	movwf	___llmod@counter,c
  5180  0027B0  D007               	goto	l3005
  5181  0027B2                     l3003:
  5182  0027B2  90D8               	bcf	status,0,c
  5183  0027B4  3605               	rlcf	___llmod@divisor,f,c
  5184  0027B6  3606               	rlcf	___llmod@divisor+1,f,c
  5185  0027B8  3607               	rlcf	___llmod@divisor+2,f,c
  5186  0027BA  3608               	rlcf	___llmod@divisor+3,f,c
  5187  0027BC  2A09               	incf	___llmod@counter,f,c
  5188  0027BE  D000               	goto	l3005
  5189  0027C0                     l3005:
  5190  0027C0  BE08               	btfsc	___llmod@divisor+3,7,c
  5191  0027C2  D002               	goto	l3007
  5192  0027C4  D7F6               	goto	l3003
  5193  0027C6  D000               	goto	l3007
  5194  0027C8                     l3007:
  5195  0027C8  5005               	movf	___llmod@divisor,w,c
  5196  0027CA  5C01               	subwf	___llmod@dividend,w,c
  5197  0027CC  5006               	movf	___llmod@divisor+1,w,c
  5198  0027CE  5802               	subwfb	___llmod@dividend+1,w,c
  5199  0027D0  5007               	movf	___llmod@divisor+2,w,c
  5200  0027D2  5803               	subwfb	___llmod@dividend+2,w,c
  5201  0027D4  5008               	movf	___llmod@divisor+3,w,c
  5202  0027D6  5804               	subwfb	___llmod@dividend+3,w,c
  5203  0027D8  A0D8               	btfss	status,0,c
  5204  0027DA  D009               	goto	l3011
  5205  0027DC  5005               	movf	___llmod@divisor,w,c
  5206  0027DE  5E01               	subwf	___llmod@dividend,f,c
  5207  0027E0  5006               	movf	___llmod@divisor+1,w,c
  5208  0027E2  5A02               	subwfb	___llmod@dividend+1,f,c
  5209  0027E4  5007               	movf	___llmod@divisor+2,w,c
  5210  0027E6  5A03               	subwfb	___llmod@dividend+2,f,c
  5211  0027E8  5008               	movf	___llmod@divisor+3,w,c
  5212  0027EA  5A04               	subwfb	___llmod@dividend+3,f,c
  5213  0027EC  D000               	goto	l3011
  5214  0027EE                     l3011:
  5215  0027EE  90D8               	bcf	status,0,c
  5216  0027F0  3208               	rrcf	___llmod@divisor+3,f,c
  5217  0027F2  3207               	rrcf	___llmod@divisor+2,f,c
  5218  0027F4  3206               	rrcf	___llmod@divisor+1,f,c
  5219  0027F6  3205               	rrcf	___llmod@divisor,f,c
  5220  0027F8  2E09               	decfsz	___llmod@counter,f,c
  5221  0027FA  D7E6               	goto	l3007
  5222  0027FC  D000               	goto	l873
  5223  0027FE                     l873:
  5224  0027FE  C001  F001         	movff	___llmod@dividend,?___llmod
  5225  002802  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  5226  002806  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  5227  00280A  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  5228  00280E  0012               	return		;funcret
  5229  002810                     __end_of___llmod:
  5230                           	opt stack 0
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           prodh	equ	0xFF4
  5236                           prodl	equ	0xFF3
  5237                           postinc0	equ	0xFEE
  5238                           wreg	equ	0xFE8
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function ___lldiv *****************
  5247 ;; Defined at:
  5248 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  dividend        4    0[COMRAM] unsigned long 
  5251 ;;  divisor         4    4[COMRAM] unsigned long 
  5252 ;; Auto vars:     Size  Location     Type
  5253 ;;  quotient        4    8[COMRAM] unsigned long 
  5254 ;;  counter         1   12[COMRAM] unsigned char 
  5255 ;; Return value:  Size  Location     Type
  5256 ;;                  4    0[COMRAM] unsigned long 
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0
  5259 ;; Tracked objects:
  5260 ;;		On entry : 0/0
  5261 ;;		On exit  : 0/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5264 ;;      Params:         8       0       0       0       0       0       0
  5265 ;;      Locals:         5       0       0       0       0       0       0
  5266 ;;      Temps:          0       0       0       0       0       0       0
  5267 ;;      Totals:        13       0       0       0       0       0       0
  5268 ;;Total ram usage:       13 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; This function calls:
  5271 ;;		Nothing
  5272 ;; This function is called by:
  5273 ;;		_sprintf
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text13
  5278  002692                     __ptext13:
  5279                           	opt stack 0
  5280  002692                     ___lldiv:
  5281                           	opt stack 29
  5282                           
  5283                           ;incstack = 0
  5284  002692  0E00               	movlw	0
  5285  002694  6E09               	movwf	___lldiv@quotient,c
  5286  002696  0E00               	movlw	0
  5287  002698  6E0A               	movwf	___lldiv@quotient+1,c
  5288  00269A  0E00               	movlw	0
  5289  00269C  6E0B               	movwf	___lldiv@quotient+2,c
  5290  00269E  0E00               	movlw	0
  5291  0026A0  6E0C               	movwf	___lldiv@quotient+3,c
  5292  0026A2  5005               	movf	___lldiv@divisor,w,c
  5293  0026A4  1006               	iorwf	___lldiv@divisor+1,w,c
  5294  0026A6  1007               	iorwf	___lldiv@divisor+2,w,c
  5295  0026A8  1008               	iorwf	___lldiv@divisor+3,w,c
  5296  0026AA  B4D8               	btfsc	status,2,c
  5297  0026AC  D02F               	goto	l863
  5298  0026AE  0E01               	movlw	1
  5299  0026B0  6E0D               	movwf	___lldiv@counter,c
  5300  0026B2  D007               	goto	l2985
  5301  0026B4                     l2983:
  5302  0026B4  90D8               	bcf	status,0,c
  5303  0026B6  3605               	rlcf	___lldiv@divisor,f,c
  5304  0026B8  3606               	rlcf	___lldiv@divisor+1,f,c
  5305  0026BA  3607               	rlcf	___lldiv@divisor+2,f,c
  5306  0026BC  3608               	rlcf	___lldiv@divisor+3,f,c
  5307  0026BE  2A0D               	incf	___lldiv@counter,f,c
  5308  0026C0  D000               	goto	l2985
  5309  0026C2                     l2985:
  5310  0026C2  BE08               	btfsc	___lldiv@divisor+3,7,c
  5311  0026C4  D002               	goto	l2987
  5312  0026C6  D7F6               	goto	l2983
  5313  0026C8  D000               	goto	l2987
  5314  0026CA                     l2987:
  5315  0026CA  90D8               	bcf	status,0,c
  5316  0026CC  3609               	rlcf	___lldiv@quotient,f,c
  5317  0026CE  360A               	rlcf	___lldiv@quotient+1,f,c
  5318  0026D0  360B               	rlcf	___lldiv@quotient+2,f,c
  5319  0026D2  360C               	rlcf	___lldiv@quotient+3,f,c
  5320  0026D4  5005               	movf	___lldiv@divisor,w,c
  5321  0026D6  5C01               	subwf	___lldiv@dividend,w,c
  5322  0026D8  5006               	movf	___lldiv@divisor+1,w,c
  5323  0026DA  5802               	subwfb	___lldiv@dividend+1,w,c
  5324  0026DC  5007               	movf	___lldiv@divisor+2,w,c
  5325  0026DE  5803               	subwfb	___lldiv@dividend+2,w,c
  5326  0026E0  5008               	movf	___lldiv@divisor+3,w,c
  5327  0026E2  5804               	subwfb	___lldiv@dividend+3,w,c
  5328  0026E4  A0D8               	btfss	status,0,c
  5329  0026E6  D00A               	goto	l2995
  5330  0026E8  5005               	movf	___lldiv@divisor,w,c
  5331  0026EA  5E01               	subwf	___lldiv@dividend,f,c
  5332  0026EC  5006               	movf	___lldiv@divisor+1,w,c
  5333  0026EE  5A02               	subwfb	___lldiv@dividend+1,f,c
  5334  0026F0  5007               	movf	___lldiv@divisor+2,w,c
  5335  0026F2  5A03               	subwfb	___lldiv@dividend+2,f,c
  5336  0026F4  5008               	movf	___lldiv@divisor+3,w,c
  5337  0026F6  5A04               	subwfb	___lldiv@dividend+3,f,c
  5338  0026F8  8009               	bsf	___lldiv@quotient,0,c
  5339  0026FA  D000               	goto	l2995
  5340  0026FC                     l2995:
  5341  0026FC  90D8               	bcf	status,0,c
  5342  0026FE  3208               	rrcf	___lldiv@divisor+3,f,c
  5343  002700  3207               	rrcf	___lldiv@divisor+2,f,c
  5344  002702  3206               	rrcf	___lldiv@divisor+1,f,c
  5345  002704  3205               	rrcf	___lldiv@divisor,f,c
  5346  002706  2E0D               	decfsz	___lldiv@counter,f,c
  5347  002708  D7E0               	goto	l2987
  5348  00270A  D000               	goto	l863
  5349  00270C                     l863:
  5350  00270C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5351  002710  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5352  002714  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5353  002718  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5354  00271C  0012               	return		;funcret
  5355  00271E                     __end_of___lldiv:
  5356                           	opt stack 0
  5357                           tblptru	equ	0xFF8
  5358                           tblptrh	equ	0xFF7
  5359                           tblptrl	equ	0xFF6
  5360                           tablat	equ	0xFF5
  5361                           prodh	equ	0xFF4
  5362                           prodl	equ	0xFF3
  5363                           postinc0	equ	0xFEE
  5364                           wreg	equ	0xFE8
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function ___fttol *****************
  5373 ;; Defined at:
  5374 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  f1              3    0[COMRAM] float 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  lval            4   10[COMRAM] unsigned long 
  5379 ;;  exp1            1   14[COMRAM] unsigned char 
  5380 ;;  sign1           1    9[COMRAM] unsigned char 
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  4    0[COMRAM] long 
  5383 ;; Registers used:
  5384 ;;		wreg, status,2, status,0
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5390 ;;      Params:         4       0       0       0       0       0       0
  5391 ;;      Locals:         6       0       0       0       0       0       0
  5392 ;;      Temps:          5       0       0       0       0       0       0
  5393 ;;      Totals:        15       0       0       0       0       0       0
  5394 ;;Total ram usage:       15 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; This function calls:
  5397 ;;		Nothing
  5398 ;; This function is called by:
  5399 ;;		_sprintf
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text14
  5404  002222                     __ptext14:
  5405                           	opt stack 0
  5406  002222                     ___fttol:
  5407                           	opt stack 29
  5408                           
  5409                           ;incstack = 0
  5410  002222  C003  F005         	movff	___fttol@f1+2,??___fttol
  5411  002226  6A06               	clrf	(??___fttol+1)& (0+255),c
  5412  002228  6A07               	clrf	(??___fttol+2)& (0+255),c
  5413  00222A  3402               	rlcf	___fttol@f1+1,w,c
  5414  00222C  3605               	rlcf	??___fttol& (0+255),f,c
  5415  00222E  E301               	bnc	u2681
  5416  002230  8006               	bsf	(??___fttol+1)& (0+255),0,c
  5417  002232                     u2681:
  5418  002232  5005               	movf	??___fttol,w,c
  5419  002234  6E0F               	movwf	___fttol@exp1,c
  5420  002236  500F               	movf	___fttol@exp1,w,c
  5421  002238  A4D8               	btfss	status,2,c
  5422  00223A  D002               	goto	l2937
  5423  00223C  D039               	goto	l2961
  5424  00223E  D063               	goto	l819
  5425  002240                     l2937:
  5426  002240  0E17               	movlw	23
  5427  002242  6E05               	movwf	??___fttol& (0+255),c
  5428  002244  C001  F006         	movff	___fttol@f1,??___fttol+1
  5429  002248  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  5430  00224C  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  5431  002250  2805               	incf	??___fttol,w,c
  5432  002252  6E09               	movwf	(??___fttol+4)& (0+255),c
  5433  002254  D004               	goto	u2700
  5434  002256                     u2705:
  5435  002256  90D8               	bcf	status,0,c
  5436  002258  3208               	rrcf	??___fttol+3,f,c
  5437  00225A  3207               	rrcf	??___fttol+2,f,c
  5438  00225C  3206               	rrcf	??___fttol+1,f,c
  5439  00225E                     u2700:
  5440  00225E  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  5441  002260  D7FA               	goto	u2705
  5442  002262  5006               	movf	??___fttol+1,w,c
  5443  002264  6E0A               	movwf	___fttol@sign1,c
  5444  002266  8E02               	bsf	___fttol@f1+1,7,c
  5445  002268  0EFF               	movlw	255
  5446  00226A  1601               	andwf	___fttol@f1,f,c
  5447  00226C  0EFF               	movlw	255
  5448  00226E  1602               	andwf	___fttol@f1+1,f,c
  5449  002270  0E00               	movlw	0
  5450  002272  1603               	andwf	___fttol@f1+2,f,c
  5451  002274  5001               	movf	___fttol@f1,w,c
  5452  002276  6E0B               	movwf	___fttol@lval,c
  5453  002278  5002               	movf	___fttol@f1+1,w,c
  5454  00227A  6E0C               	movwf	___fttol@lval+1,c
  5455  00227C  5003               	movf	___fttol@f1+2,w,c
  5456  00227E  6E0D               	movwf	___fttol@lval+2,c
  5457  002280  6A0E               	clrf	___fttol@lval+3,c
  5458  002282  0E8E               	movlw	142
  5459  002284  5E0F               	subwf	___fttol@exp1,f,c
  5460  002286  AE0F               	btfss	___fttol@exp1,7,c
  5461  002288  D010               	goto	l2959
  5462  00228A  500F               	movf	___fttol@exp1,w,c
  5463  00228C  0A80               	xorlw	128
  5464  00228E  0F8F               	addlw	143
  5465  002290  B0D8               	btfsc	status,0,c
  5466  002292  D003               	goto	l2955
  5467  002294  D00D               	goto	l2961
  5468  002296  D037               	goto	l819
  5469  002298  D000               	goto	l2955
  5470  00229A                     l2955:
  5471  00229A  90D8               	bcf	status,0,c
  5472  00229C  320E               	rrcf	___fttol@lval+3,f,c
  5473  00229E  320D               	rrcf	___fttol@lval+2,f,c
  5474  0022A0  320C               	rrcf	___fttol@lval+1,f,c
  5475  0022A2  320B               	rrcf	___fttol@lval,f,c
  5476  0022A4  3E0F               	incfsz	___fttol@exp1,f,c
  5477  0022A6  D7F9               	goto	l2955
  5478  0022A8  D019               	goto	l2969
  5479  0022AA                     l2959:
  5480  0022AA  0E17               	movlw	23
  5481  0022AC  640F               	cpfsgt	___fttol@exp1,c
  5482  0022AE  D011               	goto	l2967
  5483  0022B0                     l2961:
  5484  0022B0  0E00               	movlw	0
  5485  0022B2  6E01               	movwf	?___fttol,c
  5486  0022B4  0E00               	movlw	0
  5487  0022B6  6E02               	movwf	?___fttol+1,c
  5488  0022B8  0E00               	movlw	0
  5489  0022BA  6E03               	movwf	?___fttol+2,c
  5490  0022BC  0E00               	movlw	0
  5491  0022BE  6E04               	movwf	?___fttol+3,c
  5492  0022C0  D022               	goto	l819
  5493  0022C2  D007               	goto	l2967
  5494  0022C4                     l2965:
  5495  0022C4  90D8               	bcf	status,0,c
  5496  0022C6  360B               	rlcf	___fttol@lval,f,c
  5497  0022C8  360C               	rlcf	___fttol@lval+1,f,c
  5498  0022CA  360D               	rlcf	___fttol@lval+2,f,c
  5499  0022CC  360E               	rlcf	___fttol@lval+3,f,c
  5500  0022CE  060F               	decf	___fttol@exp1,f,c
  5501  0022D0  D000               	goto	l2967
  5502  0022D2                     l2967:
  5503  0022D2  500F               	movf	___fttol@exp1,w,c
  5504  0022D4  B4D8               	btfsc	status,2,c
  5505  0022D6  D002               	goto	l2969
  5506  0022D8  D7F5               	goto	l2965
  5507  0022DA  D000               	goto	l2969
  5508  0022DC                     l2969:
  5509  0022DC  500A               	movf	___fttol@sign1,w,c
  5510  0022DE  B4D8               	btfsc	status,2,c
  5511  0022E0  D009               	goto	l2973
  5512  0022E2  1E0E               	comf	___fttol@lval+3,f,c
  5513  0022E4  1E0D               	comf	___fttol@lval+2,f,c
  5514  0022E6  1E0C               	comf	___fttol@lval+1,f,c
  5515  0022E8  6C0B               	negf	___fttol@lval,c
  5516  0022EA  0E00               	movlw	0
  5517  0022EC  220C               	addwfc	___fttol@lval+1,f,c
  5518  0022EE  220D               	addwfc	___fttol@lval+2,f,c
  5519  0022F0  220E               	addwfc	___fttol@lval+3,f,c
  5520  0022F2  D000               	goto	l2973
  5521  0022F4                     l2973:
  5522  0022F4  C00B  F001         	movff	___fttol@lval,?___fttol
  5523  0022F8  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  5524  0022FC  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  5525  002300  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  5526  002304  D000               	goto	l819
  5527  002306                     l819:
  5528  002306  0012               	return		;funcret
  5529  002308                     __end_of___fttol:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           indf2	equ	0xFDF
  5540                           postinc2	equ	0xFDE
  5541                           postdec2	equ	0xFDD
  5542                           fsr2h	equ	0xFDA
  5543                           fsr2l	equ	0xFD9
  5544                           status	equ	0xFD8
  5545                           
  5546 ;; *************** function ___ftsub *****************
  5547 ;; Defined at:
  5548 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  f1              3   64[COMRAM] float 
  5551 ;;  f2              3   67[COMRAM] float 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  3   64[COMRAM] float 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, status,0, cstack
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5563 ;;      Params:         6       0       0       0       0       0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0
  5566 ;;      Totals:         6       0       0       0       0       0       0
  5567 ;;Total ram usage:        6 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    2
  5570 ;; This function calls:
  5571 ;;		___ftadd
  5572 ;; This function is called by:
  5573 ;;		_sprintf
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text15
  5578  002922                     __ptext15:
  5579                           	opt stack 0
  5580  002922                     ___ftsub:
  5581                           	opt stack 27
  5582                           
  5583                           ;incstack = 0
  5584  002922  5044               	movf	___ftsub@f2,w,c
  5585  002924  1045               	iorwf	___ftsub@f2+1,w,c
  5586  002926  1046               	iorwf	___ftsub@f2+2,w,c
  5587  002928  B4D8               	btfsc	status,2,c
  5588  00292A  D007               	goto	l2905
  5589  00292C  0E00               	movlw	0
  5590  00292E  1A44               	xorwf	___ftsub@f2,f,c
  5591  002930  0E00               	movlw	0
  5592  002932  1A45               	xorwf	___ftsub@f2+1,f,c
  5593  002934  0E80               	movlw	128
  5594  002936  1A46               	xorwf	___ftsub@f2+2,f,c
  5595  002938  D000               	goto	l2905
  5596  00293A                     l2905:
  5597  00293A  C041  F035         	movff	___ftsub@f1,___ftadd@f1
  5598  00293E  C042  F036         	movff	___ftsub@f1+1,___ftadd@f1+1
  5599  002942  C043  F037         	movff	___ftsub@f1+2,___ftadd@f1+2
  5600  002946  C044  F038         	movff	___ftsub@f2,___ftadd@f2
  5601  00294A  C045  F039         	movff	___ftsub@f2+1,___ftadd@f2+1
  5602  00294E  C046  F03A         	movff	___ftsub@f2+2,___ftadd@f2+2
  5603  002952  EC12  F00E         	call	___ftadd	;wreg free
  5604  002956  C035  F041         	movff	?___ftadd,?___ftsub
  5605  00295A  C036  F042         	movff	?___ftadd+1,?___ftsub+1
  5606  00295E  C037  F043         	movff	?___ftadd+2,?___ftsub+2
  5607  002962  D000               	goto	l815
  5608  002964                     l815:
  5609  002964  0012               	return		;funcret
  5610  002966                     __end_of___ftsub:
  5611                           	opt stack 0
  5612                           tblptru	equ	0xFF8
  5613                           tblptrh	equ	0xFF7
  5614                           tblptrl	equ	0xFF6
  5615                           tablat	equ	0xFF5
  5616                           prodh	equ	0xFF4
  5617                           prodl	equ	0xFF3
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           indf2	equ	0xFDF
  5621                           postinc2	equ	0xFDE
  5622                           postdec2	equ	0xFDD
  5623                           fsr2h	equ	0xFDA
  5624                           fsr2l	equ	0xFD9
  5625                           status	equ	0xFD8
  5626                           
  5627 ;; *************** function ___ftadd *****************
  5628 ;; Defined at:
  5629 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;  f1              3   52[COMRAM] float 
  5632 ;;  f2              3   55[COMRAM] float 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;  exp1            1   63[COMRAM] unsigned char 
  5635 ;;  exp2            1   62[COMRAM] unsigned char 
  5636 ;;  sign            1   61[COMRAM] unsigned char 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  3   52[COMRAM] float 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5646 ;;      Params:         6       0       0       0       0       0       0
  5647 ;;      Locals:         3       0       0       0       0       0       0
  5648 ;;      Temps:          3       0       0       0       0       0       0
  5649 ;;      Totals:        12       0       0       0       0       0       0
  5650 ;;Total ram usage:       12 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    1
  5653 ;; This function calls:
  5654 ;;		___ftpack
  5655 ;; This function is called by:
  5656 ;;		_sprintf
  5657 ;;		___ftsub
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           	psect	text16
  5662  001C24                     __ptext16:
  5663                           	opt stack 0
  5664  001C24                     ___ftadd:
  5665                           	opt stack 27
  5666                           
  5667                           ;incstack = 0
  5668  001C24  C037  F03B         	movff	___ftadd@f1+2,??___ftadd
  5669  001C28  6A3C               	clrf	(??___ftadd+1)& (0+255),c
  5670  001C2A  6A3D               	clrf	(??___ftadd+2)& (0+255),c
  5671  001C2C  3436               	rlcf	___ftadd@f1+1,w,c
  5672  001C2E  363B               	rlcf	??___ftadd& (0+255),f,c
  5673  001C30  E301               	bnc	u1861
  5674  001C32  803C               	bsf	(??___ftadd+1)& (0+255),0,c
  5675  001C34                     u1861:
  5676  001C34  503B               	movf	??___ftadd,w,c
  5677  001C36  6E40               	movwf	___ftadd@exp1,c
  5678  001C38  C03A  F03B         	movff	___ftadd@f2+2,??___ftadd
  5679  001C3C  6A3C               	clrf	(??___ftadd+1)& (0+255),c
  5680  001C3E  6A3D               	clrf	(??___ftadd+2)& (0+255),c
  5681  001C40  3439               	rlcf	___ftadd@f2+1,w,c
  5682  001C42  363B               	rlcf	??___ftadd& (0+255),f,c
  5683  001C44  E301               	bnc	u1871
  5684  001C46  803C               	bsf	(??___ftadd+1)& (0+255),0,c
  5685  001C48                     u1871:
  5686  001C48  503B               	movf	??___ftadd,w,c
  5687  001C4A  6E3F               	movwf	___ftadd@exp2,c
  5688  001C4C  5040               	movf	___ftadd@exp1,w,c
  5689  001C4E  B4D8               	btfsc	status,2,c
  5690  001C50  D00B               	goto	l734
  5691  001C52  503F               	movf	___ftadd@exp2,w,c
  5692  001C54  5C40               	subwf	___ftadd@exp1,w,c
  5693  001C56  B0D8               	btfsc	status,0,c
  5694  001C58  D00E               	goto	l2387
  5695  001C5A  5040               	movf	___ftadd@exp1,w,c
  5696  001C5C  0800               	sublw	0
  5697  001C5E  243F               	addwf	___ftadd@exp2,w,c
  5698  001C60  6E3B               	movwf	??___ftadd& (0+255),c
  5699  001C62  0E18               	movlw	24
  5700  001C64  643B               	cpfsgt	??___ftadd,c
  5701  001C66  D007               	goto	l2387
  5702  001C68                     l734:
  5703  001C68  C038  F035         	movff	___ftadd@f2,?___ftadd
  5704  001C6C  C039  F036         	movff	___ftadd@f2+1,?___ftadd+1
  5705  001C70  C03A  F037         	movff	___ftadd@f2+2,?___ftadd+2
  5706  001C74  D0B8               	goto	l735
  5707  001C76                     l2387:
  5708  001C76  503F               	movf	___ftadd@exp2,w,c
  5709  001C78  B4D8               	btfsc	status,2,c
  5710  001C7A  D00B               	goto	l738
  5711  001C7C  5040               	movf	___ftadd@exp1,w,c
  5712  001C7E  5C3F               	subwf	___ftadd@exp2,w,c
  5713  001C80  B0D8               	btfsc	status,0,c
  5714  001C82  D00E               	goto	l2393
  5715  001C84  503F               	movf	___ftadd@exp2,w,c
  5716  001C86  0800               	sublw	0
  5717  001C88  2440               	addwf	___ftadd@exp1,w,c
  5718  001C8A  6E3B               	movwf	??___ftadd& (0+255),c
  5719  001C8C  0E18               	movlw	24
  5720  001C8E  643B               	cpfsgt	??___ftadd,c
  5721  001C90  D007               	goto	l2393
  5722  001C92                     l738:
  5723  001C92  C035  F035         	movff	___ftadd@f1,?___ftadd
  5724  001C96  C036  F036         	movff	___ftadd@f1+1,?___ftadd+1
  5725  001C9A  C037  F037         	movff	___ftadd@f1+2,?___ftadd+2
  5726  001C9E  D0A3               	goto	l735
  5727  001CA0                     l2393:
  5728  001CA0  0E06               	movlw	6
  5729  001CA2  6E3E               	movwf	___ftadd@sign,c
  5730  001CA4  AE37               	btfss	___ftadd@f1+2,7,c
  5731  001CA6  D002               	goto	l2399
  5732  001CA8  8E3E               	bsf	___ftadd@sign,7,c
  5733  001CAA  D000               	goto	l2399
  5734  001CAC                     l2399:
  5735  001CAC  BE3A               	btfsc	___ftadd@f2+2,7,c
  5736  001CAE  8C3E               	bsf	___ftadd@sign,6,c
  5737  001CB0  8E36               	bsf	___ftadd@f1+1,7,c
  5738  001CB2  0EFF               	movlw	255
  5739  001CB4  1635               	andwf	___ftadd@f1,f,c
  5740  001CB6  0EFF               	movlw	255
  5741  001CB8  1636               	andwf	___ftadd@f1+1,f,c
  5742  001CBA  0E00               	movlw	0
  5743  001CBC  1637               	andwf	___ftadd@f1+2,f,c
  5744  001CBE  8E39               	bsf	___ftadd@f2+1,7,c
  5745  001CC0  0EFF               	movlw	255
  5746  001CC2  1638               	andwf	___ftadd@f2,f,c
  5747  001CC4  0EFF               	movlw	255
  5748  001CC6  1639               	andwf	___ftadd@f2+1,f,c
  5749  001CC8  0E00               	movlw	0
  5750  001CCA  163A               	andwf	___ftadd@f2+2,f,c
  5751  001CCC  503F               	movf	___ftadd@exp2,w,c
  5752  001CCE  5C40               	subwf	___ftadd@exp1,w,c
  5753  001CD0  B0D8               	btfsc	status,0,c
  5754  001CD2  D01E               	goto	l2419
  5755  001CD4                     l2409:
  5756  001CD4  90D8               	bcf	status,0,c
  5757  001CD6  3638               	rlcf	___ftadd@f2,f,c
  5758  001CD8  3639               	rlcf	___ftadd@f2+1,f,c
  5759  001CDA  363A               	rlcf	___ftadd@f2+2,f,c
  5760  001CDC  063F               	decf	___ftadd@exp2,f,c
  5761  001CDE  5040               	movf	___ftadd@exp1,w,c
  5762  001CE0  183F               	xorwf	___ftadd@exp2,w,c
  5763  001CE2  B4D8               	btfsc	status,2,c
  5764  001CE4  D00F               	goto	l2417
  5765  001CE6  063E               	decf	___ftadd@sign,f,c
  5766  001CE8  C03E  F03B         	movff	___ftadd@sign,??___ftadd
  5767  001CEC  0E07               	movlw	7
  5768  001CEE  163B               	andwf	??___ftadd,f,c
  5769  001CF0  B4D8               	btfsc	status,2,c
  5770  001CF2  D008               	goto	l2417
  5771  001CF4  D7EF               	goto	l2409
  5772  001CF6  D006               	goto	l2417
  5773  001CF8                     l2415:
  5774  001CF8  90D8               	bcf	status,0,c
  5775  001CFA  3237               	rrcf	___ftadd@f1+2,f,c
  5776  001CFC  3236               	rrcf	___ftadd@f1+1,f,c
  5777  001CFE  3235               	rrcf	___ftadd@f1,f,c
  5778  001D00  2A40               	incf	___ftadd@exp1,f,c
  5779  001D02  D000               	goto	l2417
  5780  001D04                     l2417:
  5781  001D04  503F               	movf	___ftadd@exp2,w,c
  5782  001D06  1840               	xorwf	___ftadd@exp1,w,c
  5783  001D08  B4D8               	btfsc	status,2,c
  5784  001D0A  D024               	goto	l749
  5785  001D0C  D7F5               	goto	l2415
  5786  001D0E  D022               	goto	l749
  5787  001D10                     l2419:
  5788  001D10  5040               	movf	___ftadd@exp1,w,c
  5789  001D12  5C3F               	subwf	___ftadd@exp2,w,c
  5790  001D14  B0D8               	btfsc	status,0,c
  5791  001D16  D01E               	goto	l749
  5792  001D18                     l2421:
  5793  001D18  90D8               	bcf	status,0,c
  5794  001D1A  3635               	rlcf	___ftadd@f1,f,c
  5795  001D1C  3636               	rlcf	___ftadd@f1+1,f,c
  5796  001D1E  3637               	rlcf	___ftadd@f1+2,f,c
  5797  001D20  0640               	decf	___ftadd@exp1,f,c
  5798  001D22  5040               	movf	___ftadd@exp1,w,c
  5799  001D24  183F               	xorwf	___ftadd@exp2,w,c
  5800  001D26  B4D8               	btfsc	status,2,c
  5801  001D28  D00F               	goto	l2429
  5802  001D2A  063E               	decf	___ftadd@sign,f,c
  5803  001D2C  C03E  F03B         	movff	___ftadd@sign,??___ftadd
  5804  001D30  0E07               	movlw	7
  5805  001D32  163B               	andwf	??___ftadd,f,c
  5806  001D34  B4D8               	btfsc	status,2,c
  5807  001D36  D008               	goto	l2429
  5808  001D38  D7EF               	goto	l2421
  5809  001D3A  D006               	goto	l2429
  5810  001D3C                     l2427:
  5811  001D3C  90D8               	bcf	status,0,c
  5812  001D3E  323A               	rrcf	___ftadd@f2+2,f,c
  5813  001D40  3239               	rrcf	___ftadd@f2+1,f,c
  5814  001D42  3238               	rrcf	___ftadd@f2,f,c
  5815  001D44  2A3F               	incf	___ftadd@exp2,f,c
  5816  001D46  D000               	goto	l2429
  5817  001D48                     l2429:
  5818  001D48  503F               	movf	___ftadd@exp2,w,c
  5819  001D4A  1840               	xorwf	___ftadd@exp1,w,c
  5820  001D4C  B4D8               	btfsc	status,2,c
  5821  001D4E  D002               	goto	l749
  5822  001D50  D7F5               	goto	l2427
  5823  001D52  D000               	goto	l749
  5824  001D54                     l749:
  5825  001D54  AE3E               	btfss	___ftadd@sign,7,c
  5826  001D56  D00C               	goto	l758
  5827  001D58  0EFF               	movlw	255
  5828  001D5A  1A35               	xorwf	___ftadd@f1,f,c
  5829  001D5C  0EFF               	movlw	255
  5830  001D5E  1A36               	xorwf	___ftadd@f1+1,f,c
  5831  001D60  0EFF               	movlw	255
  5832  001D62  1A37               	xorwf	___ftadd@f1+2,f,c
  5833  001D64  0E01               	movlw	1
  5834  001D66  2635               	addwf	___ftadd@f1,f,c
  5835  001D68  0E00               	movlw	0
  5836  001D6A  2236               	addwfc	___ftadd@f1+1,f,c
  5837  001D6C  0E00               	movlw	0
  5838  001D6E  2237               	addwfc	___ftadd@f1+2,f,c
  5839  001D70                     l758:
  5840  001D70  AC3E               	btfss	___ftadd@sign,6,c
  5841  001D72  D00D               	goto	l2435
  5842  001D74  0EFF               	movlw	255
  5843  001D76  1A38               	xorwf	___ftadd@f2,f,c
  5844  001D78  0EFF               	movlw	255
  5845  001D7A  1A39               	xorwf	___ftadd@f2+1,f,c
  5846  001D7C  0EFF               	movlw	255
  5847  001D7E  1A3A               	xorwf	___ftadd@f2+2,f,c
  5848  001D80  0E01               	movlw	1
  5849  001D82  2638               	addwf	___ftadd@f2,f,c
  5850  001D84  0E00               	movlw	0
  5851  001D86  2239               	addwfc	___ftadd@f2+1,f,c
  5852  001D88  0E00               	movlw	0
  5853  001D8A  223A               	addwfc	___ftadd@f2+2,f,c
  5854  001D8C  D000               	goto	l2435
  5855  001D8E                     l2435:
  5856  001D8E  0E00               	movlw	0
  5857  001D90  6E3E               	movwf	___ftadd@sign,c
  5858  001D92  5035               	movf	___ftadd@f1,w,c
  5859  001D94  2638               	addwf	___ftadd@f2,f,c
  5860  001D96  5036               	movf	___ftadd@f1+1,w,c
  5861  001D98  2239               	addwfc	___ftadd@f2+1,f,c
  5862  001D9A  5037               	movf	___ftadd@f1+2,w,c
  5863  001D9C  223A               	addwfc	___ftadd@f2+2,f,c
  5864  001D9E  AE3A               	btfss	___ftadd@f2+2,7,c
  5865  001DA0  D00F               	goto	l2445
  5866  001DA2  0EFF               	movlw	255
  5867  001DA4  1A38               	xorwf	___ftadd@f2,f,c
  5868  001DA6  0EFF               	movlw	255
  5869  001DA8  1A39               	xorwf	___ftadd@f2+1,f,c
  5870  001DAA  0EFF               	movlw	255
  5871  001DAC  1A3A               	xorwf	___ftadd@f2+2,f,c
  5872  001DAE  0E01               	movlw	1
  5873  001DB0  2638               	addwf	___ftadd@f2,f,c
  5874  001DB2  0E00               	movlw	0
  5875  001DB4  2239               	addwfc	___ftadd@f2+1,f,c
  5876  001DB6  0E00               	movlw	0
  5877  001DB8  223A               	addwfc	___ftadd@f2+2,f,c
  5878  001DBA  0E01               	movlw	1
  5879  001DBC  6E3E               	movwf	___ftadd@sign,c
  5880  001DBE  D000               	goto	l2445
  5881  001DC0                     l2445:
  5882  001DC0  C038  F001         	movff	___ftadd@f2,___ftpack@arg
  5883  001DC4  C039  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5884  001DC8  C03A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5885  001DCC  C040  F004         	movff	___ftadd@exp1,___ftpack@exp
  5886  001DD0  C03E  F005         	movff	___ftadd@sign,___ftpack@sign
  5887  001DD4  ECF5  F011         	call	___ftpack	;wreg free
  5888  001DD8  C001  F035         	movff	?___ftpack,?___ftadd
  5889  001DDC  C002  F036         	movff	?___ftpack+1,?___ftadd+1
  5890  001DE0  C003  F037         	movff	?___ftpack+2,?___ftadd+2
  5891  001DE4  D000               	goto	l735
  5892  001DE6                     l735:
  5893  001DE6  0012               	return		;funcret
  5894  001DE8                     __end_of___ftadd:
  5895                           	opt stack 0
  5896                           tblptru	equ	0xFF8
  5897                           tblptrh	equ	0xFF7
  5898                           tblptrl	equ	0xFF6
  5899                           tablat	equ	0xFF5
  5900                           prodh	equ	0xFF4
  5901                           prodl	equ	0xFF3
  5902                           postinc0	equ	0xFEE
  5903                           wreg	equ	0xFE8
  5904                           indf2	equ	0xFDF
  5905                           postinc2	equ	0xFDE
  5906                           postdec2	equ	0xFDD
  5907                           fsr2h	equ	0xFDA
  5908                           fsr2l	equ	0xFD9
  5909                           status	equ	0xFD8
  5910                           
  5911 ;; *************** function ___ftneg *****************
  5912 ;; Defined at:
  5913 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  f1              3   24[COMRAM] float 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;		None
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  3   24[COMRAM] float 
  5920 ;; Registers used:
  5921 ;;		wreg, status,2, status,0
  5922 ;; Tracked objects:
  5923 ;;		On entry : 0/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5927 ;;      Params:         3       0       0       0       0       0       0
  5928 ;;      Locals:         0       0       0       0       0       0       0
  5929 ;;      Temps:          0       0       0       0       0       0       0
  5930 ;;      Totals:         3       0       0       0       0       0       0
  5931 ;;Total ram usage:        3 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; This function calls:
  5934 ;;		Nothing
  5935 ;; This function is called by:
  5936 ;;		_sprintf
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text17
  5941  002ADA                     __ptext17:
  5942                           	opt stack 0
  5943  002ADA                     ___ftneg:
  5944                           	opt stack 29
  5945                           
  5946                           ;incstack = 0
  5947  002ADA  5019               	movf	___ftneg@f1,w,c
  5948  002ADC  101A               	iorwf	___ftneg@f1+1,w,c
  5949  002ADE  101B               	iorwf	___ftneg@f1+2,w,c
  5950  002AE0  B4D8               	btfsc	status,2,c
  5951  002AE2  D006               	goto	l808
  5952  002AE4  0E00               	movlw	0
  5953  002AE6  1A19               	xorwf	___ftneg@f1,f,c
  5954  002AE8  0E00               	movlw	0
  5955  002AEA  1A1A               	xorwf	___ftneg@f1+1,f,c
  5956  002AEC  0E80               	movlw	128
  5957  002AEE  1A1B               	xorwf	___ftneg@f1+2,f,c
  5958  002AF0                     l808:
  5959  002AF0  C019  F019         	movff	___ftneg@f1,?___ftneg
  5960  002AF4  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  5961  002AF8  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  5962  002AFC  0012               	return		;funcret
  5963  002AFE                     __end_of___ftneg:
  5964                           	opt stack 0
  5965                           tblptru	equ	0xFF8
  5966                           tblptrh	equ	0xFF7
  5967                           tblptrl	equ	0xFF6
  5968                           tablat	equ	0xFF5
  5969                           prodh	equ	0xFF4
  5970                           prodl	equ	0xFF3
  5971                           postinc0	equ	0xFEE
  5972                           wreg	equ	0xFE8
  5973                           indf2	equ	0xFDF
  5974                           postinc2	equ	0xFDE
  5975                           postdec2	equ	0xFDD
  5976                           fsr2h	equ	0xFDA
  5977                           fsr2l	equ	0xFD9
  5978                           status	equ	0xFD8
  5979                           
  5980 ;; *************** function ___ftge *****************
  5981 ;; Defined at:
  5982 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  ff1             3   64[COMRAM] float 
  5985 ;;  ff2             3   67[COMRAM] float 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;		None               void
  5990 ;; Registers used:
  5991 ;;		wreg, status,2, status,0
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5997 ;;      Params:         6       0       0       0       0       0       0
  5998 ;;      Locals:         0       0       0       0       0       0       0
  5999 ;;      Temps:          3       0       0       0       0       0       0
  6000 ;;      Totals:         9       0       0       0       0       0       0
  6001 ;;Total ram usage:        9 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; This function calls:
  6004 ;;		Nothing
  6005 ;; This function is called by:
  6006 ;;		_sprintf
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text18
  6011  0025FC                     __ptext18:
  6012                           	opt stack 0
  6013  0025FC                     ___ftge:
  6014                           	opt stack 29
  6015                           
  6016                           ;incstack = 0
  6017  0025FC  AE43               	btfss	___ftge@ff1+2,7,c
  6018  0025FE  D017               	goto	l2913
  6019  002600  C041  F047         	movff	___ftge@ff1,??___ftge
  6020  002604  C042  F048         	movff	___ftge@ff1+1,??___ftge+1
  6021  002608  C043  F049         	movff	___ftge@ff1+2,??___ftge+2
  6022  00260C  1E47               	comf	??___ftge,f,c
  6023  00260E  1E48               	comf	??___ftge+1,f,c
  6024  002610  1E49               	comf	??___ftge+2,f,c
  6025  002612  2A47               	incf	??___ftge,f,c
  6026  002614  0E00               	movlw	0
  6027  002616  2248               	addwfc	??___ftge+1,f,c
  6028  002618  2249               	addwfc	??___ftge+2,f,c
  6029  00261A  0E00               	movlw	0
  6030  00261C  2447               	addwf	??___ftge,w,c
  6031  00261E  6E41               	movwf	___ftge@ff1,c
  6032  002620  0E00               	movlw	0
  6033  002622  2048               	addwfc	??___ftge+1,w,c
  6034  002624  6E42               	movwf	___ftge@ff1+1,c
  6035  002626  0E80               	movlw	128
  6036  002628  2049               	addwfc	??___ftge+2,w,c
  6037  00262A  6E43               	movwf	___ftge@ff1+2,c
  6038  00262C  D000               	goto	l2913
  6039  00262E                     l2913:
  6040  00262E  AE46               	btfss	___ftge@ff2+2,7,c
  6041  002630  D017               	goto	l2917
  6042  002632  C044  F047         	movff	___ftge@ff2,??___ftge
  6043  002636  C045  F048         	movff	___ftge@ff2+1,??___ftge+1
  6044  00263A  C046  F049         	movff	___ftge@ff2+2,??___ftge+2
  6045  00263E  1E47               	comf	??___ftge,f,c
  6046  002640  1E48               	comf	??___ftge+1,f,c
  6047  002642  1E49               	comf	??___ftge+2,f,c
  6048  002644  2A47               	incf	??___ftge,f,c
  6049  002646  0E00               	movlw	0
  6050  002648  2248               	addwfc	??___ftge+1,f,c
  6051  00264A  2249               	addwfc	??___ftge+2,f,c
  6052  00264C  0E00               	movlw	0
  6053  00264E  2447               	addwf	??___ftge,w,c
  6054  002650  6E44               	movwf	___ftge@ff2,c
  6055  002652  0E00               	movlw	0
  6056  002654  2048               	addwfc	??___ftge+1,w,c
  6057  002656  6E45               	movwf	___ftge@ff2+1,c
  6058  002658  0E80               	movlw	128
  6059  00265A  2049               	addwfc	??___ftge+2,w,c
  6060  00265C  6E46               	movwf	___ftge@ff2+2,c
  6061  00265E  D000               	goto	l2917
  6062  002660                     l2917:
  6063  002660  0E00               	movlw	0
  6064  002662  1A41               	xorwf	___ftge@ff1,f,c
  6065  002664  0E00               	movlw	0
  6066  002666  1A42               	xorwf	___ftge@ff1+1,f,c
  6067  002668  0E80               	movlw	128
  6068  00266A  1A43               	xorwf	___ftge@ff1+2,f,c
  6069  00266C  0E00               	movlw	0
  6070  00266E  1A44               	xorwf	___ftge@ff2,f,c
  6071  002670  0E00               	movlw	0
  6072  002672  1A45               	xorwf	___ftge@ff2+1,f,c
  6073  002674  0E80               	movlw	128
  6074  002676  1A46               	xorwf	___ftge@ff2+2,f,c
  6075  002678  5044               	movf	___ftge@ff2,w,c
  6076  00267A  5C41               	subwf	___ftge@ff1,w,c
  6077  00267C  5045               	movf	___ftge@ff2+1,w,c
  6078  00267E  5842               	subwfb	___ftge@ff1+1,w,c
  6079  002680  5046               	movf	___ftge@ff2+2,w,c
  6080  002682  5843               	subwfb	___ftge@ff1+2,w,c
  6081  002684  B0D8               	btfsc	status,0,c
  6082  002686  D002               	goto	l2923
  6083  002688  90D8               	bcf	status,0,c
  6084  00268A  D002               	goto	l792
  6085  00268C                     l2923:
  6086  00268C  80D8               	bsf	status,0,c
  6087  00268E  D000               	goto	l792
  6088  002690                     l792:
  6089  002690  0012               	return		;funcret
  6090  002692                     __end_of___ftge:
  6091                           	opt stack 0
  6092                           tblptru	equ	0xFF8
  6093                           tblptrh	equ	0xFF7
  6094                           tblptrl	equ	0xFF6
  6095                           tablat	equ	0xFF5
  6096                           prodh	equ	0xFF4
  6097                           prodl	equ	0xFF3
  6098                           postinc0	equ	0xFEE
  6099                           wreg	equ	0xFE8
  6100                           indf2	equ	0xFDF
  6101                           postinc2	equ	0xFDE
  6102                           postdec2	equ	0xFDD
  6103                           fsr2h	equ	0xFDA
  6104                           fsr2l	equ	0xFD9
  6105                           status	equ	0xFD8
  6106                           
  6107 ;; *************** function ___ftdiv *****************
  6108 ;; Defined at:
  6109 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;  f1              3   49[COMRAM] float 
  6112 ;;  f2              3   52[COMRAM] float 
  6113 ;; Auto vars:     Size  Location     Type
  6114 ;;  f3              3   59[COMRAM] float 
  6115 ;;  sign            1   63[COMRAM] unsigned char 
  6116 ;;  exp             1   62[COMRAM] unsigned char 
  6117 ;;  cntr            1   58[COMRAM] unsigned char 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  3   49[COMRAM] float 
  6120 ;; Registers used:
  6121 ;;		wreg, status,2, status,0, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6127 ;;      Params:         6       0       0       0       0       0       0
  6128 ;;      Locals:         6       0       0       0       0       0       0
  6129 ;;      Temps:          3       0       0       0       0       0       0
  6130 ;;      Totals:        15       0       0       0       0       0       0
  6131 ;;Total ram usage:       15 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    1
  6134 ;; This function calls:
  6135 ;;		___ftpack
  6136 ;; This function is called by:
  6137 ;;		_main
  6138 ;;		_sprintf
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text19
  6143  002308                     __ptext19:
  6144                           	opt stack 0
  6145  002308                     ___ftdiv:
  6146                           	opt stack 28
  6147                           
  6148                           ;incstack = 0
  6149  002308  C034  F038         	movff	___ftdiv@f1+2,??___ftdiv
  6150  00230C  6A39               	clrf	(??___ftdiv+1)& (0+255),c
  6151  00230E  6A3A               	clrf	(??___ftdiv+2)& (0+255),c
  6152  002310  3433               	rlcf	___ftdiv@f1+1,w,c
  6153  002312  3638               	rlcf	??___ftdiv& (0+255),f,c
  6154  002314  E301               	bnc	u2581
  6155  002316  8039               	bsf	(??___ftdiv+1)& (0+255),0,c
  6156  002318                     u2581:
  6157  002318  5038               	movf	??___ftdiv,w,c
  6158  00231A  6E3F               	movwf	___ftdiv@exp,c
  6159  00231C  503F               	movf	___ftdiv@exp,w,c
  6160  00231E  A4D8               	btfss	status,2,c
  6161  002320  D002               	goto	l2861
  6162  002322  D00E               	goto	l2863
  6163  002324  D061               	goto	l766
  6164  002326                     l2861:
  6165  002326  C037  F038         	movff	___ftdiv@f2+2,??___ftdiv
  6166  00232A  6A39               	clrf	(??___ftdiv+1)& (0+255),c
  6167  00232C  6A3A               	clrf	(??___ftdiv+2)& (0+255),c
  6168  00232E  3436               	rlcf	___ftdiv@f2+1,w,c
  6169  002330  3638               	rlcf	??___ftdiv& (0+255),f,c
  6170  002332  E301               	bnc	u2601
  6171  002334  8039               	bsf	(??___ftdiv+1)& (0+255),0,c
  6172  002336                     u2601:
  6173  002336  5038               	movf	??___ftdiv,w,c
  6174  002338  6E40               	movwf	___ftdiv@sign,c
  6175  00233A  5040               	movf	___ftdiv@sign,w,c
  6176  00233C  A4D8               	btfss	status,2,c
  6177  00233E  D007               	goto	l2867
  6178  002340                     l2863:
  6179  002340  0E00               	movlw	0
  6180  002342  6E32               	movwf	?___ftdiv,c
  6181  002344  0E00               	movlw	0
  6182  002346  6E33               	movwf	?___ftdiv+1,c
  6183  002348  0E00               	movlw	0
  6184  00234A  6E34               	movwf	?___ftdiv+2,c
  6185  00234C  D04D               	goto	l766
  6186  00234E                     l2867:
  6187  00234E  0E00               	movlw	0
  6188  002350  6E3C               	movwf	___ftdiv@f3,c
  6189  002352  0E00               	movlw	0
  6190  002354  6E3D               	movwf	___ftdiv@f3+1,c
  6191  002356  0E00               	movlw	0
  6192  002358  6E3E               	movwf	___ftdiv@f3+2,c
  6193  00235A  5040               	movf	___ftdiv@sign,w,c
  6194  00235C  0F89               	addlw	137
  6195  00235E  5E3F               	subwf	___ftdiv@exp,f,c
  6196  002360  C034  F040         	movff	___ftdiv@f1+2,___ftdiv@sign
  6197  002364  5037               	movf	___ftdiv@f2+2,w,c
  6198  002366  1A40               	xorwf	___ftdiv@sign,f,c
  6199  002368  0E80               	movlw	128
  6200  00236A  1640               	andwf	___ftdiv@sign,f,c
  6201  00236C  8E33               	bsf	___ftdiv@f1+1,7,c
  6202  00236E  0EFF               	movlw	255
  6203  002370  1632               	andwf	___ftdiv@f1,f,c
  6204  002372  0EFF               	movlw	255
  6205  002374  1633               	andwf	___ftdiv@f1+1,f,c
  6206  002376  0E00               	movlw	0
  6207  002378  1634               	andwf	___ftdiv@f1+2,f,c
  6208  00237A  8E36               	bsf	___ftdiv@f2+1,7,c
  6209  00237C  0EFF               	movlw	255
  6210  00237E  1635               	andwf	___ftdiv@f2,f,c
  6211  002380  0EFF               	movlw	255
  6212  002382  1636               	andwf	___ftdiv@f2+1,f,c
  6213  002384  0E00               	movlw	0
  6214  002386  1637               	andwf	___ftdiv@f2+2,f,c
  6215  002388  0E18               	movlw	24
  6216  00238A  6E3B               	movwf	___ftdiv@cntr,c
  6217  00238C  D000               	goto	l2887
  6218  00238E                     l2887:
  6219  00238E  90D8               	bcf	status,0,c
  6220  002390  363C               	rlcf	___ftdiv@f3,f,c
  6221  002392  363D               	rlcf	___ftdiv@f3+1,f,c
  6222  002394  363E               	rlcf	___ftdiv@f3+2,f,c
  6223  002396  5035               	movf	___ftdiv@f2,w,c
  6224  002398  5C32               	subwf	___ftdiv@f1,w,c
  6225  00239A  5036               	movf	___ftdiv@f2+1,w,c
  6226  00239C  5833               	subwfb	___ftdiv@f1+1,w,c
  6227  00239E  5037               	movf	___ftdiv@f2+2,w,c
  6228  0023A0  5834               	subwfb	___ftdiv@f1+2,w,c
  6229  0023A2  A0D8               	btfss	status,0,c
  6230  0023A4  D007               	goto	l769
  6231  0023A6  5035               	movf	___ftdiv@f2,w,c
  6232  0023A8  5E32               	subwf	___ftdiv@f1,f,c
  6233  0023AA  5036               	movf	___ftdiv@f2+1,w,c
  6234  0023AC  5A33               	subwfb	___ftdiv@f1+1,f,c
  6235  0023AE  5037               	movf	___ftdiv@f2+2,w,c
  6236  0023B0  5A34               	subwfb	___ftdiv@f1+2,f,c
  6237  0023B2  803C               	bsf	___ftdiv@f3,0,c
  6238  0023B4                     l769:
  6239  0023B4  90D8               	bcf	status,0,c
  6240  0023B6  3632               	rlcf	___ftdiv@f1,f,c
  6241  0023B8  3633               	rlcf	___ftdiv@f1+1,f,c
  6242  0023BA  3634               	rlcf	___ftdiv@f1+2,f,c
  6243  0023BC  2E3B               	decfsz	___ftdiv@cntr,f,c
  6244  0023BE  D7E7               	goto	l2887
  6245  0023C0  D000               	goto	l2897
  6246  0023C2                     l2897:
  6247  0023C2  C03C  F001         	movff	___ftdiv@f3,___ftpack@arg
  6248  0023C6  C03D  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6249  0023CA  C03E  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6250  0023CE  C03F  F004         	movff	___ftdiv@exp,___ftpack@exp
  6251  0023D2  C040  F005         	movff	___ftdiv@sign,___ftpack@sign
  6252  0023D6  ECF5  F011         	call	___ftpack	;wreg free
  6253  0023DA  C001  F032         	movff	?___ftpack,?___ftdiv
  6254  0023DE  C002  F033         	movff	?___ftpack+1,?___ftdiv+1
  6255  0023E2  C003  F034         	movff	?___ftpack+2,?___ftdiv+2
  6256  0023E6  D000               	goto	l766
  6257  0023E8                     l766:
  6258  0023E8  0012               	return		;funcret
  6259  0023EA                     __end_of___ftdiv:
  6260                           	opt stack 0
  6261                           tblptru	equ	0xFF8
  6262                           tblptrh	equ	0xFF7
  6263                           tblptrl	equ	0xFF6
  6264                           tablat	equ	0xFF5
  6265                           prodh	equ	0xFF4
  6266                           prodl	equ	0xFF3
  6267                           postinc0	equ	0xFEE
  6268                           wreg	equ	0xFE8
  6269                           indf2	equ	0xFDF
  6270                           postinc2	equ	0xFDE
  6271                           postdec2	equ	0xFDD
  6272                           fsr2h	equ	0xFDA
  6273                           fsr2l	equ	0xFD9
  6274                           status	equ	0xFD8
  6275                           
  6276 ;; *************** function _putsXLCD *****************
  6277 ;; Defined at:
  6278 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\putsxlcd.c"
  6279 ;; Parameters:    Size  Location     Type
  6280 ;;  buffer          2    2[COMRAM] PTR unsigned char 
  6281 ;;		 -> Buffer(20), 
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;		None
  6284 ;; Return value:  Size  Location     Type
  6285 ;;		None               void
  6286 ;; Registers used:
  6287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6293 ;;      Params:         2       0       0       0       0       0       0
  6294 ;;      Locals:         0       0       0       0       0       0       0
  6295 ;;      Temps:          0       0       0       0       0       0       0
  6296 ;;      Totals:         2       0       0       0       0       0       0
  6297 ;;Total ram usage:        2 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    3
  6300 ;; This function calls:
  6301 ;;		_BusyXLCD
  6302 ;;		_WriteDataXLCD
  6303 ;; This function is called by:
  6304 ;;		_main
  6305 ;; This function uses a non-reentrant model
  6306 ;;
  6307                           
  6308                           	psect	text20
  6309  002A5A                     __ptext20:
  6310                           	opt stack 0
  6311  002A5A                     _putsXLCD:
  6312                           	opt stack 27
  6313                           
  6314                           ;incstack = 0
  6315  002A5A  D010               	goto	l3407
  6316  002A5C  D000               	goto	l3401
  6317  002A5E                     l3401:
  6318  002A5E  ECF3  F014         	call	_BusyXLCD	;wreg free
  6319  002A62  0900               	iorlw	0
  6320  002A64  A4D8               	btfss	status,2,c
  6321  002A66  D7FB               	goto	l3401
  6322  002A68  C003  FFD9         	movff	putsXLCD@buffer,fsr2l
  6323  002A6C  C004  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  6324  002A70  50DF               	movf	indf2,w,c
  6325  002A72  ECB3  F014         	call	_WriteDataXLCD
  6326  002A76  4A03               	infsnz	putsXLCD@buffer,f,c
  6327  002A78  2A04               	incf	putsXLCD@buffer+1,f,c
  6328  002A7A  D000               	goto	l3407
  6329  002A7C                     l3407:
  6330  002A7C  C003  FFD9         	movff	putsXLCD@buffer,fsr2l
  6331  002A80  C004  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  6332  002A84  50DF               	movf	indf2,w,c
  6333  002A86  A4D8               	btfss	status,2,c
  6334  002A88  D7EA               	goto	l3401
  6335  002A8A  0012               	return		;funcret
  6336  002A8C                     __end_of_putsXLCD:
  6337                           	opt stack 0
  6338                           tblptru	equ	0xFF8
  6339                           tblptrh	equ	0xFF7
  6340                           tblptrl	equ	0xFF6
  6341                           tablat	equ	0xFF5
  6342                           prodh	equ	0xFF4
  6343                           prodl	equ	0xFF3
  6344                           postinc0	equ	0xFEE
  6345                           wreg	equ	0xFE8
  6346                           indf2	equ	0xFDF
  6347                           postinc2	equ	0xFDE
  6348                           postdec2	equ	0xFDD
  6349                           fsr2h	equ	0xFDA
  6350                           fsr2l	equ	0xFD9
  6351                           status	equ	0xFD8
  6352                           
  6353 ;; *************** function _putrsXLCD *****************
  6354 ;; Defined at:
  6355 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\putrxlcd.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  buffer          2    2[COMRAM] PTR const unsigned char 
  6358 ;;		 -> STR_5(2), STR_3(10), STR_2(12), STR_1(4), 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;		None
  6361 ;; Return value:  Size  Location     Type
  6362 ;;		None               void
  6363 ;; Registers used:
  6364 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6370 ;;      Params:         2       0       0       0       0       0       0
  6371 ;;      Locals:         0       0       0       0       0       0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0
  6373 ;;      Totals:         2       0       0       0       0       0       0
  6374 ;;Total ram usage:        2 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    3
  6377 ;; This function calls:
  6378 ;;		_BusyXLCD
  6379 ;;		_WriteDataXLCD
  6380 ;; This function is called by:
  6381 ;;		_main
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text21
  6386  002A22                     __ptext21:
  6387                           	opt stack 0
  6388  002A22                     _putrsXLCD:
  6389                           	opt stack 27
  6390                           
  6391                           ;incstack = 0
  6392  002A22  D011               	goto	l3041
  6393  002A24  D000               	goto	l3035
  6394  002A26                     l3035:
  6395  002A26  ECF3  F014         	call	_BusyXLCD	;wreg free
  6396  002A2A  0900               	iorlw	0
  6397  002A2C  A4D8               	btfss	status,2,c
  6398  002A2E  D7FB               	goto	l3035
  6399  002A30  C003  FFF6         	movff	putrsXLCD@buffer,tblptrl
  6400  002A34  C004  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  6401  002A38                     	if	0	;tblptru may be non-zero
  6402  002A38                     	endif
  6403  002A38                     	if	0	;tblptru may be non-zero
  6404  002A38                     	endif
  6405  002A38  0008               	tblrd		*
  6406  002A3A  50F5               	movf	tablat,w,c
  6407  002A3C  ECB3  F014         	call	_WriteDataXLCD
  6408  002A40  4A03               	infsnz	putrsXLCD@buffer,f,c
  6409  002A42  2A04               	incf	putrsXLCD@buffer+1,f,c
  6410  002A44  D000               	goto	l3041
  6411  002A46                     l3041:
  6412  002A46  C003  FFF6         	movff	putrsXLCD@buffer,tblptrl
  6413  002A4A  C004  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  6414  002A4E                     	if	0	;tblptru may be non-zero
  6415  002A4E                     	endif
  6416  002A4E                     	if	0	;tblptru may be non-zero
  6417  002A4E                     	endif
  6418  002A4E  0008               	tblrd		*
  6419  002A50  50F5               	movf	tablat,w,c
  6420  002A52  0900               	iorlw	0
  6421  002A54  A4D8               	btfss	status,2,c
  6422  002A56  D7E7               	goto	l3035
  6423  002A58  0012               	return		;funcret
  6424  002A5A                     __end_of_putrsXLCD:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           postinc0	equ	0xFEE
  6433                           wreg	equ	0xFE8
  6434                           indf2	equ	0xFDF
  6435                           postinc2	equ	0xFDE
  6436                           postdec2	equ	0xFDD
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8
  6440                           
  6441 ;; *************** function _WriteDataXLCD *****************
  6442 ;; Defined at:
  6443 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\writdata.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  data            1    wreg     unsigned char 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;  data            1    1[COMRAM] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;		None               void
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6457 ;;      Params:         0       0       0       0       0       0       0
  6458 ;;      Locals:         1       0       0       0       0       0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0
  6460 ;;      Totals:         1       0       0       0       0       0       0
  6461 ;;Total ram usage:        1 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    2
  6464 ;; This function calls:
  6465 ;;		_DelayFor18TCY
  6466 ;; This function is called by:
  6467 ;;		_putrsXLCD
  6468 ;;		_putsXLCD
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text22
  6473  002966                     __ptext22:
  6474                           	opt stack 0
  6475  002966                     _WriteDataXLCD:
  6476                           	opt stack 27
  6477                           
  6478                           ;incstack = 0
  6479                           ;WriteDataXLCD@data stored from wreg
  6480  002966  6E02               	movwf	WriteDataXLCD@data,c
  6481  002968  0EF0               	movlw	240
  6482  00296A  1693               	andwf	3987,f,c	;volatile
  6483  00296C  0EF0               	movlw	240
  6484  00296E  1681               	andwf	3969,f,c	;volatile
  6485  002970  3802               	swapf	WriteDataXLCD@data,w,c
  6486  002972  0B0F               	andlw	15
  6487  002974  0B0F               	andlw	15
  6488  002976  1281               	iorwf	3969,f,c	;volatile
  6489  002978  8A8A               	bsf	3978,5,c	;volatile
  6490  00297A  9C8A               	bcf	3978,6,c	;volatile
  6491  00297C  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6492  002980  888A               	bsf	3978,4,c	;volatile
  6493  002982  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6494  002986  988A               	bcf	3978,4,c	;volatile
  6495  002988  0EF0               	movlw	240
  6496  00298A  1681               	andwf	3969,f,c	;volatile
  6497  00298C  5002               	movf	WriteDataXLCD@data,w,c
  6498  00298E  0B0F               	andlw	15
  6499  002990  1281               	iorwf	3969,f,c	;volatile
  6500  002992  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6501  002996  888A               	bsf	3978,4,c	;volatile
  6502  002998  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6503  00299C  988A               	bcf	3978,4,c	;volatile
  6504  00299E  0E0F               	movlw	15
  6505  0029A0  1293               	iorwf	3987,f,c	;volatile
  6506  0029A2  D000               	goto	l345
  6507  0029A4                     l345:
  6508  0029A4  0012               	return		;funcret
  6509  0029A6                     __end_of_WriteDataXLCD:
  6510                           	opt stack 0
  6511                           tblptru	equ	0xFF8
  6512                           tblptrh	equ	0xFF7
  6513                           tblptrl	equ	0xFF6
  6514                           tablat	equ	0xFF5
  6515                           prodh	equ	0xFF4
  6516                           prodl	equ	0xFF3
  6517                           postinc0	equ	0xFEE
  6518                           wreg	equ	0xFE8
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _init_XLCD *****************
  6527 ;; Defined at:
  6528 ;;		line 48 in file "exp07hhh.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;		None               void
  6535 ;; Registers used:
  6536 ;;		wreg, status,2, status,0, cstack
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6542 ;;      Params:         0       0       0       0       0       0       0
  6543 ;;      Locals:         0       0       0       0       0       0       0
  6544 ;;      Temps:          0       0       0       0       0       0       0
  6545 ;;      Totals:         0       0       0       0       0       0       0
  6546 ;;Total ram usage:        0 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    4
  6549 ;; This function calls:
  6550 ;;		_BusyXLCD
  6551 ;;		_OpenXLCD
  6552 ;;		_WriteCmdXLCD
  6553 ;; This function is called by:
  6554 ;;		_main
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           	psect	text23
  6559  002B40                     __ptext23:
  6560                           	opt stack 0
  6561  002B40                     _init_XLCD:
  6562                           	opt stack 26
  6563                           
  6564                           ;exp07hhh.c: 50: OpenXLCD(0b00101100&0b00111000);
  6565                           
  6566                           ;incstack = 0
  6567  002B40  0E28               	movlw	40
  6568  002B42  EC58  F012         	call	_OpenXLCD
  6569                           
  6570                           ;exp07hhh.c: 52: while(BusyXLCD());
  6571  002B46  D000               	goto	l3027
  6572  002B48                     l3027:
  6573  002B48  ECF3  F014         	call	_BusyXLCD	;wreg free
  6574  002B4C  0900               	iorlw	0
  6575  002B4E  A4D8               	btfss	status,2,c
  6576  002B50  D7FB               	goto	l3027
  6577                           
  6578                           ;exp07hhh.c: 54: WriteCmdXLCD(0x06);
  6579  002B52  0E06               	movlw	6
  6580  002B54  ECD3  F014         	call	_WriteCmdXLCD
  6581                           
  6582                           ;exp07hhh.c: 55: WriteCmdXLCD(0x0C);
  6583  002B58  0E0C               	movlw	12
  6584  002B5A  ECD3  F014         	call	_WriteCmdXLCD
  6585  002B5E  0012               	return		;funcret
  6586  002B60                     __end_of_init_XLCD:
  6587                           	opt stack 0
  6588                           tblptru	equ	0xFF8
  6589                           tblptrh	equ	0xFF7
  6590                           tblptrl	equ	0xFF6
  6591                           tablat	equ	0xFF5
  6592                           prodh	equ	0xFF4
  6593                           prodl	equ	0xFF3
  6594                           postinc0	equ	0xFEE
  6595                           wreg	equ	0xFE8
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function _OpenXLCD *****************
  6604 ;; Defined at:
  6605 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\openxlcd.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  lcdtype         1    wreg     unsigned char 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  lcdtype         1    5[COMRAM] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;		None               void
  6612 ;; Registers used:
  6613 ;;		wreg, status,2, status,0, cstack
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6619 ;;      Params:         0       0       0       0       0       0       0
  6620 ;;      Locals:         1       0       0       0       0       0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0
  6622 ;;      Totals:         1       0       0       0       0       0       0
  6623 ;;Total ram usage:        1 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    3
  6626 ;; This function calls:
  6627 ;;		_BusyXLCD
  6628 ;;		_Delay10KTCYx
  6629 ;;		_DelayPORXLCD
  6630 ;;		_SetDDRamAddr
  6631 ;;		_WriteCmdXLCD
  6632 ;; This function is called by:
  6633 ;;		_init_XLCD
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text24
  6638  0024B0                     __ptext24:
  6639                           	opt stack 0
  6640  0024B0                     _OpenXLCD:
  6641                           	opt stack 26
  6642                           
  6643                           ;incstack = 0
  6644                           ;OpenXLCD@lcdtype stored from wreg
  6645  0024B0  6E06               	movwf	OpenXLCD@lcdtype,c
  6646  0024B2  0EF0               	movlw	240
  6647  0024B4  1681               	andwf	3969,f,c	;volatile
  6648  0024B6  0EF0               	movlw	240
  6649  0024B8  1693               	andwf	3987,f,c	;volatile
  6650  0024BA  9C93               	bcf	3987,6,c	;volatile
  6651  0024BC  9A93               	bcf	3987,5,c	;volatile
  6652  0024BE  9893               	bcf	3987,4,c	;volatile
  6653  0024C0  9C8A               	bcf	3978,6,c	;volatile
  6654  0024C2  9A8A               	bcf	3978,5,c	;volatile
  6655  0024C4  988A               	bcf	3978,4,c	;volatile
  6656  0024C6  ECE5  F015         	call	_DelayPORXLCD	;wreg free
  6657  0024CA  0E30               	movlw	48
  6658  0024CC  ECD3  F014         	call	_WriteCmdXLCD
  6659  0024D0  0E05               	movlw	5
  6660  0024D2  ECB0  F015         	call	_Delay10KTCYx
  6661  0024D6  0E30               	movlw	48
  6662  0024D8  ECD3  F014         	call	_WriteCmdXLCD
  6663  0024DC  0E01               	movlw	1
  6664  0024DE  ECB0  F015         	call	_Delay10KTCYx
  6665  0024E2  0E32               	movlw	50
  6666  0024E4  ECD3  F014         	call	_WriteCmdXLCD
  6667  0024E8  D000               	goto	l2603
  6668  0024EA                     l2603:
  6669  0024EA  ECF3  F014         	call	_BusyXLCD	;wreg free
  6670  0024EE  0900               	iorlw	0
  6671  0024F0  B4D8               	btfsc	status,2,c
  6672  0024F2  D002               	goto	l2605
  6673  0024F4  D7FA               	goto	l2603
  6674  0024F6  D000               	goto	l2605
  6675  0024F8                     l2605:
  6676  0024F8  ECF3  F014         	call	_BusyXLCD	;wreg free
  6677  0024FC  0900               	iorlw	0
  6678  0024FE  A4D8               	btfss	status,2,c
  6679  002500  D7FB               	goto	l2605
  6680  002502  5006               	movf	OpenXLCD@lcdtype,w,c
  6681  002504  ECD3  F014         	call	_WriteCmdXLCD
  6682  002508  D000               	goto	l2609
  6683  00250A                     l2609:
  6684  00250A  ECF3  F014         	call	_BusyXLCD	;wreg free
  6685  00250E  0900               	iorlw	0
  6686  002510  A4D8               	btfss	status,2,c
  6687  002512  D7FB               	goto	l2609
  6688  002514  0E08               	movlw	8
  6689  002516  ECD3  F014         	call	_WriteCmdXLCD
  6690  00251A  D000               	goto	l2613
  6691  00251C                     l2613:
  6692  00251C  ECF3  F014         	call	_BusyXLCD	;wreg free
  6693  002520  0900               	iorlw	0
  6694  002522  A4D8               	btfss	status,2,c
  6695  002524  D7FB               	goto	l2613
  6696  002526  0E0F               	movlw	15
  6697  002528  ECD3  F014         	call	_WriteCmdXLCD
  6698  00252C  D000               	goto	l2617
  6699  00252E                     l2617:
  6700  00252E  ECF3  F014         	call	_BusyXLCD	;wreg free
  6701  002532  0900               	iorlw	0
  6702  002534  A4D8               	btfss	status,2,c
  6703  002536  D7FB               	goto	l2617
  6704  002538  0E01               	movlw	1
  6705  00253A  ECD3  F014         	call	_WriteCmdXLCD
  6706  00253E  D000               	goto	l2621
  6707  002540                     l2621:
  6708  002540  ECF3  F014         	call	_BusyXLCD	;wreg free
  6709  002544  0900               	iorlw	0
  6710  002546  A4D8               	btfss	status,2,c
  6711  002548  D7FB               	goto	l2621
  6712  00254A  0E04               	movlw	4
  6713  00254C  ECD3  F014         	call	_WriteCmdXLCD
  6714  002550  D000               	goto	l2625
  6715  002552                     l2625:
  6716  002552  ECF3  F014         	call	_BusyXLCD	;wreg free
  6717  002556  0900               	iorlw	0
  6718  002558  A4D8               	btfss	status,2,c
  6719  00255A  D7FB               	goto	l2625
  6720  00255C  0E80               	movlw	128
  6721  00255E  EC67  F014         	call	_SetDDRamAddr
  6722  002562  D000               	goto	l286
  6723  002564                     l286:
  6724  002564  0012               	return		;funcret
  6725  002566                     __end_of_OpenXLCD:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _WriteCmdXLCD *****************
  6743 ;; Defined at:
  6744 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\wcmdxlcd.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  cmd             1    wreg     unsigned char 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  cmd             1    1[COMRAM] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;		None               void
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6758 ;;      Params:         0       0       0       0       0       0       0
  6759 ;;      Locals:         1       0       0       0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0
  6761 ;;      Totals:         1       0       0       0       0       0       0
  6762 ;;Total ram usage:        1 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    2
  6765 ;; This function calls:
  6766 ;;		_DelayFor18TCY
  6767 ;; This function is called by:
  6768 ;;		_main
  6769 ;;		_init_XLCD
  6770 ;;		_OpenXLCD
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text25
  6775  0029A6                     __ptext25:
  6776                           	opt stack 0
  6777  0029A6                     _WriteCmdXLCD:
  6778                           	opt stack 27
  6779                           
  6780                           ;incstack = 0
  6781                           ;WriteCmdXLCD@cmd stored from wreg
  6782  0029A6  6E02               	movwf	WriteCmdXLCD@cmd,c
  6783  0029A8  0EF0               	movlw	240
  6784  0029AA  1693               	andwf	3987,f,c	;volatile
  6785  0029AC  0EF0               	movlw	240
  6786  0029AE  1681               	andwf	3969,f,c	;volatile
  6787  0029B0  3802               	swapf	WriteCmdXLCD@cmd,w,c
  6788  0029B2  0B0F               	andlw	15
  6789  0029B4  0B0F               	andlw	15
  6790  0029B6  1281               	iorwf	3969,f,c	;volatile
  6791  0029B8  9C8A               	bcf	3978,6,c	;volatile
  6792  0029BA  9A8A               	bcf	3978,5,c	;volatile
  6793  0029BC  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6794  0029C0  888A               	bsf	3978,4,c	;volatile
  6795  0029C2  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6796  0029C6  988A               	bcf	3978,4,c	;volatile
  6797  0029C8  0EF0               	movlw	240
  6798  0029CA  1681               	andwf	3969,f,c	;volatile
  6799  0029CC  5002               	movf	WriteCmdXLCD@cmd,w,c
  6800  0029CE  0B0F               	andlw	15
  6801  0029D0  1281               	iorwf	3969,f,c	;volatile
  6802  0029D2  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6803  0029D6  888A               	bsf	3978,4,c	;volatile
  6804  0029D8  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6805  0029DC  988A               	bcf	3978,4,c	;volatile
  6806  0029DE  0E0F               	movlw	15
  6807  0029E0  1293               	iorwf	3987,f,c	;volatile
  6808  0029E2  D000               	goto	l334
  6809  0029E4                     l334:
  6810  0029E4  0012               	return		;funcret
  6811  0029E6                     __end_of_WriteCmdXLCD:
  6812                           	opt stack 0
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           postinc0	equ	0xFEE
  6820                           wreg	equ	0xFE8
  6821                           indf2	equ	0xFDF
  6822                           postinc2	equ	0xFDE
  6823                           postdec2	equ	0xFDD
  6824                           fsr2h	equ	0xFDA
  6825                           fsr2l	equ	0xFD9
  6826                           status	equ	0xFD8
  6827                           
  6828 ;; *************** function _SetDDRamAddr *****************
  6829 ;; Defined at:
  6830 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\setddram.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  DDaddr          1    wreg     unsigned char 
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;  DDaddr          1    4[COMRAM] unsigned char 
  6835 ;; Return value:  Size  Location     Type
  6836 ;;		None               void
  6837 ;; Registers used:
  6838 ;;		wreg, status,2, status,0, cstack
  6839 ;; Tracked objects:
  6840 ;;		On entry : 0/0
  6841 ;;		On exit  : 0/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6844 ;;      Params:         0       0       0       0       0       0       0
  6845 ;;      Locals:         1       0       0       0       0       0       0
  6846 ;;      Temps:          3       0       0       0       0       0       0
  6847 ;;      Totals:         4       0       0       0       0       0       0
  6848 ;;Total ram usage:        4 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    2
  6851 ;; This function calls:
  6852 ;;		_DelayFor18TCY
  6853 ;; This function is called by:
  6854 ;;		_main
  6855 ;;		_OpenXLCD
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           	psect	text26
  6860  0028CE                     __ptext26:
  6861                           	opt stack 0
  6862  0028CE                     _SetDDRamAddr:
  6863                           	opt stack 26
  6864                           
  6865                           ;incstack = 0
  6866                           ;SetDDRamAddr@DDaddr stored from wreg
  6867  0028CE  6E05               	movwf	SetDDRamAddr@DDaddr,c
  6868  0028D0  0EF0               	movlw	240
  6869  0028D2  1693               	andwf	3987,f,c	;volatile
  6870  0028D4  0EF0               	movlw	240
  6871  0028D6  1681               	andwf	3969,f,c	;volatile
  6872  0028D8  5005               	movf	SetDDRamAddr@DDaddr,w,c
  6873  0028DA  6E02               	movwf	??_SetDDRamAddr& (0+255),c
  6874  0028DC  6A03               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  6875  0028DE  8E02               	bsf	??_SetDDRamAddr,7,c
  6876  0028E0  0E04               	movlw	4
  6877  0028E2  6E04               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  6878  0028E4                     u1845:
  6879  0028E4  3403               	rlcf	??_SetDDRamAddr+1,w,c
  6880  0028E6  3203               	rrcf	??_SetDDRamAddr+1,f,c
  6881  0028E8  3202               	rrcf	??_SetDDRamAddr,f,c
  6882  0028EA  2E04               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  6883  0028EC  D7FB               	goto	u1845
  6884  0028EE  5002               	movf	??_SetDDRamAddr,w,c
  6885  0028F0  0B0F               	andlw	15
  6886  0028F2  1281               	iorwf	3969,f,c	;volatile
  6887  0028F4  9C8A               	bcf	3978,6,c	;volatile
  6888  0028F6  9A8A               	bcf	3978,5,c	;volatile
  6889  0028F8  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6890  0028FC  888A               	bsf	3978,4,c	;volatile
  6891  0028FE  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6892  002902  988A               	bcf	3978,4,c	;volatile
  6893  002904  0EF0               	movlw	240
  6894  002906  1681               	andwf	3969,f,c	;volatile
  6895  002908  5005               	movf	SetDDRamAddr@DDaddr,w,c
  6896  00290A  0B0F               	andlw	15
  6897  00290C  1281               	iorwf	3969,f,c	;volatile
  6898  00290E  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6899  002912  888A               	bsf	3978,4,c	;volatile
  6900  002914  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  6901  002918  988A               	bcf	3978,4,c	;volatile
  6902  00291A  0E0F               	movlw	15
  6903  00291C  1293               	iorwf	3987,f,c	;volatile
  6904  00291E  D000               	goto	l323
  6905  002920                     l323:
  6906  002920  0012               	return		;funcret
  6907  002922                     __end_of_SetDDRamAddr:
  6908                           	opt stack 0
  6909                           tblptru	equ	0xFF8
  6910                           tblptrh	equ	0xFF7
  6911                           tblptrl	equ	0xFF6
  6912                           tablat	equ	0xFF5
  6913                           prodh	equ	0xFF4
  6914                           prodl	equ	0xFF3
  6915                           postinc0	equ	0xFEE
  6916                           wreg	equ	0xFE8
  6917                           indf2	equ	0xFDF
  6918                           postinc2	equ	0xFDE
  6919                           postdec2	equ	0xFDD
  6920                           fsr2h	equ	0xFDA
  6921                           fsr2l	equ	0xFD9
  6922                           status	equ	0xFD8
  6923                           
  6924 ;; *************** function _DelayPORXLCD *****************
  6925 ;; Defined at:
  6926 ;;		line 75 in file "exp07hhh.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;		None
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;		None
  6931 ;; Return value:  Size  Location     Type
  6932 ;;		None               void
  6933 ;; Registers used:
  6934 ;;		wreg, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6940 ;;      Params:         0       0       0       0       0       0       0
  6941 ;;      Locals:         0       0       0       0       0       0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0
  6943 ;;      Totals:         0       0       0       0       0       0       0
  6944 ;;Total ram usage:        0 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    1
  6947 ;; This function calls:
  6948 ;;		_Delay1KTCYx
  6949 ;; This function is called by:
  6950 ;;		_OpenXLCD
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text27
  6955  002BCA                     __ptext27:
  6956                           	opt stack 0
  6957  002BCA                     _DelayPORXLCD:
  6958                           	opt stack 27
  6959                           
  6960                           ;exp07hhh.c: 77: Delay1KTCYx(30);
  6961                           
  6962                           ;incstack = 0
  6963  002BCA  0E1E               	movlw	30
  6964  002BCC  ECBC  F015         	call	_Delay1KTCYx
  6965  002BD0  0012               	return		;funcret
  6966  002BD2                     __end_of_DelayPORXLCD:
  6967                           	opt stack 0
  6968                           tblptru	equ	0xFF8
  6969                           tblptrh	equ	0xFF7
  6970                           tblptrl	equ	0xFF6
  6971                           tablat	equ	0xFF5
  6972                           prodh	equ	0xFF4
  6973                           prodl	equ	0xFF3
  6974                           postinc0	equ	0xFEE
  6975                           wreg	equ	0xFE8
  6976                           indf2	equ	0xFDF
  6977                           postinc2	equ	0xFDE
  6978                           postdec2	equ	0xFDD
  6979                           fsr2h	equ	0xFDA
  6980                           fsr2l	equ	0xFD9
  6981                           status	equ	0xFD8
  6982                           
  6983 ;; *************** function _Delay1KTCYx *****************
  6984 ;; Defined at:
  6985 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  unit            1    wreg     unsigned char 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  unit            1    0[COMRAM] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;		None               void
  6992 ;; Registers used:
  6993 ;;		wreg
  6994 ;; Tracked objects:
  6995 ;;		On entry : 0/0
  6996 ;;		On exit  : 0/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6999 ;;      Params:         0       0       0       0       0       0       0
  7000 ;;      Locals:         1       0       0       0       0       0       0
  7001 ;;      Temps:          0       0       0       0       0       0       0
  7002 ;;      Totals:         1       0       0       0       0       0       0
  7003 ;;Total ram usage:        1 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; This function calls:
  7006 ;;		Nothing
  7007 ;; This function is called by:
  7008 ;;		_DelayPORXLCD
  7009 ;;		_DelayXLCD
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           	psect	text28
  7014  002B78                     __ptext28:
  7015                           	opt stack 0
  7016  002B78                     _Delay1KTCYx:
  7017                           	opt stack 27
  7018                           
  7019                           ;incstack = 0
  7020                           ;Delay1KTCYx@unit stored from wreg
  7021  002B78  6E01               	movwf	Delay1KTCYx@unit,c
  7022  002B7A  0EFA               	movlw	250
  7023  002B7C                     u3527:
  7024  002B7C  F000               	nop	
  7025  002B7E  2EE8               	decfsz	wreg,f,c
  7026  002B80  D7FD               	goto	u3527
  7027  002B82  2E01               	decfsz	Delay1KTCYx@unit,f,c
  7028  002B84  D7FA               	goto	l2243
  7029  002B86  D000               	goto	l587
  7030  002B88                     l587:
  7031  002B88  0012               	return		;funcret
  7032  002B8A                     __end_of_Delay1KTCYx:
  7033                           	opt stack 0
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           postinc0	equ	0xFEE
  7041                           wreg	equ	0xFE8
  7042                           indf2	equ	0xFDF
  7043                           postinc2	equ	0xFDE
  7044                           postdec2	equ	0xFDD
  7045                           fsr2h	equ	0xFDA
  7046                           fsr2l	equ	0xFD9
  7047                           status	equ	0xFD8
  7048                           
  7049 ;; *************** function _Delay10KTCYx *****************
  7050 ;; Defined at:
  7051 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10ktcyx.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;  unit            1    wreg     unsigned char 
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;  unit            1    1[COMRAM] unsigned char 
  7056 ;; Return value:  Size  Location     Type
  7057 ;;		None               void
  7058 ;; Registers used:
  7059 ;;		wreg
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7065 ;;      Params:         0       0       0       0       0       0       0
  7066 ;;      Locals:         1       0       0       0       0       0       0
  7067 ;;      Temps:          1       0       0       0       0       0       0
  7068 ;;      Totals:         2       0       0       0       0       0       0
  7069 ;;Total ram usage:        2 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; This function calls:
  7072 ;;		Nothing
  7073 ;; This function is called by:
  7074 ;;		_OpenXLCD
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text29
  7079  002B60                     __ptext29:
  7080                           	opt stack 0
  7081  002B60                     _Delay10KTCYx:
  7082                           	opt stack 28
  7083                           
  7084                           ;incstack = 0
  7085                           ;Delay10KTCYx@unit stored from wreg
  7086  002B60  6E02               	movwf	Delay10KTCYx@unit,c
  7087  002B62  0E0D               	movlw	13
  7088  002B64  6E01               	movwf	??_Delay10KTCYx& (0+255),c
  7089  002B66  0EFC               	movlw	252
  7090  002B68                     u3537:
  7091  002B68  2EE8               	decfsz	wreg,f,c
  7092  002B6A  D7FE               	goto	u3537
  7093  002B6C  2E01               	decfsz	??_Delay10KTCYx& (0+255),f,c
  7094  002B6E  D7FC               	goto	u3537
  7095  002B70  2E02               	decfsz	Delay10KTCYx@unit,f,c
  7096  002B72  D7F7               	goto	l2369
  7097  002B74  D000               	goto	l573
  7098  002B76                     l573:
  7099  002B76  0012               	return		;funcret
  7100  002B78                     __end_of_Delay10KTCYx:
  7101                           	opt stack 0
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           postinc0	equ	0xFEE
  7109                           wreg	equ	0xFE8
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           fsr2h	equ	0xFDA
  7114                           fsr2l	equ	0xFD9
  7115                           status	equ	0xFD8
  7116                           
  7117 ;; *************** function _BusyXLCD *****************
  7118 ;; Defined at:
  7119 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\XLCD\busyxlcd.c"
  7120 ;; Parameters:    Size  Location     Type
  7121 ;;		None
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;		None
  7124 ;; Return value:  Size  Location     Type
  7125 ;;                  1    wreg      unsigned char 
  7126 ;; Registers used:
  7127 ;;		wreg, cstack
  7128 ;; Tracked objects:
  7129 ;;		On entry : 0/0
  7130 ;;		On exit  : 0/0
  7131 ;;		Unchanged: 0/0
  7132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7133 ;;      Params:         0       0       0       0       0       0       0
  7134 ;;      Locals:         0       0       0       0       0       0       0
  7135 ;;      Temps:          0       0       0       0       0       0       0
  7136 ;;      Totals:         0       0       0       0       0       0       0
  7137 ;;Total ram usage:        0 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; Hardware stack levels required when called:    2
  7140 ;; This function calls:
  7141 ;;		_DelayFor18TCY
  7142 ;; This function is called by:
  7143 ;;		_init_XLCD
  7144 ;;		_OpenXLCD
  7145 ;;		_putrsXLCD
  7146 ;;		_putsXLCD
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text30
  7151  0029E6                     __ptext30:
  7152                           	opt stack 0
  7153  0029E6                     _BusyXLCD:
  7154                           	opt stack 27
  7155                           
  7156                           ;incstack = 0
  7157  0029E6  8C8A               	bsf	3978,6,c	;volatile
  7158  0029E8  9A8A               	bcf	3978,5,c	;volatile
  7159  0029EA  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  7160  0029EE  888A               	bsf	3978,4,c	;volatile
  7161  0029F0  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  7162  0029F4  A681               	btfss	3969,3,c	;volatile
  7163  0029F6  D00A               	goto	l242
  7164  0029F8  988A               	bcf	3978,4,c	;volatile
  7165  0029FA  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  7166  0029FE  888A               	bsf	3978,4,c	;volatile
  7167  002A00  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  7168  002A04  988A               	bcf	3978,4,c	;volatile
  7169  002A06  9C8A               	bcf	3978,6,c	;volatile
  7170  002A08  0E01               	movlw	1
  7171  002A0A  D00A               	goto	l243
  7172  002A0C                     l242:
  7173  002A0C  988A               	bcf	3978,4,c	;volatile
  7174  002A0E  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  7175  002A12  888A               	bsf	3978,4,c	;volatile
  7176  002A14  ECE9  F015         	call	_DelayFor18TCY	;wreg free
  7177  002A18  988A               	bcf	3978,4,c	;volatile
  7178  002A1A  9C8A               	bcf	3978,6,c	;volatile
  7179  002A1C  0E00               	movlw	0
  7180  002A1E  D000               	goto	l243
  7181  002A20                     l243:
  7182  002A20  0012               	return		;funcret
  7183  002A22                     __end_of_BusyXLCD:
  7184                           	opt stack 0
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           prodh	equ	0xFF4
  7190                           prodl	equ	0xFF3
  7191                           postinc0	equ	0xFEE
  7192                           wreg	equ	0xFE8
  7193                           indf2	equ	0xFDF
  7194                           postinc2	equ	0xFDE
  7195                           postdec2	equ	0xFDD
  7196                           fsr2h	equ	0xFDA
  7197                           fsr2l	equ	0xFD9
  7198                           status	equ	0xFD8
  7199                           
  7200 ;; *************** function _DelayFor18TCY *****************
  7201 ;; Defined at:
  7202 ;;		line 71 in file "exp07hhh.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;		None
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;		None
  7207 ;; Return value:  Size  Location     Type
  7208 ;;		None               void
  7209 ;; Registers used:
  7210 ;;		wreg, cstack
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7216 ;;      Params:         0       0       0       0       0       0       0
  7217 ;;      Locals:         0       0       0       0       0       0       0
  7218 ;;      Temps:          0       0       0       0       0       0       0
  7219 ;;      Totals:         0       0       0       0       0       0       0
  7220 ;;Total ram usage:        0 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; Hardware stack levels required when called:    1
  7223 ;; This function calls:
  7224 ;;		_Delay10TCYx
  7225 ;; This function is called by:
  7226 ;;		_BusyXLCD
  7227 ;;		_SetDDRamAddr
  7228 ;;		_WriteCmdXLCD
  7229 ;;		_WriteDataXLCD
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text31
  7234  002BD2                     __ptext31:
  7235                           	opt stack 0
  7236  002BD2                     _DelayFor18TCY:
  7237                           	opt stack 27
  7238                           
  7239                           ;exp07hhh.c: 73: Delay10TCYx(20);
  7240                           
  7241                           ;incstack = 0
  7242  002BD2  0E14               	movlw	20
  7243  002BD4  ECC5  F015         	call	_Delay10TCYx
  7244  002BD8  0012               	return		;funcret
  7245  002BDA                     __end_of_DelayFor18TCY:
  7246                           	opt stack 0
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           indf2	equ	0xFDF
  7256                           postinc2	equ	0xFDE
  7257                           postdec2	equ	0xFDD
  7258                           fsr2h	equ	0xFDA
  7259                           fsr2l	equ	0xFD9
  7260                           status	equ	0xFD8
  7261                           
  7262 ;; *************** function _Delay10TCYx *****************
  7263 ;; Defined at:
  7264 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d10tcyx.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  unit            1    wreg     unsigned char 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;  unit            1    0[COMRAM] unsigned char 
  7269 ;; Return value:  Size  Location     Type
  7270 ;;		None               void
  7271 ;; Registers used:
  7272 ;;		wreg
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7278 ;;      Params:         0       0       0       0       0       0       0
  7279 ;;      Locals:         1       0       0       0       0       0       0
  7280 ;;      Temps:          0       0       0       0       0       0       0
  7281 ;;      Totals:         1       0       0       0       0       0       0
  7282 ;;Total ram usage:        1 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; This function calls:
  7285 ;;		Nothing
  7286 ;; This function is called by:
  7287 ;;		_DelayFor18TCY
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text32
  7292  002B8A                     __ptext32:
  7293                           	opt stack 0
  7294  002B8A                     _Delay10TCYx:
  7295                           	opt stack 27
  7296                           
  7297                           ;incstack = 0
  7298                           ;Delay10TCYx@unit stored from wreg
  7299  002B8A  6E01               	movwf	Delay10TCYx@unit,c
  7300  002B8C  0E03               	movlw	3
  7301  002B8E                     u3547:
  7302  002B8E  2EE8               	decfsz	wreg,f,c
  7303  002B90  D7FE               	goto	u3547
  7304  002B92  F000               	nop	
  7305  002B94  2E01               	decfsz	Delay10TCYx@unit,f,c
  7306  002B96  D7FA               	goto	l2237
  7307  002B98  D000               	goto	l580
  7308  002B9A                     l580:
  7309  002B9A  0012               	return		;funcret
  7310  002B9C                     __end_of_Delay10TCYx:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           postinc0	equ	0xFEE
  7319                           wreg	equ	0xFE8
  7320                           indf2	equ	0xFDF
  7321                           postinc2	equ	0xFDE
  7322                           postdec2	equ	0xFDD
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           
  7327 ;; *************** function _init_ADC1 *****************
  7328 ;; Defined at:
  7329 ;;		line 57 in file "exp07hhh.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;		None
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;		None
  7334 ;; Return value:  Size  Location     Type
  7335 ;;		None               void
  7336 ;; Registers used:
  7337 ;;		wreg, status,2, status,0, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7343 ;;      Params:         0       0       0       0       0       0       0
  7344 ;;      Locals:         0       0       0       0       0       0       0
  7345 ;;      Temps:          0       0       0       0       0       0       0
  7346 ;;      Totals:         0       0       0       0       0       0       0
  7347 ;;Total ram usage:        0 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:    1
  7350 ;; This function calls:
  7351 ;;		_OpenADC
  7352 ;; This function is called by:
  7353 ;;		_main
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           	psect	text33
  7358  002B9C                     __ptext33:
  7359                           	opt stack 0
  7360  002B9C                     _init_ADC1:
  7361                           	opt stack 29
  7362                           
  7363                           ;exp07hhh.c: 67: OpenADC(0b10001111 & 0b11111111 & 0b11110011,
  7364                           ;exp07hhh.c: 68: 0b10000111 & 0b01111111 & 0b11111100,
  7365                           ;exp07hhh.c: 69: 0b11111110);
  7366                           
  7367                           ;incstack = 0
  7368  002B9C  0E04               	movlw	4
  7369  002B9E  6E01               	movwf	OpenADC@config2,c
  7370  002BA0  0EFE               	movlw	254
  7371  002BA2  6E02               	movwf	OpenADC@portconfig,c
  7372  002BA4  0E83               	movlw	131
  7373  002BA6  EC38  F014         	call	_OpenADC
  7374  002BAA  0012               	return		;funcret
  7375  002BAC                     __end_of_init_ADC1:
  7376                           	opt stack 0
  7377                           tblptru	equ	0xFF8
  7378                           tblptrh	equ	0xFF7
  7379                           tblptrl	equ	0xFF6
  7380                           tablat	equ	0xFF5
  7381                           prodh	equ	0xFF4
  7382                           prodl	equ	0xFF3
  7383                           postinc0	equ	0xFEE
  7384                           wreg	equ	0xFE8
  7385                           indf2	equ	0xFDF
  7386                           postinc2	equ	0xFDE
  7387                           postdec2	equ	0xFDD
  7388                           fsr2h	equ	0xFDA
  7389                           fsr2l	equ	0xFD9
  7390                           status	equ	0xFD8
  7391                           
  7392 ;; *************** function _OpenADC *****************
  7393 ;; Defined at:
  7394 ;;		line 68 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;  config          1    wreg     unsigned char 
  7397 ;;  config2         1    0[COMRAM] unsigned char 
  7398 ;;  portconfig      1    1[COMRAM] unsigned char 
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;  config          1    4[COMRAM] unsigned char 
  7401 ;; Return value:  Size  Location     Type
  7402 ;;		None               void
  7403 ;; Registers used:
  7404 ;;		wreg, status,2, status,0
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7410 ;;      Params:         2       0       0       0       0       0       0
  7411 ;;      Locals:         1       0       0       0       0       0       0
  7412 ;;      Temps:          2       0       0       0       0       0       0
  7413 ;;      Totals:         5       0       0       0       0       0       0
  7414 ;;Total ram usage:        5 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; This function calls:
  7417 ;;		Nothing
  7418 ;; This function is called by:
  7419 ;;		_init_ADC1
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           	psect	text34
  7424  002870                     __ptext34:
  7425                           	opt stack 0
  7426  002870                     _OpenADC:
  7427                           	opt stack 29
  7428                           
  7429                           ;incstack = 0
  7430                           ;OpenADC@config stored from wreg
  7431  002870  6E05               	movwf	OpenADC@config,c
  7432  002872  0E00               	movlw	0
  7433  002874  6EC2               	movwf	4034,c	;volatile
  7434  002876  0E00               	movlw	0
  7435  002878  6EC0               	movwf	4032,c	;volatile
  7436  00287A  90D8               	bcf	status,0,c
  7437  00287C  3001               	rrcf	OpenADC@config2,w,c
  7438  00287E  0B3C               	andlw	60
  7439  002880  6EC2               	movwf	4034,c	;volatile
  7440  002882  C001  F003         	movff	OpenADC@config2,??_OpenADC
  7441  002886  3A03               	swapf	??_OpenADC,f,c
  7442  002888  0EF0               	movlw	240
  7443  00288A  1603               	andwf	??_OpenADC,f,c
  7444  00288C  0E30               	movlw	48
  7445  00288E  1603               	andwf	??_OpenADC,f,c
  7446  002890  5002               	movf	OpenADC@portconfig,w,c
  7447  002892  0B0F               	andlw	15
  7448  002894  1003               	iorwf	??_OpenADC,w,c
  7449  002896  6EC1               	movwf	4033,c	;volatile
  7450  002898  C005  F003         	movff	OpenADC@config,??_OpenADC
  7451  00289C  90D8               	bcf	status,0,c
  7452  00289E  3603               	rlcf	??_OpenADC,f,c
  7453  0028A0  90D8               	bcf	status,0,c
  7454  0028A2  3603               	rlcf	??_OpenADC,f,c
  7455  0028A4  0E38               	movlw	56
  7456  0028A6  1603               	andwf	??_OpenADC,f,c
  7457  0028A8  C005  F004         	movff	OpenADC@config,??_OpenADC+1
  7458  0028AC  3A04               	swapf	??_OpenADC+1,f,c
  7459  0028AE  0E0F               	movlw	15
  7460  0028B0  1604               	andwf	??_OpenADC+1,f,c
  7461  0028B2  0E07               	movlw	7
  7462  0028B4  1604               	andwf	??_OpenADC+1,f,c
  7463  0028B6  5005               	movf	OpenADC@config,w,c
  7464  0028B8  0B80               	andlw	128
  7465  0028BA  1004               	iorwf	??_OpenADC+1,w,c
  7466  0028BC  1003               	iorwf	??_OpenADC,w,c
  7467  0028BE  6EC0               	movwf	4032,c	;volatile
  7468  0028C0  AE01               	btfss	OpenADC@config2,7,c
  7469  0028C2  D003               	goto	l225
  7470  0028C4  9C9E               	bcf	3998,6,c	;volatile
  7471  0028C6  8C9D               	bsf	3997,6,c	;volatile
  7472  0028C8  8CF2               	bsf	intcon,6,c	;volatile
  7473  0028CA                     l225:
  7474  0028CA  80C2               	bsf	4034,0,c	;volatile
  7475  0028CC  0012               	return		;funcret
  7476  0028CE                     __end_of_OpenADC:
  7477                           	opt stack 0
  7478                           tblptru	equ	0xFF8
  7479                           tblptrh	equ	0xFF7
  7480                           tblptrl	equ	0xFF6
  7481                           tablat	equ	0xFF5
  7482                           prodh	equ	0xFF4
  7483                           prodl	equ	0xFF3
  7484                           intcon	equ	0xFF2
  7485                           postinc0	equ	0xFEE
  7486                           wreg	equ	0xFE8
  7487                           indf2	equ	0xFDF
  7488                           postinc2	equ	0xFDE
  7489                           postdec2	equ	0xFDD
  7490                           fsr2h	equ	0xFDA
  7491                           fsr2l	equ	0xFD9
  7492                           status	equ	0xFD8
  7493                           
  7494 ;; *************** function ___lwtoft *****************
  7495 ;; Defined at:
  7496 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;  c               2    8[COMRAM] unsigned int 
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;		None
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  3    8[COMRAM] float 
  7503 ;; Registers used:
  7504 ;;		wreg, status,2, status,0, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7510 ;;      Params:         3       0       0       0       0       0       0
  7511 ;;      Locals:         0       0       0       0       0       0       0
  7512 ;;      Temps:          0       0       0       0       0       0       0
  7513 ;;      Totals:         3       0       0       0       0       0       0
  7514 ;;Total ram usage:        3 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    1
  7517 ;; This function calls:
  7518 ;;		___ftpack
  7519 ;; This function is called by:
  7520 ;;		_main
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text35
  7525  002AB4                     __ptext35:
  7526                           	opt stack 0
  7527  002AB4                     ___lwtoft:
  7528                           	opt stack 29
  7529                           
  7530                           ;incstack = 0
  7531  002AB4  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  7532  002AB8  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  7533  002ABC  6A03               	clrf	___ftpack@arg+2,c
  7534  002ABE  0E8E               	movlw	142
  7535  002AC0  6E04               	movwf	___ftpack@exp,c
  7536  002AC2  0E00               	movlw	0
  7537  002AC4  6E05               	movwf	___ftpack@sign,c
  7538  002AC6  ECF5  F011         	call	___ftpack	;wreg free
  7539  002ACA  C001  F009         	movff	?___ftpack,?___lwtoft
  7540  002ACE  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  7541  002AD2  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  7542  002AD6  D000               	goto	l953
  7543  002AD8                     l953:
  7544  002AD8  0012               	return		;funcret
  7545  002ADA                     __end_of___lwtoft:
  7546                           	opt stack 0
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodh	equ	0xFF4
  7552                           prodl	equ	0xFF3
  7553                           intcon	equ	0xFF2
  7554                           postinc0	equ	0xFEE
  7555                           wreg	equ	0xFE8
  7556                           indf2	equ	0xFDF
  7557                           postinc2	equ	0xFDE
  7558                           postdec2	equ	0xFDD
  7559                           fsr2h	equ	0xFDA
  7560                           fsr2l	equ	0xFD9
  7561                           status	equ	0xFD8
  7562                           
  7563 ;; *************** function ___ftpack *****************
  7564 ;; Defined at:
  7565 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  7566 ;; Parameters:    Size  Location     Type
  7567 ;;  arg             3    0[COMRAM] unsigned um
  7568 ;;  exp             1    3[COMRAM] unsigned char 
  7569 ;;  sign            1    4[COMRAM] unsigned char 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  3    0[COMRAM] float 
  7574 ;; Registers used:
  7575 ;;		wreg, status,2, status,0
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7581 ;;      Params:         5       0       0       0       0       0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0
  7583 ;;      Temps:          3       0       0       0       0       0       0
  7584 ;;      Totals:         8       0       0       0       0       0       0
  7585 ;;Total ram usage:        8 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; This function calls:
  7588 ;;		Nothing
  7589 ;; This function is called by:
  7590 ;;		___ftadd
  7591 ;;		___ftdiv
  7592 ;;		___ftmul
  7593 ;;		___lltoft
  7594 ;;		___lwtoft
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           	psect	text36
  7599  0023EA                     __ptext36:
  7600                           	opt stack 0
  7601  0023EA                     ___ftpack:
  7602                           	opt stack 27
  7603                           
  7604                           ;incstack = 0
  7605  0023EA  5004               	movf	___ftpack@exp,w,c
  7606  0023EC  B4D8               	btfsc	status,2,c
  7607  0023EE  D005               	goto	l2251
  7608  0023F0  5001               	movf	___ftpack@arg,w,c
  7609  0023F2  1002               	iorwf	___ftpack@arg+1,w,c
  7610  0023F4  1003               	iorwf	___ftpack@arg+2,w,c
  7611  0023F6  A4D8               	btfss	status,2,c
  7612  0023F8  D00E               	goto	l2257
  7613  0023FA                     l2251:
  7614  0023FA  0E00               	movlw	0
  7615  0023FC  6E01               	movwf	?___ftpack,c
  7616  0023FE  0E00               	movlw	0
  7617  002400  6E02               	movwf	?___ftpack+1,c
  7618  002402  0E00               	movlw	0
  7619  002404  6E03               	movwf	?___ftpack+2,c
  7620  002406  D053               	goto	l694
  7621  002408  D006               	goto	l2257
  7622  00240A                     l2255:
  7623  00240A  2A04               	incf	___ftpack@exp,f,c
  7624  00240C  90D8               	bcf	status,0,c
  7625  00240E  3203               	rrcf	___ftpack@arg+2,f,c
  7626  002410  3202               	rrcf	___ftpack@arg+1,f,c
  7627  002412  3201               	rrcf	___ftpack@arg,f,c
  7628  002414  D000               	goto	l2257
  7629  002416                     l2257:
  7630  002416  0E00               	movlw	0
  7631  002418  1401               	andwf	___ftpack@arg,w,c
  7632  00241A  6E06               	movwf	??___ftpack& (0+255),c
  7633  00241C  0E00               	movlw	0
  7634  00241E  1402               	andwf	___ftpack@arg+1,w,c
  7635  002420  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7636  002422  0EFE               	movlw	254
  7637  002424  1403               	andwf	___ftpack@arg+2,w,c
  7638  002426  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7639  002428  5006               	movf	??___ftpack,w,c
  7640  00242A  1007               	iorwf	??___ftpack+1,w,c
  7641  00242C  1008               	iorwf	??___ftpack+2,w,c
  7642  00242E  B4D8               	btfsc	status,2,c
  7643  002430  D00E               	goto	l2263
  7644  002432  D7EB               	goto	l2255
  7645  002434  D00C               	goto	l2263
  7646  002436                     l2259:
  7647  002436  2A04               	incf	___ftpack@exp,f,c
  7648  002438  0E01               	movlw	1
  7649  00243A  2601               	addwf	___ftpack@arg,f,c
  7650  00243C  0E00               	movlw	0
  7651  00243E  2202               	addwfc	___ftpack@arg+1,f,c
  7652  002440  0E00               	movlw	0
  7653  002442  2203               	addwfc	___ftpack@arg+2,f,c
  7654  002444  90D8               	bcf	status,0,c
  7655  002446  3203               	rrcf	___ftpack@arg+2,f,c
  7656  002448  3202               	rrcf	___ftpack@arg+1,f,c
  7657  00244A  3201               	rrcf	___ftpack@arg,f,c
  7658  00244C  D000               	goto	l2263
  7659  00244E                     l2263:
  7660  00244E  0E00               	movlw	0
  7661  002450  1401               	andwf	___ftpack@arg,w,c
  7662  002452  6E06               	movwf	??___ftpack& (0+255),c
  7663  002454  0E00               	movlw	0
  7664  002456  1402               	andwf	___ftpack@arg+1,w,c
  7665  002458  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7666  00245A  0EFF               	movlw	255
  7667  00245C  1403               	andwf	___ftpack@arg+2,w,c
  7668  00245E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7669  002460  5006               	movf	??___ftpack,w,c
  7670  002462  1007               	iorwf	??___ftpack+1,w,c
  7671  002464  1008               	iorwf	??___ftpack+2,w,c
  7672  002466  B4D8               	btfsc	status,2,c
  7673  002468  D008               	goto	l2267
  7674  00246A  D7E5               	goto	l2259
  7675  00246C  D006               	goto	l2267
  7676  00246E                     l2265:
  7677  00246E  0604               	decf	___ftpack@exp,f,c
  7678  002470  90D8               	bcf	status,0,c
  7679  002472  3601               	rlcf	___ftpack@arg,f,c
  7680  002474  3602               	rlcf	___ftpack@arg+1,f,c
  7681  002476  3603               	rlcf	___ftpack@arg+2,f,c
  7682  002478  D000               	goto	l2267
  7683  00247A                     l2267:
  7684  00247A  BE02               	btfsc	___ftpack@arg+1,7,c
  7685  00247C  D004               	goto	l705
  7686  00247E  0E02               	movlw	2
  7687  002480  6004               	cpfslt	___ftpack@exp,c
  7688  002482  D7F5               	goto	l2265
  7689  002484  D000               	goto	l705
  7690  002486                     l705:
  7691  002486  B004               	btfsc	___ftpack@exp,0,c
  7692  002488  D002               	goto	l2273
  7693  00248A  9E02               	bcf	___ftpack@arg+1,7,c
  7694  00248C  D000               	goto	l2273
  7695  00248E                     l2273:
  7696  00248E  90D8               	bcf	status,0,c
  7697  002490  3204               	rrcf	___ftpack@exp,f,c
  7698  002492  5004               	movf	___ftpack@exp,w,c
  7699  002494  1203               	iorwf	___ftpack@arg+2,f,c
  7700  002496  5005               	movf	___ftpack@sign,w,c
  7701  002498  B4D8               	btfsc	status,2,c
  7702  00249A  D002               	goto	l2279
  7703  00249C  8E03               	bsf	___ftpack@arg+2,7,c
  7704  00249E  D000               	goto	l2279
  7705  0024A0                     l2279:
  7706  0024A0  C001  F001         	movff	___ftpack@arg,?___ftpack
  7707  0024A4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7708  0024A8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7709  0024AC  D000               	goto	l694
  7710  0024AE                     l694:
  7711  0024AE  0012               	return		;funcret
  7712  0024B0                     __end_of___ftpack:
  7713                           	opt stack 0
  7714                           tblptru	equ	0xFF8
  7715                           tblptrh	equ	0xFF7
  7716                           tblptrl	equ	0xFF6
  7717                           tablat	equ	0xFF5
  7718                           prodh	equ	0xFF4
  7719                           prodl	equ	0xFF3
  7720                           intcon	equ	0xFF2
  7721                           postinc0	equ	0xFEE
  7722                           wreg	equ	0xFE8
  7723                           indf2	equ	0xFDF
  7724                           postinc2	equ	0xFDE
  7725                           postdec2	equ	0xFDD
  7726                           fsr2h	equ	0xFDA
  7727                           fsr2l	equ	0xFD9
  7728                           status	equ	0xFD8
  7729                           
  7730 ;; *************** function _ReadADC *****************
  7731 ;; Defined at:
  7732 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;		None
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;		None
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  2    0[COMRAM] int 
  7739 ;; Registers used:
  7740 ;;		wreg, status,2
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7746 ;;      Params:         2       0       0       0       0       0       0
  7747 ;;      Locals:         0       0       0       0       0       0       0
  7748 ;;      Temps:          2       0       0       0       0       0       0
  7749 ;;      Totals:         4       0       0       0       0       0       0
  7750 ;;Total ram usage:        4 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; This function calls:
  7753 ;;		Nothing
  7754 ;; This function is called by:
  7755 ;;		_main
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           	psect	text37
  7760  002BAC                     __ptext37:
  7761                           	opt stack 0
  7762  002BAC                     _ReadADC:
  7763                           	opt stack 30
  7764                           
  7765                           ;incstack = 0
  7766  002BAC  50C4               	movf	4036,w,c	;volatile
  7767  002BAE  6E03               	movwf	??_ReadADC& (0+255),c
  7768  002BB0  50C3               	movf	4035,w,c	;volatile
  7769  002BB2  6E01               	movwf	?_ReadADC,c
  7770  002BB4  C003  F002         	movff	??_ReadADC,?_ReadADC+1
  7771  002BB8  D000               	goto	l233
  7772  002BBA                     l233:
  7773  002BBA  0012               	return		;funcret
  7774  002BBC                     __end_of_ReadADC:
  7775                           	opt stack 0
  7776                           tblptru	equ	0xFF8
  7777                           tblptrh	equ	0xFF7
  7778                           tblptrl	equ	0xFF6
  7779                           tablat	equ	0xFF5
  7780                           prodh	equ	0xFF4
  7781                           prodl	equ	0xFF3
  7782                           intcon	equ	0xFF2
  7783                           postinc0	equ	0xFEE
  7784                           wreg	equ	0xFE8
  7785                           indf2	equ	0xFDF
  7786                           postinc2	equ	0xFDE
  7787                           postdec2	equ	0xFDD
  7788                           fsr2h	equ	0xFDA
  7789                           fsr2l	equ	0xFD9
  7790                           status	equ	0xFD8
  7791                           
  7792 ;; *************** function _ConvertADC *****************
  7793 ;; Defined at:
  7794 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  7795 ;; Parameters:    Size  Location     Type
  7796 ;;		None
  7797 ;; Auto vars:     Size  Location     Type
  7798 ;;		None
  7799 ;; Return value:  Size  Location     Type
  7800 ;;		None               void
  7801 ;; Registers used:
  7802 ;;		None
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7808 ;;      Params:         0       0       0       0       0       0       0
  7809 ;;      Locals:         0       0       0       0       0       0       0
  7810 ;;      Temps:          0       0       0       0       0       0       0
  7811 ;;      Totals:         0       0       0       0       0       0       0
  7812 ;;Total ram usage:        0 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; This function calls:
  7815 ;;		Nothing
  7816 ;; This function is called by:
  7817 ;;		_main
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           	psect	text38
  7822  002BDA                     __ptext38:
  7823                           	opt stack 0
  7824  002BDA                     _ConvertADC:
  7825                           	opt stack 30
  7826                           
  7827                           ;incstack = 0
  7828  002BDA  82C2               	bsf	4034,1,c	;volatile
  7829  002BDC  0012               	return		;funcret
  7830  002BDE                     __end_of_ConvertADC:
  7831                           	opt stack 0
  7832                           tblptru	equ	0xFF8
  7833                           tblptrh	equ	0xFF7
  7834                           tblptrl	equ	0xFF6
  7835                           tablat	equ	0xFF5
  7836                           prodh	equ	0xFF4
  7837                           prodl	equ	0xFF3
  7838                           intcon	equ	0xFF2
  7839                           postinc0	equ	0xFEE
  7840                           wreg	equ	0xFE8
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           fsr2h	equ	0xFDA
  7845                           fsr2l	equ	0xFD9
  7846                           status	equ	0xFD8
  7847                           
  7848 ;; *************** function _BusyADC *****************
  7849 ;; Defined at:
  7850 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  7851 ;; Parameters:    Size  Location     Type
  7852 ;;		None
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;		None
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      unsigned char 
  7857 ;; Registers used:
  7858 ;;		wreg
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7864 ;;      Params:         0       0       0       0       0       0       0
  7865 ;;      Locals:         0       0       0       0       0       0       0
  7866 ;;      Temps:          0       0       0       0       0       0       0
  7867 ;;      Totals:         0       0       0       0       0       0       0
  7868 ;;Total ram usage:        0 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; This function calls:
  7871 ;;		Nothing
  7872 ;; This function is called by:
  7873 ;;		_main
  7874 ;; This function uses a non-reentrant model
  7875 ;;
  7876                           
  7877                           	psect	text39
  7878  002BBC                     __ptext39:
  7879                           	opt stack 0
  7880  002BBC                     _BusyADC:
  7881                           	opt stack 30
  7882                           
  7883                           ;incstack = 0
  7884  002BBC  A2C2               	btfss	4034,1,c	;volatile
  7885  002BBE  D002               	goto	u2860
  7886  002BC0  0E01               	movlw	1
  7887  002BC2  D002               	goto	l203
  7888  002BC4                     u2860:
  7889  002BC4  0E00               	movlw	0
  7890  002BC6  D000               	goto	l203
  7891  002BC8                     l203:
  7892  002BC8  0012               	return		;funcret
  7893  002BCA                     __end_of_BusyADC:
  7894                           	opt stack 0
  7895                           tblptru	equ	0xFF8
  7896                           tblptrh	equ	0xFF7
  7897                           tblptrl	equ	0xFF6
  7898                           tablat	equ	0xFF5
  7899                           prodh	equ	0xFF4
  7900                           prodl	equ	0xFF3
  7901                           intcon	equ	0xFF2
  7902                           postinc0	equ	0xFEE
  7903                           wreg	equ	0xFE8
  7904                           indf2	equ	0xFDF
  7905                           postinc2	equ	0xFDE
  7906                           postdec2	equ	0xFDD
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           tblptru	equ	0xFF8
  7911                           tblptrh	equ	0xFF7
  7912                           tblptrl	equ	0xFF6
  7913                           tablat	equ	0xFF5
  7914                           prodh	equ	0xFF4
  7915                           prodl	equ	0xFF3
  7916                           intcon	equ	0xFF2
  7917                           postinc0	equ	0xFEE
  7918                           wreg	equ	0xFE8
  7919                           indf2	equ	0xFDF
  7920                           postinc2	equ	0xFDE
  7921                           postdec2	equ	0xFDD
  7922                           fsr2h	equ	0xFDA
  7923                           fsr2l	equ	0xFD9
  7924                           status	equ	0xFD8
  7925                           
  7926                           	psect	rparam
  7927  0000                     tblptru	equ	0xFF8
  7928                           tblptrh	equ	0xFF7
  7929                           tblptrl	equ	0xFF6
  7930                           tablat	equ	0xFF5
  7931                           prodh	equ	0xFF4
  7932                           prodl	equ	0xFF3
  7933                           intcon	equ	0xFF2
  7934                           postinc0	equ	0xFEE
  7935                           wreg	equ	0xFE8
  7936                           indf2	equ	0xFDF
  7937                           postinc2	equ	0xFDE
  7938                           postdec2	equ	0xFDD
  7939                           fsr2h	equ	0xFDA
  7940                           fsr2l	equ	0xFD9
  7941                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    118
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      94
    BANK0           160     26      46
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 20
		 -> Buffer(BANK0[20]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_5(CODE[2]), STR_3(CODE[10]), STR_2(CODE[12]), STR_1(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftneg
    ___awdiv->___awmod
    ___lltoft->___fttol
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftdiv->_scale
    _putsXLCD->_WriteDataXLCD
    _putrsXLCD->_WriteDataXLCD
    _init_XLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _DelayPORXLCD->_Delay1KTCYx
    _DelayFor18TCY->_Delay10TCYx
    _init_ADC1->_OpenADC
    ___lwtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   55584
                                             86 COMRAM     3     3      0
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                       _SetDDRamAddr
                       _WriteCmdXLCD
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                          _init_ADC1
                          _init_XLCD
                          _putrsXLCD
                           _putsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             47    40      7   46108
                                             73 COMRAM    13     6      7
                                              0 BANK0     26    26      0
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3    9332
                                             42 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                            ___fttol (ARG)
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    9134
                                             42 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1961
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4060
                                             27 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1356
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1466
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    1974
                                             15 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     795
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     692
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     729
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3555
                                             64 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3302
                                             52 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                            ___fttol (ARG)
                           ___lltoft (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     204
                                             24 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     560
                                             64 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2318
                                             49 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (1) _putsXLCD                                             2     0      2     186
                                              2 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (1) _putrsXLCD                                            2     0      2     345
                                              2 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      66
                                              1 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _init_XLCD                                            0     0      0     308
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     220
                                              5 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      66
                                              1 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      66
                                              1 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0      22
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (4) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0      22
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0      22
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_ADC1                                            0     0      0     260
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     260
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    1821
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyADC
   _ConvertADC
   _ReadADC
   _SetDDRamAddr
     _DelayFor18TCY
       _Delay10TCYx
   _WriteCmdXLCD
     _DelayFor18TCY
       _Delay10TCYx
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftneg (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
     ___ftpack (ARG)
     ___fttol (ARG)
     ___lltoft (ARG)
       ___ftpack
       ___fttol (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _init_ADC1
     _OpenADC
   _init_XLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
           _Delay10TCYx
       _Delay10KTCYx
       _DelayPORXLCD
         _Delay1KTCYx
       _SetDDRamAddr
         _DelayFor18TCY
           _Delay10TCYx
       _WriteCmdXLCD
         _DelayFor18TCY
           _Delay10TCYx
     _WriteCmdXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _putrsXLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _WriteDataXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _putsXLCD
     _BusyXLCD
       _DelayFor18TCY
         _Delay10TCYx
     _WriteDataXLCD
       _DelayFor18TCY
         _Delay10TCYx
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftneg (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
           ___ftpack (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftneg (ARG)
               ___fttol (ARG)
               ___lltoft (ARG)
                 ___ftpack
                 ___fttol (ARG)
             ___ftpack (ARG)
             ___fttol (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
     ___fttol
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
       ___fttol (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftneg (ARG)
           ___fttol (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1A      2E       5       28.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      5E       1       98.9%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8C       3        0.0%
DATA                 0      0      8C      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Jul 10 03:32:37 2021

                     l96 19DE                       l89 1C22             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
           ___ftadd@exp1 0040             ___ftadd@exp2 003F              __CFG_LVP$ON 000000  
           ___ftadd@sign 003E                      l203 2BC8                      l132 09B2  
                    l142 0CA8                      l126 0942                      l127 0946  
                    l128 0E40                      l233 2BBA                      l225 28CA  
                    l242 2A0C                      l243 2A20                      l323 2920  
                    l155 0F38                      l334 29E4                      l183 1386  
                    l345 29A4                      l348 2AB2                      l541 25FA  
                    l286 2564                      l198 15FE                      l705 2486  
                    l554 279E                      l580 2B9A                      l573 2B76  
                    l653 2128                      l734 1C68                      l662 2118  
                    l735 1DE6                      l815 2964                      l808 2AF0  
                    l738 1C92                      l834 2B1E                      l587 2B88  
                    l819 2306                      l749 1D54                      l694 24AE  
                    l766 23E8                      l758 1D70                      l774 201E  
                    l863 270C                      l783 200E                      l792 2690  
                    l776 1F86                      l953 2AD8                      l769 23B4  
                    l873 27FE                      l777 1FAE                      l893 286E  
                    l798 2220             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
  __size_of_WriteCmdXLCD 0040             ___awmod@sign 0006                      wreg 000FE8  
           ___ftdiv@cntr 003B             ___ftdiv@sign 0040             __CFG_WDT$OFF 000000  
                   l3011 27EE                     l3003 27B2                     l3005 27C0  
                   l3101 07F2                     l3007 27C8                     l3041 2A46  
                   l3017 2816                     l3201 0D88                     l2251 23FA  
                   l2243 2B7A                     l3027 2B48                     l3035 2A26  
                   l3019 2824                     l3131 093A                     l2237 2B8C  
                   l2421 1D18                     l3301 121E                     l3221 0DE4  
                   l3125 08FE                     l3117 0896                     l3061 06C0  
                   l2263 244E                     l2255 240A                     l2415 1CF8  
                   l2511 258E                     l3231 0E3A                     l3207 0DA2  
                   l3143 099A                     l3135 0962                     l3055 06A8  
                   l2273 248E                     l2265 246E                     l2257 2416  
                   l3401 2A5E                     l2417 1D04                     l2409 1CD4  
                   l2521 25B6                     l2505 257C                     l3313 126C  
                   l3305 122C                     l3241 0E90                     l3225 0DF2  
                   l3209 0DB2                     l3161 0B1E                     l3137 097E  
                   l3129 0926                     l3073 072C                     l2267 247A  
                   l2259 2436                     l2603 24EA                     l2435 1D8E  
                   l2427 1D3C                     l2419 1D10                     l3219 0DDE  
                   l3155 0A98                     l3147 09B8                     l3091 07AA  
                   l3083 0764                     l3075 0744                     l2621 2540  
                   l2613 251C                     l2605 24F8                     l2445 1DC0  
                   l2429 1D48                     l2517 25A4                     l2533 25E0  
                   l2461 2170                     l3341 138C                     l3317 1290  
                   l3309 1266                     l3261 0FD6                     l3253 0EDE  
                   l3245 0E9E                     l3237 0E6A                     l3173 0BB8  
                   l3085 078C                     l3069 06F0                     l2279 24A0  
                   l3407 2A7C                     l2519 25AE                     l2455 2148  
                   l2711 2B16                     l3335 1354                     l3319 1296  
                   l3327 132A                     l3271 106A                     l3255 0F08  
                   l3167 0B8E                     l3079 0758                     l3431 1E2E  
                   l2369 2B62                     l2625 2552                     l2617 252E  
                   l2609 250A                     l2393 1CA0                     l2721 1F2E  
                   l2537 25F0                     l2529 25D4                     l2561 2762  
                   l2553 2742                     l2457 2162                     l3353 140E  
                   l3337 1368                     l3329 133A                     l3281 10F8  
                   l3273 109C                     l3265 1014                     l3249 0ED8  
                   l3193 0CD8                     l3441 1E5A                     l2387 1C76  
                   l2483 21CC                     l2475 21A4                     l3371 151E  
                   l3363 14F4                     l3291 116E                     l3275 10B2  
                   l3435 1E44                     l3427 1E1A                     l2821 20EA  
                   l2805 20B6                     l2573 2794                     l2565 2778  
                   l2557 2750                     l2549 2734                     l2493 21FA  
                   l2485 21D2                     l2661 1BE2                     l2653 1B1E  
                   l3365 1504                     l3349 13BC                     l3293 119C  
                   l3285 111E                     l3269 1054                     l3373 152E  
                   l3437 1E4C                     l2399 1CAC                     l2823 20F0  
                   l2727 1F4C                     l2559 275A                     l2479 21B6  
                   l3383 157A                     l3287 112A                     l3295 11B0  
                   l3199 0D78                     l2913 262E                     l2905 293A  
                   l2817 20DA                     l2809 20C6                     l2761 1FE0  
                   l2569 2784                     l2489 21E4                     l2681 17D4  
                   l3393 15D0                     l2923 268C                     l2827 2104  
                   l2763 1FE6                     l2675 172C                     l3387 15A8  
                   l3379 1556                     l3299 1218                     l3395 15F0  
                   l2861 2326                     l2917 2660                     l2829 2112  
                   l2757 1FD0                     l2749 1FBC                     l2693 1908  
                   l2685 17E4                     l2863 2340                     l2783 2040  
                   l2767 1FFA                     l2961 22B0                     l2937 2240  
                   l2777 2030                     l2769 2008                     l2867 234E  
                   l2955 229A                     l2699 19BA                     l2973 22F4  
                   l2965 22C4                     l2797 2084                     l2887 238E  
                   l2967 22D2                     l2959 22AA                     l2983 26B4  
                   l2897 23C2                     l2969 22DC                     l2985 26C2  
                   l2995 26FC                     l2987 26CA                     STR_1 0692  
                   STR_2 0677                     STR_3 0683                     STR_4 068D  
                   STR_5 068B                     u2071 213A                     u3040 09AA  
                   u2091 2158                     u2421 1F20                     u2601 2336  
                   u2441 1F3E                     u2700 225E                     u3360 137E  
                   u2705 2256                     u1845 28E4                     u2581 2318  
                   u1861 1C34                     u3517 1E34                     u3527 2B7C  
                   u1871 1C48                     u3537 2B68                     u2681 2232  
                   u3547 2B8E                     u2860 2BC4                     u2940 0832  
                   u2945 0828                     _main 1DE8             ___ftpack@arg 0001  
           ___ftpack@exp 0004                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9   __size_of_WriteDataXLCD 0040                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
           _sprintf$1398 0060             ___ftmul@cntr 0029             ___param_bank 000010  
           ___ftmul@sign 002A          __end_of_BusyADC 2BCA          __end_of_ReadADC 2BBC  
            _Delay10TCYx 2B8A          __end_of_OpenADC 28CE             ___fttol@exp1 000F  
           ___fttol@lval 000B             _WriteCmdXLCD 29A6              _Delay1KTCYx 2B78  
          ?_SetDDRamAddr 0001                    ?_main 0001          __end_of___awdiv 25FC  
        __end_of___ftadd 1DE8          __end_of___awmod 27A0          __end_of___ftdiv 23EA  
        __end_of___ftneg 2AFE          __end_of___lldiv 271E          __end_of___ftmul 2222  
        ___awdiv@divisor 0009          __end_of___llmod 2810          __end_of___ftsub 2966  
        __end_of___fttol 2308          ___awdiv@counter 000B                    _PORTB 000F81  
                  _TRISB 000F93    __size_of_Delay10KTCYx 0018            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000             ___lltoft@exp 0018           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000          __end_of_dpowers 0629  
                  _scale 1600          __end_of_isdigit 2B20            ___ftpack@sign 0005  
                  main@x 0058               _ConvertADC 2BDA           __CFG_BOREN$OFF 000000  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 1600  
         __CFG_PBADEN$ON 000000           __CFG_MCLRE$OFF 000000          __initialization 2B20  
           __end_of_main 1F10         __end_of_BusyXLCD 2A22             _Delay10KTCYx 2B60  
  __size_of_DelayPORXLCD 0008           ??_SetDDRamAddr 0002         __end_of_OpenXLCD 2566  
                 ??_main 0057            ___fttol@sign1 000A            __activetblptr 000002  
          _WriteDataXLCD 2966     __size_of__tdiv_to_l_ 0110                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0         ___llmod@dividend 0001  
                 ?_scale 002B                   _ADRESH 000FC4                   _ADRESL 000FC3  
       ___awdiv@dividend 0007          __CFG_BBSIZ$1024 000000         __end_of___ftpack 24B0  
       __end_of___lltoft 2870         __end_of___lwtoft 2ADA                   _OSCCON 000FD3  
              ??_BusyADC 0001                ??_ReadADC 0003                   _Buffer 007A  
              ??_OpenADC 0003             _DelayPORXLCD 2BCA           __CFG_XINST$OFF 000000  
       __end_of__powers_ 0677                   ___ftge 25FC                   ___wmul 2A8C  
              ??___awdiv 000B                ??___ftadd 003B           __CFG_STVREN$ON 000000  
              ??___awmod 0005                ??___ftdiv 0038                ??___ftneg 001C  
              ??___lldiv 0009                ??___ftmul 0022                ??___llmod 0009  
              ??___ftsub 0047                ??___fttol 0005                   _fround 19E0  
                 clear_0 2B26         ___awdiv@quotient 000D          ___awmod@divisor 0003  
        ___awmod@counter 0005           ?_WriteDataXLCD 0001    ___ftmul@f3_as_product 0026  
              ??_isdigit 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8         __end_of_putsXLCD 2A8C  
              ??_sprintf 0051              ?_ConvertADC 0001               __accesstop 0060  
__end_of__initialization 2B36               ___ftadd@f1 0035               ___ftadd@f2 0038  
             ___ftge@ff1 0041               ___ftge@ff2 0044            ___rparam_used 000001  
             ___ftdiv@f1 0032               ___ftdiv@f2 0035               ___ftdiv@f3 003C  
             ___ftneg@f1 0019               ___ftmul@f1 001C               ___ftmul@f2 001F  
             ___ftsub@f1 0041               ___ftsub@f2 0044               ___fttol@f1 0001  
         __pcstackCOMRAM 0001               ___lltoft@c 0010            __end_of_scale 19E0  
             ___lwtoft@c 0009               __div_to_l_ 2020          __div_to_l_@exp1 000C  
        __div_to_l_@cntr 000B                  ??_scale 002E   __size_of_DelayFor18TCY 0008  
        __div_to_l_@quot 0007               __pbssBANK0 007A                ?_BusyXLCD 0001  
     __size_of_init_ADC1 0010          WriteCmdXLCD@cmd 0002     __end_of_SetDDRamAddr 2922  
     __size_of_init_XLCD 0020                ?_OpenXLCD 0001            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004                  ?___ftge 0041        WriteDataXLCD@data 0002  
           ?_Delay10TCYx 0001                  ?___wmul 000F          ??_WriteDataXLCD 0002  
           ?_Delay1KTCYx 0001                  ?_fround 002B      __size_of_ConvertADC 0004  
              ?___ftpack 0001                ?___lltoft 0010                ?___lwtoft 0009  
     __size_of_putrsXLCD 0038               ??_BusyXLCD 0002                  _BusyADC 2BBC  
                _ReadADC 2BAC               ??_OpenXLCD 0006                _ADCResult 005D  
                _OpenADC 2870        __end_of__npowers_ 0650                  __Hparam 0000  
             _scale$1397 002E                  __Lparam 0000          __size_of___ftge 0096  
                ___awdiv 2566            _DelayFor18TCY 2BD2                  ___ftadd 1C24  
                ___awmod 271E                  ___ftdiv 2308                  ___ftneg 2ADA  
                ___lldiv 2692          __size_of___wmul 0028                  ___ftmul 212A  
                ___llmod 27A0                  ___ftsub 2922                  ___fttol 2222  
              ?_putsXLCD 0003             __psmallconst 0600                  __pcinit 2B20  
             ??___ftpack 0006          putrsXLCD@buffer 0003          __size_of_fround 0244  
        Delay10TCYx@unit 0001                  __ramtop 0600        __end_of_init_ADC1 2BAC  
             ??___lltoft 0014                  __ptext0 1DE8                  __ptext1 0698  
                __ptext2 1600                  __ptext3 2AFE                  __ptext4 19E0  
                __ptext5 2A8C                  __ptext6 212A                  __ptext7 271E  
                __ptext8 2566                  __ptext9 1F10        __end_of_init_XLCD 2B60  
             ??___lwtoft 000C              ?__div_to_l_ 0001                  _dpowers 0601  
                _isdigit 2AFE         ___awmod@dividend 0001           OpenADC@config2 0001  
                _sprintf 0698                  _voltage 005A     end_of_initialization 2B36  
          __Lmediumconst 0000          ___lldiv@divisor 0005          ___lldiv@counter 000D  
         ?_DelayFor18TCY 0001                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE               ??_putsXLCD 0005           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004        __end_of_putrsXLCD 2A5A            ??__tdiv_to_l_ 0007  
              _TRISBbits 000F93    __size_of_SetDDRamAddr 0054             ??_ConvertADC 0001  
            ___ftdiv@exp 003F      __size_of__div_to_l_ 010A              ___ftmul@exp 0025  
         __end_of___ftge 2692           __end_of___wmul 2AB4     __size_of_Delay10TCYx 0012  
     __end_of_ConvertADC 2BDE           __end_of_fround 1C24             _SetDDRamAddr 28CE  
   __size_of_Delay1KTCYx 0012       SetDDRamAddr@DDaddr 0005      start_initialization 2B20  
    __end_of__tdiv_to_l_ 2020         __CFG_OSC$IRCIO67 000000          ___llmod@divisor 0005  
      __size_of_BusyXLCD 003C          ___llmod@counter 0009          ??_DelayFor18TCY 0002  
      __size_of_OpenXLCD 00B6                 ??___ftge 0047                 ??___wmul 0013  
          ?_WriteCmdXLCD 0001         __CFG_LPT1OSC$OFF 000000                 ??_fround 002E  
          sprintf@tmpval 006A               fround@prec 0034        __size_of___ftpack 00C6  
      __size_of___lltoft 0060              __pbssCOMRAM 005A        __size_of___lwtoft 0026  
          __pcstackBANK0 0060             _isdigit$1164 0002          Delay1KTCYx@unit 0001  
            sprintf@flag 0068              sprintf@fval 0076              sprintf@prec 0074  
            sprintf@temp 0065                 ?_BusyADC 0001                 ?_ReadADC 0001  
      OpenADC@portconfig 0002                 ?_OpenADC 0001           putsXLCD@buffer 0003  
         ??_WriteCmdXLCD 0002                 ?___awdiv 0007                 ?___ftadd 0035  
               ?___awmod 0001                 ?___ftdiv 0032                 ?___ftneg 0019  
               ?___lldiv 0001                 ?___ftmul 001C                 ?___llmod 0001  
               ?___ftsub 0041                __npowers_ 0629                 ?___fttol 0001  
          ?_Delay10KTCYx 0001              __tdiv_to_l_ 1F10        __size_of_putsXLCD 0032  
  __end_of_WriteDataXLCD 29A6             ??__div_to_l_ 0007              __smallconst 0600  
               ?_isdigit 0001                _init_ADC1 2B9C                _init_XLCD 2B40  
               ?_sprintf 004A           __size_of_scale 03E0           ___wmul@product 0013  
          OpenADC@config 0005                 _LATBbits 000F8A                 _PIE1bits 000F9D  
          ?_DelayPORXLCD 0001                 _PIR1bits 000F9E          OpenXLCD@lcdtype 0006  
     __end_of__div_to_l_ 212A         __CFG_WDTPS$32768 000000           ??_Delay10KTCYx 0001  
             _ADCON0bits 000FC2        ___wmul@multiplier 000F                _putrsXLCD 2A22  
             ?_init_ADC1 0001         Delay10KTCYx@unit 0002               ?_init_XLCD 0001  
               _BusyXLCD 29E6           ??_DelayPORXLCD 0002                 _OpenXLCD 24B0  
       __size_of_BusyADC 000E         __size_of_ReadADC 0010                 __Hrparam 0000  
       __size_of_OpenADC 005E                 __Lrparam 0000         __size_of___awdiv 0096  
       __size_of___ftadd 01C4         __size_of___awmod 0082         __size_of___ftdiv 00E2  
       __size_of___ftneg 0024         __size_of___lldiv 008C         __size_of___ftmul 00F8  
       __size_of___llmod 0070         __size_of___ftsub 0044         __size_of___fttol 00E6  
               ___ftpack 23EA              _fround$1395 0031              _fround$1396 002E  
               ___lltoft 2810                 ___lwtoft 2AB4               sprintf@exp 0072  
             sprintf@val 006E               ?_putrsXLCD 0003         __size_of_isdigit 0022  
               __ptext10 2020                 __ptext11 2810                 __ptext20 2A5A  
               __ptext12 27A0                 __ptext21 2A22                 __ptext13 2692  
               __ptext30 29E6                 __ptext22 2966                 __ptext14 2222  
               __ptext31 2BD2                 __ptext23 2B40                 __ptext15 2922  
               __ptext32 2B8A                 __ptext24 24B0                 __ptext16 1C24  
               __ptext33 2B9C                 __ptext25 29A6                 __ptext17 2ADA  
               __ptext34 2870                 __ptext26 28CE                 __ptext18 25FC  
               __ptext35 2AB4                 __ptext27 2BCA                 __ptext19 2308  
               __ptext36 23EA                 __ptext28 2B78                 __ptext37 2BAC  
               __ptext29 2B60                 __ptext38 2BDA                 __ptext39 2BBC  
               __powers_ 0650     __end_of_WriteCmdXLCD 29E6         __size_of_sprintf 0F68  
          __size_of_main 0128            ??_Delay10TCYx 0001                 _putsXLCD 2A5A  
          ??_Delay1KTCYx 0001               _INTCONbits 000FF2              ??_init_ADC1 0006  
            ??_init_XLCD 0007                 isdigit@c 0003                 scale@scl 0031  
   __end_of_Delay10KTCYx 2B78                sprintf@ap 0063         __tdiv_to_l_@exp1 000F  
              sprintf@sp 004A         __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A  
       ___lldiv@dividend 0001    __end_of_DelayFor18TCY 2BDA             ?__tdiv_to_l_ 0001  
    __end_of_Delay10TCYx 2B9C                 sprintf@c 0079                 sprintf@f 004C  
   __end_of_DelayPORXLCD 2BD2              ??_putrsXLCD 0005         ___lldiv@quotient 0009  
    __end_of_Delay1KTCYx 2B8A  
